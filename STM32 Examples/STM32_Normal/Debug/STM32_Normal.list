
STM32_Normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08009dd8  08009dd8  0000add8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a8  0800a1a8  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a8  0800a1a8  0000b1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b0  0800a1b0  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b0  0800a1b0  0000b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1b4  0800a1b4  0000b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a1b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  0800a38c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800a38c  0000c430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be41  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d63  00000000  00000000  0001803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00019da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087b  00000000  00000000  0001a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001847c  00000000  00000000  0001b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e310  00000000  00000000  00033577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873de  00000000  00000000  00041887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f6c  00000000  00000000  000c8ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ccc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009dc0 	.word	0x08009dc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009dc0 	.word	0x08009dc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b99b 	b.w	800137c <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9d08      	ldr	r5, [sp, #32]
 80010ca:	460c      	mov	r4, r1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d14e      	bne.n	800116e <__udivmoddi4+0xaa>
 80010d0:	4694      	mov	ip, r2
 80010d2:	458c      	cmp	ip, r1
 80010d4:	4686      	mov	lr, r0
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	d962      	bls.n	80011a2 <__udivmoddi4+0xde>
 80010dc:	b14a      	cbz	r2, 80010f2 <__udivmoddi4+0x2e>
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	4091      	lsls	r1, r2
 80010e4:	fa20 f303 	lsr.w	r3, r0, r3
 80010e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010ec:	4319      	orrs	r1, r3
 80010ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80010fa:	fb07 1114 	mls	r1, r7, r4, r1
 80010fe:	fa1f f68c 	uxth.w	r6, ip
 8001102:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001106:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800110a:	fb04 f106 	mul.w	r1, r4, r6
 800110e:	4299      	cmp	r1, r3
 8001110:	d90a      	bls.n	8001128 <__udivmoddi4+0x64>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f104 30ff 	add.w	r0, r4, #4294967295
 800111a:	f080 8110 	bcs.w	800133e <__udivmoddi4+0x27a>
 800111e:	4299      	cmp	r1, r3
 8001120:	f240 810d 	bls.w	800133e <__udivmoddi4+0x27a>
 8001124:	3c02      	subs	r4, #2
 8001126:	4463      	add	r3, ip
 8001128:	1a59      	subs	r1, r3, r1
 800112a:	fbb1 f0f7 	udiv	r0, r1, r7
 800112e:	fb07 1110 	mls	r1, r7, r0, r1
 8001132:	fb00 f606 	mul.w	r6, r0, r6
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113e:	429e      	cmp	r6, r3
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0303 	adds.w	r3, ip, r3
 8001146:	f100 31ff 	add.w	r1, r0, #4294967295
 800114a:	f080 80fa 	bcs.w	8001342 <__udivmoddi4+0x27e>
 800114e:	429e      	cmp	r6, r3
 8001150:	f240 80f7 	bls.w	8001342 <__udivmoddi4+0x27e>
 8001154:	4463      	add	r3, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	1b9b      	subs	r3, r3, r6
 800115c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001160:	b11d      	cbz	r5, 800116a <__udivmoddi4+0xa6>
 8001162:	40d3      	lsrs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e9c5 3200 	strd	r3, r2, [r5]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116e:	428b      	cmp	r3, r1
 8001170:	d905      	bls.n	800117e <__udivmoddi4+0xba>
 8001172:	b10d      	cbz	r5, 8001178 <__udivmoddi4+0xb4>
 8001174:	e9c5 0100 	strd	r0, r1, [r5]
 8001178:	2100      	movs	r1, #0
 800117a:	4608      	mov	r0, r1
 800117c:	e7f5      	b.n	800116a <__udivmoddi4+0xa6>
 800117e:	fab3 f183 	clz	r1, r3
 8001182:	2900      	cmp	r1, #0
 8001184:	d146      	bne.n	8001214 <__udivmoddi4+0x150>
 8001186:	42a3      	cmp	r3, r4
 8001188:	d302      	bcc.n	8001190 <__udivmoddi4+0xcc>
 800118a:	4290      	cmp	r0, r2
 800118c:	f0c0 80ee 	bcc.w	800136c <__udivmoddi4+0x2a8>
 8001190:	1a86      	subs	r6, r0, r2
 8001192:	eb64 0303 	sbc.w	r3, r4, r3
 8001196:	2001      	movs	r0, #1
 8001198:	2d00      	cmp	r5, #0
 800119a:	d0e6      	beq.n	800116a <__udivmoddi4+0xa6>
 800119c:	e9c5 6300 	strd	r6, r3, [r5]
 80011a0:	e7e3      	b.n	800116a <__udivmoddi4+0xa6>
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	f040 808f 	bne.w	80012c6 <__udivmoddi4+0x202>
 80011a8:	eba1 040c 	sub.w	r4, r1, ip
 80011ac:	2101      	movs	r1, #1
 80011ae:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b2:	fa1f f78c 	uxth.w	r7, ip
 80011b6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011ba:	fb08 4416 	mls	r4, r8, r6, r4
 80011be:	fb07 f006 	mul.w	r0, r7, r6
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x11c>
 80011ce:	eb1c 0303 	adds.w	r3, ip, r3
 80011d2:	f106 34ff 	add.w	r4, r6, #4294967295
 80011d6:	d202      	bcs.n	80011de <__udivmoddi4+0x11a>
 80011d8:	4298      	cmp	r0, r3
 80011da:	f200 80cb 	bhi.w	8001374 <__udivmoddi4+0x2b0>
 80011de:	4626      	mov	r6, r4
 80011e0:	1a1c      	subs	r4, r3, r0
 80011e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011e6:	fb08 4410 	mls	r4, r8, r0, r4
 80011ea:	fb00 f707 	mul.w	r7, r0, r7
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011f6:	429f      	cmp	r7, r3
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x148>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 34ff 	add.w	r4, r0, #4294967295
 8001202:	d202      	bcs.n	800120a <__udivmoddi4+0x146>
 8001204:	429f      	cmp	r7, r3
 8001206:	f200 80ae 	bhi.w	8001366 <__udivmoddi4+0x2a2>
 800120a:	4620      	mov	r0, r4
 800120c:	1bdb      	subs	r3, r3, r7
 800120e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001212:	e7a5      	b.n	8001160 <__udivmoddi4+0x9c>
 8001214:	f1c1 0720 	rsb	r7, r1, #32
 8001218:	408b      	lsls	r3, r1
 800121a:	fa22 fc07 	lsr.w	ip, r2, r7
 800121e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001222:	fa24 f607 	lsr.w	r6, r4, r7
 8001226:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800122a:	fbb6 f8f9 	udiv	r8, r6, r9
 800122e:	fa1f fe8c 	uxth.w	lr, ip
 8001232:	fb09 6618 	mls	r6, r9, r8, r6
 8001236:	fa20 f307 	lsr.w	r3, r0, r7
 800123a:	408c      	lsls	r4, r1
 800123c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001240:	fb08 f00e 	mul.w	r0, r8, lr
 8001244:	431c      	orrs	r4, r3
 8001246:	0c23      	lsrs	r3, r4, #16
 8001248:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800124c:	4298      	cmp	r0, r3
 800124e:	fa02 f201 	lsl.w	r2, r2, r1
 8001252:	d90a      	bls.n	800126a <__udivmoddi4+0x1a6>
 8001254:	eb1c 0303 	adds.w	r3, ip, r3
 8001258:	f108 36ff 	add.w	r6, r8, #4294967295
 800125c:	f080 8081 	bcs.w	8001362 <__udivmoddi4+0x29e>
 8001260:	4298      	cmp	r0, r3
 8001262:	d97e      	bls.n	8001362 <__udivmoddi4+0x29e>
 8001264:	f1a8 0802 	sub.w	r8, r8, #2
 8001268:	4463      	add	r3, ip
 800126a:	1a1e      	subs	r6, r3, r0
 800126c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001270:	fb09 6613 	mls	r6, r9, r3, r6
 8001274:	fb03 fe0e 	mul.w	lr, r3, lr
 8001278:	b2a4      	uxth	r4, r4
 800127a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800127e:	45a6      	cmp	lr, r4
 8001280:	d908      	bls.n	8001294 <__udivmoddi4+0x1d0>
 8001282:	eb1c 0404 	adds.w	r4, ip, r4
 8001286:	f103 30ff 	add.w	r0, r3, #4294967295
 800128a:	d266      	bcs.n	800135a <__udivmoddi4+0x296>
 800128c:	45a6      	cmp	lr, r4
 800128e:	d964      	bls.n	800135a <__udivmoddi4+0x296>
 8001290:	3b02      	subs	r3, #2
 8001292:	4464      	add	r4, ip
 8001294:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001298:	fba0 8302 	umull	r8, r3, r0, r2
 800129c:	eba4 040e 	sub.w	r4, r4, lr
 80012a0:	429c      	cmp	r4, r3
 80012a2:	46c6      	mov	lr, r8
 80012a4:	461e      	mov	r6, r3
 80012a6:	d350      	bcc.n	800134a <__udivmoddi4+0x286>
 80012a8:	d04d      	beq.n	8001346 <__udivmoddi4+0x282>
 80012aa:	b155      	cbz	r5, 80012c2 <__udivmoddi4+0x1fe>
 80012ac:	ebba 030e 	subs.w	r3, sl, lr
 80012b0:	eb64 0406 	sbc.w	r4, r4, r6
 80012b4:	fa04 f707 	lsl.w	r7, r4, r7
 80012b8:	40cb      	lsrs	r3, r1
 80012ba:	431f      	orrs	r7, r3
 80012bc:	40cc      	lsrs	r4, r1
 80012be:	e9c5 7400 	strd	r7, r4, [r5]
 80012c2:	2100      	movs	r1, #0
 80012c4:	e751      	b.n	800116a <__udivmoddi4+0xa6>
 80012c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ca:	f1c2 0320 	rsb	r3, r2, #32
 80012ce:	40d9      	lsrs	r1, r3
 80012d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012d4:	fa20 f303 	lsr.w	r3, r0, r3
 80012d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1110 	mls	r1, r8, r0, r1
 80012e4:	4094      	lsls	r4, r2
 80012e6:	431c      	orrs	r4, r3
 80012e8:	fa1f f78c 	uxth.w	r7, ip
 80012ec:	0c23      	lsrs	r3, r4, #16
 80012ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012f2:	fb00 f107 	mul.w	r1, r0, r7
 80012f6:	4299      	cmp	r1, r3
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x248>
 80012fa:	eb1c 0303 	adds.w	r3, ip, r3
 80012fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001302:	d22c      	bcs.n	800135e <__udivmoddi4+0x29a>
 8001304:	4299      	cmp	r1, r3
 8001306:	d92a      	bls.n	800135e <__udivmoddi4+0x29a>
 8001308:	3802      	subs	r0, #2
 800130a:	4463      	add	r3, ip
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001312:	fb08 3311 	mls	r3, r8, r1, r3
 8001316:	b2a4      	uxth	r4, r4
 8001318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800131c:	fb01 f307 	mul.w	r3, r1, r7
 8001320:	42a3      	cmp	r3, r4
 8001322:	d908      	bls.n	8001336 <__udivmoddi4+0x272>
 8001324:	eb1c 0404 	adds.w	r4, ip, r4
 8001328:	f101 36ff 	add.w	r6, r1, #4294967295
 800132c:	d213      	bcs.n	8001356 <__udivmoddi4+0x292>
 800132e:	42a3      	cmp	r3, r4
 8001330:	d911      	bls.n	8001356 <__udivmoddi4+0x292>
 8001332:	3902      	subs	r1, #2
 8001334:	4464      	add	r4, ip
 8001336:	1ae4      	subs	r4, r4, r3
 8001338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800133c:	e73b      	b.n	80011b6 <__udivmoddi4+0xf2>
 800133e:	4604      	mov	r4, r0
 8001340:	e6f2      	b.n	8001128 <__udivmoddi4+0x64>
 8001342:	4608      	mov	r0, r1
 8001344:	e708      	b.n	8001158 <__udivmoddi4+0x94>
 8001346:	45c2      	cmp	sl, r8
 8001348:	d2af      	bcs.n	80012aa <__udivmoddi4+0x1e6>
 800134a:	ebb8 0e02 	subs.w	lr, r8, r2
 800134e:	eb63 060c 	sbc.w	r6, r3, ip
 8001352:	3801      	subs	r0, #1
 8001354:	e7a9      	b.n	80012aa <__udivmoddi4+0x1e6>
 8001356:	4631      	mov	r1, r6
 8001358:	e7ed      	b.n	8001336 <__udivmoddi4+0x272>
 800135a:	4603      	mov	r3, r0
 800135c:	e79a      	b.n	8001294 <__udivmoddi4+0x1d0>
 800135e:	4630      	mov	r0, r6
 8001360:	e7d4      	b.n	800130c <__udivmoddi4+0x248>
 8001362:	46b0      	mov	r8, r6
 8001364:	e781      	b.n	800126a <__udivmoddi4+0x1a6>
 8001366:	4463      	add	r3, ip
 8001368:	3802      	subs	r0, #2
 800136a:	e74f      	b.n	800120c <__udivmoddi4+0x148>
 800136c:	4606      	mov	r6, r0
 800136e:	4623      	mov	r3, r4
 8001370:	4608      	mov	r0, r1
 8001372:	e711      	b.n	8001198 <__udivmoddi4+0xd4>
 8001374:	3e02      	subs	r6, #2
 8001376:	4463      	add	r3, ip
 8001378:	e732      	b.n	80011e0 <__udivmoddi4+0x11c>
 800137a:	bf00      	nop

0800137c <__aeabi_idiv0>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	b09c      	sub	sp, #112	@ 0x70
 8001386:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001388:	f001 fd30 	bl	8002dec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800138c:	f000 f89c 	bl	80014c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001390:	f000 f938 	bl	8001604 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001394:	f000 f8de 	bl	8001554 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001398:	f000 f90a 	bl	80015b0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	BME280_init(&bme280_hdl, I2C, &hi2c1);	// Initializing bme280 handler structure and selecting communication interface
 800139c:	4a43      	ldr	r2, [pc, #268]	@ (80014ac <main+0x12c>)
 800139e:	2100      	movs	r1, #0
 80013a0:	4843      	ldr	r0, [pc, #268]	@ (80014b0 <main+0x130>)
 80013a2:	f000 fc08 	bl	8001bb6 <BME280_init>

	BME280_measureConfig_t measure_cfg = {};	// Creating and filling measurement config structure
 80013a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013aa:	2220      	movs	r2, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 fce9 	bl	8007d86 <memset>
	measure_cfg.filter_coeff = FILTER_X8;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	measure_cfg.hum_oversamp = X1_OVERSAMP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	measure_cfg.press_oversamp = X4_OVERSAMP;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	measure_cfg.temp_oversamp = X1_OVERSAMP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

	BME280_normal_mode_enable(&bme280_hdl, &measure_cfg);	// Enabling normal mode (continuous measurements)
 80013cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4837      	ldr	r0, [pc, #220]	@ (80014b0 <main+0x130>)
 80013d4:	f000 fd96 	bl	8001f04 <BME280_normal_mode_enable>
	BME280_delay(&bme280_hdl, bme280_hdl.current_config->data_flow_info.IIR_response_time);		// Waiting for correct measurements to be established
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <main+0x130>)
 80013da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe00 	bl	8000fe4 <__aeabi_f2uiz>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4831      	ldr	r0, [pc, #196]	@ (80014b0 <main+0x130>)
 80013ea:	f000 fb38 	bl	8001a5e <BME280_delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		BME280_read_comp_parameters(&bme280_hdl, &measure_cfg);		// Reading out and compensating measurement data
 80013ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013f2:	4619      	mov	r1, r3
 80013f4:	482e      	ldr	r0, [pc, #184]	@ (80014b0 <main+0x130>)
 80013f6:	f000 fd21 	bl	8001e3c <BME280_read_comp_parameters>
		char output[60];	// Buffer for sending sensor data via UART
		int size;			// Output buffer size variable
		while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);	// Waiting for UART module to be free
 80013fa:	bf00      	nop
 80013fc:	482d      	ldr	r0, [pc, #180]	@ (80014b4 <main+0x134>)
 80013fe:	f005 fc3d 	bl	8006c7c <HAL_UART_GetState>
 8001402:	4603      	mov	r3, r0
 8001404:	2b20      	cmp	r3, #32
 8001406:	d1f9      	bne.n	80013fc <main+0x7c>

#if ENABLE_DOUBLE_PRECISION == 1	// Filling output buffer depending on the compensation mode setting
		size = sprintf(output, "pressure: %.2f, temperature: %.2f, humidity: %.2f\n", bme280_hdl.comp_parameters.pressure, \
						   bme280_hdl.comp_parameters.temperature, bme280_hdl.comp_parameters.humidity);
#else
		size = sprintf(output, "pressure: %.2f, temperature: %.2f, humidity: %.2f\n", (float)bme280_hdl.comp_parameters.pressure/256., \
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <main+0x130>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc41 	bl	8000c94 <__aeabi_ui2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f807 	bl	8000428 <__aeabi_f2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <main+0x138>)
 8001420:	f7ff f984 	bl	800072c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4690      	mov	r8, r2
 800142a:	4699      	mov	r9, r3
						   (float)bme280_hdl.comp_parameters.temperature/100., (float)bme280_hdl.comp_parameters.humidity/1024.);
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <main+0x130>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fc33 	bl	8000c9c <__aeabi_i2f>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fff5 	bl	8000428 <__aeabi_f2d>
		size = sprintf(output, "pressure: %.2f, temperature: %.2f, humidity: %.2f\n", (float)bme280_hdl.comp_parameters.pressure/256., \
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <main+0x13c>)
 8001444:	f7ff f972 	bl	800072c <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
						   (float)bme280_hdl.comp_parameters.temperature/100., (float)bme280_hdl.comp_parameters.humidity/1024.);
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <main+0x130>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc1d 	bl	8000c94 <__aeabi_ui2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffe3 	bl	8000428 <__aeabi_f2d>
		size = sprintf(output, "pressure: %.2f, temperature: %.2f, humidity: %.2f\n", (float)bme280_hdl.comp_parameters.pressure/256., \
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <main+0x140>)
 8001468:	f7ff f960 	bl	800072c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4638      	mov	r0, r7
 8001472:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001476:	e9cd 4500 	strd	r4, r5, [sp]
 800147a:	4642      	mov	r2, r8
 800147c:	464b      	mov	r3, r9
 800147e:	4911      	ldr	r1, [pc, #68]	@ (80014c4 <main+0x144>)
 8001480:	f006 fc1e 	bl	8007cc0 <siprintf>
 8001484:	65f8      	str	r0, [r7, #92]	@ 0x5c
#endif
		HAL_UART_Transmit_IT(&huart1, output, size);	// Sending output buffer data via UART
 8001486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001488:	b29a      	uxth	r2, r3
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <main+0x134>)
 8001490:	f005 f906 	bl	80066a0 <HAL_UART_Transmit_IT>

		BME280_delay(&bme280_hdl, bme280_hdl.current_config->data_flow_info.measure_time);	// Waiting for next measurement to be performed
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <main+0x130>)
 8001496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fda2 	bl	8000fe4 <__aeabi_f2uiz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <main+0x130>)
 80014a6:	f000 fada 	bl	8001a5e <BME280_delay>
	while (1) {
 80014aa:	e7a0      	b.n	80013ee <main+0x6e>
 80014ac:	200001f0 	.word	0x200001f0
 80014b0:	2000028c 	.word	0x2000028c
 80014b4:	20000244 	.word	0x20000244
 80014b8:	40700000 	.word	0x40700000
 80014bc:	40590000 	.word	0x40590000
 80014c0:	40900000 	.word	0x40900000
 80014c4:	08009dd8 	.word	0x08009dd8

080014c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	@ 0x40
 80014cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	2228      	movs	r2, #40	@ 0x28
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f006 fc55 	bl	8007d86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	2302      	movs	r3, #2
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001504:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001506:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f004 fc65 	bl	8005de0 <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x58>
		Error_Handler();
 800151c:	f000 f8a0 	bl	8001660 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001530:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fed2 	bl	80062e4 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x82>
		Error_Handler();
 8001546:	f000 f88b 	bl	8001660 <Error_Handler>
	}
}
 800154a:	bf00      	nop
 800154c:	3740      	adds	r7, #64	@ 0x40
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <MX_I2C1_Init+0x54>)
 800155c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001560:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x58>)
 8001562:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001576:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001592:	f002 f803 	bl	800359c <HAL_I2C_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800159c:	f000 f860 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001f0 	.word	0x200001f0
 80015a8:	40005400 	.word	0x40005400
 80015ac:	000186a0 	.word	0x000186a0

080015b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	2208      	movs	r2, #8
 80015d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f005 f80a 	bl	8006600 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80015f2:	f000 f835 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000244 	.word	0x20000244
 8001600:	40013800 	.word	0x40013800

08001604 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	4b14      	ldr	r3, [pc, #80]	@ (800165c <MX_GPIO_Init+0x58>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a13      	ldr	r2, [pc, #76]	@ (800165c <MX_GPIO_Init+0x58>)
 8001610:	f043 0320 	orr.w	r3, r3, #32
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_GPIO_Init+0x58>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_GPIO_Init+0x58>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <MX_GPIO_Init+0x58>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_GPIO_Init+0x58>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_GPIO_Init+0x58>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <MX_GPIO_Init+0x58>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6193      	str	r3, [r2, #24]
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <MX_GPIO_Init+0x58>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000

08001660 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <Error_Handler+0x8>

0800166c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_MspInit+0x60>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <HAL_MspInit+0x60>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000

080016d0 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
	if (hi2c->Instance == I2C1) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_I2C_MspInit+0x80>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d12b      	bne.n	8001748 <HAL_I2C_MspInit+0x78>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001708:	23c0      	movs	r3, #192	@ 0xc0
 800170a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480f      	ldr	r0, [pc, #60]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 800171c:	f001 fdba 	bl	8003294 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 8001726:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800172a:	61d3      	str	r3, [r2, #28]
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	201f      	movs	r0, #31
 800173e:	f001 fcb2 	bl	80030a6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001742:	201f      	movs	r0, #31
 8001744:	f001 fccb 	bl	80030de <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40005400 	.word	0x40005400
 8001754:	40021000 	.word	0x40021000
 8001758:	40010c00 	.word	0x40010c00

0800175c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <HAL_UART_MspInit+0x9c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d139      	bne.n	80017f0 <HAL_UART_MspInit+0x94>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 8001782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <HAL_UART_MspInit+0xa0>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	480f      	ldr	r0, [pc, #60]	@ (8001800 <HAL_UART_MspInit+0xa4>)
 80017c2:	f001 fd67 	bl	8003294 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ca:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4809      	ldr	r0, [pc, #36]	@ (8001800 <HAL_UART_MspInit+0xa4>)
 80017dc:	f001 fd5a 	bl	8003294 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2025      	movs	r0, #37	@ 0x25
 80017e6:	f001 fc5e 	bl	80030a6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ea:	2025      	movs	r0, #37	@ 0x25
 80017ec:	f001 fc77 	bl	80030de <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800

08001804 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001854:	f001 fb10 	bl	8002e78 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <I2C1_EV_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <I2C1_EV_IRQHandler+0x10>)
 8001862:	f002 fb65 	bl	8003f30 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200001f0 	.word	0x200001f0

08001870 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <USART1_IRQHandler+0x10>)
 8001876:	f004 ff49 	bl	800670c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000244 	.word	0x20000244

08001884 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <_kill>:

int _kill(int pid, int sig) {
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800189c:	f006 fad6 	bl	8007e4c <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2216      	movs	r2, #22
 80018a4:	601a      	str	r2, [r3, #0]
	return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_exit>:

void _exit(int status) {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ba:	f04f 31ff 	mov.w	r1, #4294967295
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffe7 	bl	8001892 <_kill>
	while (1) {
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <_exit+0x12>

080018c8 <_read>:
	}/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
		*ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
	}

	return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <_write+0x26>
		__io_putchar(*ptr++);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf1      	blt.n	8001914 <_write+0x12>
	}
	return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_close>:

int _close(int file) {
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001960:	605a      	str	r2, [r3, #4]
	return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file) {
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end;/* Symbol defined in the linker script */
	extern uint8_t _estack;/* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size;/* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
		errno = ENOMEM;
 80019cc:	f006 fa3e 	bl	8007e4c <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20005000 	.word	0x20005000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	200002d8 	.word	0x200002d8
 8001a04:	20000430 	.word	0x20000430

08001a08 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a14:	f7ff fff8 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a1a:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a30:	4c09      	ldr	r4, [pc, #36]	@ (8001a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f006 fa0b 	bl	8007e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff fc9d 	bl	8001380 <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a50:	0800a1b8 	.word	0x0800a1b8
  ldr r2, =_sbss
 8001a54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a58:	20000430 	.word	0x20000430

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>

08001a5e <BME280_delay>:
 * @brief This functions is used to perform a delay. You should rewrite it if you want to use other delay function.
 *
 * @param[in] bme_handler: Pointer to BME280 Handler structure
 * @param[in] delay: Time delay in ms
 */
__weak void BME280_delay(BME280_handler_t *bme_handler, uint32_t delay) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	HAL_Delay(delay);
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f001 fa21 	bl	8002eb0 <HAL_Delay>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <BME280_readout_data>:
 * @param[in] size: Number of data bytes needs to be read out
 * @param[in,out] read_buffer: Buffer into which read data must be written
 * @param[in] read_data_len: Size of read_buffer buffer in bytes (fool protection)
 * @return[in] Function result status
 */
__weak BME280_status_t BME280_readout_data(BME280_handler_t *bme_handler, uint8_t reg_addr, uint16_t size, uint8_t *read_buffer, uint16_t read_data_len) {
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b088      	sub	sp, #32
 8001a7a:	af04      	add	r7, sp, #16
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	72fb      	strb	r3, [r7, #11]
 8001a84:	4613      	mov	r3, r2
 8001a86:	813b      	strh	r3, [r7, #8]
	if(size == 0 || size > read_data_len || bme_handler == NULL || read_buffer == NULL)
 8001a88:	893b      	ldrh	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <BME280_readout_data+0x2c>
 8001a8e:	893a      	ldrh	r2, [r7, #8]
 8001a90:	8b3b      	ldrh	r3, [r7, #24]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d805      	bhi.n	8001aa2 <BME280_readout_data+0x2c>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <BME280_readout_data+0x2c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <BME280_readout_data+0x30>
		return BME280_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e017      	b.n	8001ad6 <BME280_readout_data+0x60>

	if(HAL_I2C_Mem_Read((I2C_HandleTypeDef *)bme_handler->interface_handler, bme_handler->device_addr << 1, (uint16_t)reg_addr, I2C_MEMADD_SIZE_8BIT, \
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	893b      	ldrh	r3, [r7, #8]
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f001 ffbf 	bl	8003a48 <HAL_I2C_Mem_Read>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d101      	bne.n	8001ad4 <BME280_readout_data+0x5e>
						read_buffer, size, HAL_MAX_DELAY) == HAL_BUSY)
		return BME280_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <BME280_readout_data+0x60>

	return BME280_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <BME280_write_data>:
 * @param[in] size: Number of data bytes needs to be sent to the sensor
 * @param[in] write_data: Buffer contains data needs to be sent to the sensor
 * @param[in] write_data_len: Size of write_data buffer in bytes (fool protection)
 * @return Function result status
 */
__weak BME280_status_t BME280_write_data(BME280_handler_t *bme_handler, uint8_t reg_addr, uint16_t size, uint8_t *write_data, uint16_t write_data_len) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08c      	sub	sp, #48	@ 0x30
 8001ae2:	af02      	add	r7, sp, #8
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	72fb      	strb	r3, [r7, #11]
 8001aec:	4613      	mov	r3, r2
 8001aee:	813b      	strh	r3, [r7, #8]
	if(size == 0 || size > write_data_len || bme_handler == NULL || write_data == NULL)		// Checking input data correctness
 8001af0:	893b      	ldrh	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <BME280_write_data+0x2c>
 8001af6:	893a      	ldrh	r2, [r7, #8]
 8001af8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d805      	bhi.n	8001b0a <BME280_write_data+0x2c>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <BME280_write_data+0x2c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <BME280_write_data+0x30>
		return BME280_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e04f      	b.n	8001bae <BME280_write_data+0xd0>

	uint8_t *write_buffer;
	size_t write_len = (size_t)size*2;
 8001b0e:	893b      	ldrh	r3, [r7, #8]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]

	write_buffer = malloc(write_len);	 	// Allocating and filling buffer "register addr, data, ..."
 8001b14:	69f8      	ldr	r0, [r7, #28]
 8001b16:	f005 faf7 	bl	8007108 <malloc>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
	if(write_buffer == NULL)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <BME280_write_data+0x4a>
		return BME280_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e042      	b.n	8001bae <BME280_write_data+0xd0>
	uint8_t temp_reg = reg_addr;
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	for(int i = 0; i < write_len; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	e01f      	b.n	8001b74 <BME280_write_data+0x96>
		if(i % 2)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <BME280_write_data+0x7a>
			write_buffer[i] = write_data[i/2];
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	0fda      	lsrs	r2, r3, #31
 8001b42:	4413      	add	r3, r2
 8001b44:	105b      	asrs	r3, r3, #1
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	441a      	add	r2, r3
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	440b      	add	r3, r1
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e00a      	b.n	8001b6e <BME280_write_data+0x90>
		else {
			write_buffer[i] = temp_reg;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b62:	701a      	strb	r2, [r3, #0]
			temp_reg++;
 8001b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	for(int i = 0; i < write_len; i++) {
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	3301      	adds	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8db      	bhi.n	8001b34 <BME280_write_data+0x56>
		}
	}

	HAL_StatusTypeDef result;			// Sending data result variable
	result = HAL_I2C_Master_Transmit((I2C_HandleTypeDef *)bme_handler->interface_handler, bme_handler->device_addr << 1, write_buffer, \
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	b299      	uxth	r1, r3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	9200      	str	r2, [sp, #0]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	f001 fe5a 	bl	800384c <HAL_I2C_Master_Transmit>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	75fb      	strb	r3, [r7, #23]
									write_len, HAL_MAX_DELAY);		// Sending filled buffer to the sensor
	free(write_buffer);			// Freeing buffer memory
 8001b9c:	69b8      	ldr	r0, [r7, #24]
 8001b9e:	f005 fabb 	bl	8007118 <free>

	if(result != HAL_OK)		// Check sending data result variable
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <BME280_write_data+0xce>
		return BME280_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <BME280_write_data+0xd0>

	return BME280_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <BME280_init>:
 * @param[in,out] bme_handler: Pointer to BME280 Handler structure
 * @param[in] interface_select: Choice between SPI and I2C
 * @param[in] interface_handler: Data or structure pointer that can be used in communication functions. (Optional)
 * @return Function result status
 */
BME280_status_t BME280_init(BME280_handler_t *bme_handler, BME280_interface_t interface_select, void *interface_handler) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b088      	sub	sp, #32
 8001bba:	af02      	add	r7, sp, #8
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	72fb      	strb	r3, [r7, #11]
	if(interface_select == I2C)
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <BME280_init+0x1a>
		bme_handler->device_addr = BME280_DEV_ADDR;			// Set I2C device address
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2276      	movs	r2, #118	@ 0x76
 8001bce:	801a      	strh	r2, [r3, #0]
	bme_handler->interface_select = interface_select;		// Set selected interface
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	7afa      	ldrb	r2, [r7, #11]
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	bme_handler->interface_handler = interface_handler;		// Set pointer to interface handler structure
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
	uint8_t chip_id;
	if(BME280_readout_data(bme_handler, BME280_REG_ID, 1, &chip_id, 1) != BME280_OK)	// Check chip id of the device
 8001bde:	f107 0317 	add.w	r3, r7, #23
 8001be2:	2201      	movs	r2, #1
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	21d0      	movs	r1, #208	@ 0xd0
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff ff43 	bl	8001a76 <BME280_readout_data>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <BME280_init+0x44>
		return BME280_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e015      	b.n	8001c26 <BME280_init+0x70>

	if(chip_id == BME280_CHIP_ID) {
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b60      	cmp	r3, #96	@ 0x60
 8001bfe:	d10f      	bne.n	8001c20 <BME280_init+0x6a>
		if(BME280_soft_reset(bme_handler) != BME280_OK)		// If chip id is correct reset sensor
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f814 	bl	8001c2e <BME280_soft_reset>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <BME280_init+0x5a>
			return BME280_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00a      	b.n	8001c26 <BME280_init+0x70>

		if(BME280_get_calibration_data(bme_handler) != BME280_OK)	// then get calibration data
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f84e 	bl	8001cb2 <BME280_get_calibration_data>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <BME280_init+0x6e>
			return BME280_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e002      	b.n	8001c26 <BME280_init+0x70>
	}
	else
		return BME280_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <BME280_init+0x70>


	return BME280_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <BME280_soft_reset>:
 * @brief Function is used to perform a soft reset.
 *
 * @param[in] bme_handler: Pointer to BME280 Handler structure
 * @return Function result status
 */
BME280_status_t BME280_soft_reset(BME280_handler_t *bme_handler) {
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af02      	add	r7, sp, #8
 8001c34:	6078      	str	r0, [r7, #4]
	uint8_t try_temp = BME280_TRY_ATTEMPTS_TO_CHECK_REG;	// Number of attempts to check sensor is reseted variable
 8001c36:	2305      	movs	r3, #5
 8001c38:	73fb      	strb	r3, [r7, #15]
	uint8_t write_reset = BME280_SOFT_RESET;				// Byte containing soft reset command
 8001c3a:	23b6      	movs	r3, #182	@ 0xb6
 8001c3c:	737b      	strb	r3, [r7, #13]
	BME280_status_t result;									// Function result variable

	if(BME280_write_data(bme_handler, BME280_REG_RESET, 1, &write_reset, 1) != BME280_OK)	// Send soft reset command to your sensor
 8001c3e:	f107 030d 	add.w	r3, r7, #13
 8001c42:	2201      	movs	r2, #1
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	21e0      	movs	r1, #224	@ 0xe0
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff47 	bl	8001ade <BME280_write_data>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <BME280_soft_reset+0x2c>
		return BME280_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e027      	b.n	8001caa <BME280_soft_reset+0x7c>

	uint8_t status_reg;		// Received status register data
	do {
		BME280_delay(bme_handler, BME280_WAIT_REG_UPDATE_DELAY);	// Wait for delay time between attempts to check sensor is reseted (ms)
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fefe 	bl	8001a5e <BME280_delay>
		result = BME280_readout_data(bme_handler, BME280_REG_STATUS, 1, &status_reg, 1);	// Read out status register data
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2201      	movs	r2, #1
 8001c68:	9200      	str	r2, [sp, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	21f3      	movs	r1, #243	@ 0xf3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff01 	bl	8001a76 <BME280_readout_data>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73bb      	strb	r3, [r7, #14]
		try_temp--;		// Decrement number of attempts variable
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
	}
	while((status_reg & BME280_STATUS_COPYING) && result == BME280_OK && try_temp != 0);	// Check status register data, status of performed function and
 8001c7e:	7b3b      	ldrb	r3, [r7, #12]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <BME280_soft_reset+0x66>
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <BME280_soft_reset+0x66>
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e2      	bne.n	8001c5a <BME280_soft_reset+0x2c>
																							// number of attempts
	if(result == BME280_ERROR || (status_reg & BME280_STATUS_COPYING))	// If status register data isn't correct or function returned error return error
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d004      	beq.n	8001ca4 <BME280_soft_reset+0x76>
 8001c9a:	7b3b      	ldrb	r3, [r7, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <BME280_soft_reset+0x7a>
		return BME280_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <BME280_soft_reset+0x7c>

	return BME280_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <BME280_get_calibration_data>:
 * @brief Function is used to receive calibration data from your sensor.
 *
 * @param[in,out] bme_handler: Pointer to BME280 Handler structure
 * @return Function result status
 */
BME280_status_t BME280_get_calibration_data(BME280_handler_t *bme_handler) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b08c      	sub	sp, #48	@ 0x30
 8001cb6:	af02      	add	r7, sp, #8
 8001cb8:	6078      	str	r0, [r7, #4]
	uint8_t read_buffer[26];	// Buffer into which calibration data is written

	// Read out the first part of calibration data from registers to the corresponding structure
	if(BME280_readout_data(bme_handler, BME280_REG_CALIB00, BME280_DATA_LEN_FROM_CALIB00, read_buffer, (uint16_t)sizeof(read_buffer)) == BME280_ERROR)
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	221a      	movs	r2, #26
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	221a      	movs	r2, #26
 8001cc4:	2188      	movs	r1, #136	@ 0x88
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fed5 	bl	8001a76 <BME280_readout_data>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <BME280_get_calibration_data+0x24>
		return BME280_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0ae      	b.n	8001e34 <BME280_get_calibration_data+0x182>
	else {
		bme_handler->calibration_data.dig_T1 = BME280_CONCAT_BYTES(read_buffer[1], read_buffer[0]);
 8001cd6:	7b7b      	ldrb	r3, [r7, #13]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	839a      	strh	r2, [r3, #28]
		bme_handler->calibration_data.dig_T2 = (int16_t)BME280_CONCAT_BYTES(read_buffer[3], read_buffer[2]);
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	83da      	strh	r2, [r3, #30]
		bme_handler->calibration_data.dig_T3 = (int16_t)BME280_CONCAT_BYTES(read_buffer[5], read_buffer[4]);
 8001cfc:	7c7b      	ldrb	r3, [r7, #17]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	7c3b      	ldrb	r3, [r7, #16]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	841a      	strh	r2, [r3, #32]
		bme_handler->calibration_data.dig_P1 = BME280_CONCAT_BYTES(read_buffer[7], read_buffer[6]);
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7cbb      	ldrb	r3, [r7, #18]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	845a      	strh	r2, [r3, #34]	@ 0x22
		bme_handler->calibration_data.dig_P2 = (int16_t)BME280_CONCAT_BYTES(read_buffer[9], read_buffer[8]);
 8001d22:	7d7b      	ldrb	r3, [r7, #21]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	7d3b      	ldrb	r3, [r7, #20]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	849a      	strh	r2, [r3, #36]	@ 0x24
		bme_handler->calibration_data.dig_P3 = (int16_t)BME280_CONCAT_BYTES(read_buffer[11], read_buffer[10]);
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	7dbb      	ldrb	r3, [r7, #22]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	84da      	strh	r2, [r3, #38]	@ 0x26
		bme_handler->calibration_data.dig_P4 = (int16_t)BME280_CONCAT_BYTES(read_buffer[13], read_buffer[12]);
 8001d46:	7e7b      	ldrb	r3, [r7, #25]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	7e3b      	ldrb	r3, [r7, #24]
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	851a      	strh	r2, [r3, #40]	@ 0x28
		bme_handler->calibration_data.dig_P5 = (int16_t)BME280_CONCAT_BYTES(read_buffer[15], read_buffer[14]);
 8001d58:	7efb      	ldrb	r3, [r7, #27]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	7ebb      	ldrb	r3, [r7, #26]
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
		bme_handler->calibration_data.dig_P6 = (int16_t)BME280_CONCAT_BYTES(read_buffer[17], read_buffer[16]);
 8001d6a:	7f7b      	ldrb	r3, [r7, #29]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	7f3b      	ldrb	r3, [r7, #28]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
		bme_handler->calibration_data.dig_P7 = (int16_t)BME280_CONCAT_BYTES(read_buffer[19], read_buffer[18]);
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	7fbb      	ldrb	r3, [r7, #30]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
		bme_handler->calibration_data.dig_P8 = (int16_t)BME280_CONCAT_BYTES(read_buffer[21], read_buffer[20]);
 8001d8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	861a      	strh	r2, [r3, #48]	@ 0x30
		bme_handler->calibration_data.dig_P9 = (int16_t)BME280_CONCAT_BYTES(read_buffer[23], read_buffer[22]);
 8001da4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	865a      	strh	r2, [r3, #50]	@ 0x32
		bme_handler->calibration_data.dig_H1 = read_buffer[25];
 8001dba:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	// Read out the second part of calibration data from registers to the corresponding structure
	if(BME280_readout_data(bme_handler, BME280_REG_CALIB26, BME280_DATA_LEN_FROM_CALIB26, read_buffer, (uint16_t)sizeof(read_buffer)) == BME280_ERROR)
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	221a      	movs	r2, #26
 8001dca:	9200      	str	r2, [sp, #0]
 8001dcc:	2207      	movs	r2, #7
 8001dce:	21e1      	movs	r1, #225	@ 0xe1
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fe50 	bl	8001a76 <BME280_readout_data>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <BME280_get_calibration_data+0x12e>
		return BME280_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e029      	b.n	8001e34 <BME280_get_calibration_data+0x182>
	else {
		bme_handler->calibration_data.dig_H2 = (int16_t)BME280_CONCAT_BYTES(read_buffer[1], read_buffer[0]);;
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	7b3b      	ldrb	r3, [r7, #12]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	86da      	strh	r2, [r3, #54]	@ 0x36
		bme_handler->calibration_data.dig_H3 = (uint8_t)read_buffer[2];
 8001df2:	7bba      	ldrb	r2, [r7, #14]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		bme_handler->calibration_data.dig_H4 = (int16_t)((uint16_t)read_buffer[3] << 4 | ((uint16_t)read_buffer[4] & 0x0F));
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	7c3b      	ldrb	r3, [r7, #16]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	875a      	strh	r2, [r3, #58]	@ 0x3a
		bme_handler->calibration_data.dig_H5 = (int16_t)((uint16_t)read_buffer[4] >> 4 | (uint16_t)read_buffer[5] << 4);
 8001e12:	7c3b      	ldrb	r3, [r7, #16]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	7c7b      	ldrb	r3, [r7, #17]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	879a      	strh	r2, [r3, #60]	@ 0x3c
		bme_handler->calibration_data.dig_H6 = (int8_t)read_buffer[6];
 8001e28:	7cbb      	ldrb	r3, [r7, #18]
 8001e2a:	b25a      	sxtb	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

	return BME280_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3728      	adds	r7, #40	@ 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <BME280_read_comp_parameters>:
 *
 * @param[in,out] bme_handler: Pointer to BME280 Handler structure
 * @param[in] measure_struct: Pointer to measurement config structure
 * @return Function result status
 */
BME280_status_t BME280_read_comp_parameters(BME280_handler_t *bme_handler, BME280_measureConfig_t *measure_struct) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	uint8_t read_buffer[8];		// Buffer into which raw measurement data is written
	// Read out measurement raw output data to the buffer
	if(BME280_readout_data(bme_handler, BME280_REG_PRESS_MSB, BME280_MEASURMENTS_DATA_LEN, read_buffer, (uint16_t)sizeof(read_buffer)) != BME280_OK)
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	21f7      	movs	r1, #247	@ 0xf7
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fe0f 	bl	8001a76 <BME280_readout_data>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <BME280_read_comp_parameters+0x26>
		return BME280_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e04c      	b.n	8001efc <BME280_read_comp_parameters+0xc0>
	if(measure_struct->hum_oversamp != MEAS_SKIP) {
		bme_handler->uncomp_parameters.uncomp_humidity = (read_buffer[6] << 8) | read_buffer[7];
		bme_handler->comp_parameters.humidity = BME280_compensate_hum_double(&bme_handler->calibration_data, bme_handler->uncomp_parameters.uncomp_humidity);
	}
#else	// use int calculation for compensation
	if(measure_struct->press_oversamp != MEAS_SKIP) {
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <BME280_read_comp_parameters+0x5c>
		bme_handler->uncomp_parameters.uncomp_pressure = (read_buffer[0] << 12) | (read_buffer[1] << 4) | (read_buffer[2] >> 4);
 8001e6a:	7a3b      	ldrb	r3, [r7, #8]
 8001e6c:	031a      	lsls	r2, r3, #12
 8001e6e:	7a7b      	ldrb	r3, [r7, #9]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4313      	orrs	r3, r2
 8001e74:	7aba      	ldrb	r2, [r7, #10]
 8001e76:	0912      	lsrs	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
	#if PRESSURE_32BIT_CALC == 0
		bme_handler->comp_parameters.pressure = BME280_compensate_press_int64(&bme_handler->calibration_data, bme_handler->uncomp_parameters.uncomp_pressure);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 021c 	add.w	r2, r3, #28
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f000 f8ed 	bl	800206c <BME280_compensate_press_int64>
 8001e92:	4602      	mov	r2, r0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	60da      	str	r2, [r3, #12]
	#else
		bme_handler->comp_parameters.pressure = BME280_compensate_press_int32(&bme_handler->calibration_data, bme_handler->uncomp_parameters.uncomp_pressure);
	#endif /* End of #if PRESSURE_32BIT_CALC == 1*/
	}
	if(measure_struct->temp_oversamp != MEAS_SKIP) {
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d016      	beq.n	8001ece <BME280_read_comp_parameters+0x92>
		bme_handler->uncomp_parameters.uncomp_temperature = (read_buffer[3] << 12) | (read_buffer[4] << 4) | (read_buffer[5] >> 4);
 8001ea0:	7afb      	ldrb	r3, [r7, #11]
 8001ea2:	031a      	lsls	r2, r3, #12
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	7b7a      	ldrb	r2, [r7, #13]
 8001eac:	0912      	lsrs	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	615a      	str	r2, [r3, #20]
		bme_handler->comp_parameters.temperature = BME280_compensate_temp_int32(&bme_handler->calibration_data, \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f103 021c 	add.w	r2, r3, #28
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 f882 	bl	8001fcc <BME280_compensate_temp_int32>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
																				bme_handler->uncomp_parameters.uncomp_temperature);
	}
	if(measure_struct->hum_oversamp != MEAS_SKIP) {
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	789b      	ldrb	r3, [r3, #2]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d011      	beq.n	8001efa <BME280_read_comp_parameters+0xbe>
		bme_handler->uncomp_parameters.uncomp_humidity = (read_buffer[6] << 8) | read_buffer[7];
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]
		bme_handler->comp_parameters.humidity = BME280_compensate_hum_int32(&bme_handler->calibration_data, bme_handler->uncomp_parameters.uncomp_humidity);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f103 021c 	add.w	r2, r3, #28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 fb9e 	bl	8002630 <BME280_compensate_hum_int32>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	605a      	str	r2, [r3, #4]
	}
#endif /* End of #if ENABLE_DOUBLE_PRECISION == 1*/

	return BME280_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <BME280_normal_mode_enable>:
 *
 * @param[in,out] bme_handler: Pointer to BME280 Handler structure
 * @param[in,out] measure_struct: Pointer to measurement config structure
 * @return Function result status
 */
BME280_status_t BME280_normal_mode_enable(BME280_handler_t *bme_handler, BME280_measureConfig_t *measure_struct) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	if(measure_struct == NULL || bme_handler == NULL)	// Check correctness of input data
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <BME280_normal_mode_enable+0x16>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <BME280_normal_mode_enable+0x1a>
		return BME280_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e051      	b.n	8001fc2 <BME280_normal_mode_enable+0xbe>

	measure_struct->mode = NORMAL_MODE;				// Set normal mode
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2203      	movs	r2, #3
 8001f22:	715a      	strb	r2, [r3, #5]
	bme_handler->current_config = measure_struct;	// Set received structure as current measurement config
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	649a      	str	r2, [r3, #72]	@ 0x48

	uint8_t write_data = (SPI_3WIRE) | measure_struct->filter_coeff << 2 | measure_struct->standby_time << 5;	// Send filter coefficient, standby time
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	78db      	ldrb	r3, [r3, #3]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	b25a      	sxtb	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	015b      	lsls	r3, r3, #5
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	73fb      	strb	r3, [r7, #15]
	if(BME280_write_data(bme_handler, BME280_REG_CONFIG, 1, &write_data, 1) != BME280_OK)						// and spi mode to your sensor register
 8001f42:	f107 030f 	add.w	r3, r7, #15
 8001f46:	2201      	movs	r2, #1
 8001f48:	9200      	str	r2, [sp, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	21f5      	movs	r1, #245	@ 0xf5
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fdc5 	bl	8001ade <BME280_write_data>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <BME280_normal_mode_enable+0x5a>
		return BME280_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e031      	b.n	8001fc2 <BME280_normal_mode_enable+0xbe>

	write_data = measure_struct->hum_oversamp;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	73fb      	strb	r3, [r7, #15]
	if(BME280_write_data(bme_handler, BME280_REG_CTRL_HUM, 1, &write_data, 1) != BME280_OK)		// Send humidity oversampling to your sensor
 8001f64:	f107 030f 	add.w	r3, r7, #15
 8001f68:	2201      	movs	r2, #1
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	21f2      	movs	r1, #242	@ 0xf2
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fdb4 	bl	8001ade <BME280_write_data>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <BME280_normal_mode_enable+0x7c>
		return BME280_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e020      	b.n	8001fc2 <BME280_normal_mode_enable+0xbe>

	write_data = BME280_NORMAL_MODE | measure_struct->press_oversamp << 2 | measure_struct->temp_oversamp << 5;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	f043 0303 	orr.w	r3, r3, #3
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	73fb      	strb	r3, [r7, #15]
	if(BME280_write_data(bme_handler, BME280_REG_CTRL_MEAS, 1, &write_data, 1) != BME280_OK)	// Send pressure and temperature oversampling to sensor
 8001f9e:	f107 030f 	add.w	r3, r7, #15
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	21f4      	movs	r1, #244	@ 0xf4
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fd97 	bl	8001ade <BME280_write_data>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <BME280_normal_mode_enable+0xb6>
		return BME280_ERROR;																	// and set normal mode
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e003      	b.n	8001fc2 <BME280_normal_mode_enable+0xbe>

	BME280_update_data_flow_info(measure_struct);	// Calculate data flow info and current consumption if it's necessary
 8001fba:	6838      	ldr	r0, [r7, #0]
 8001fbc:	f000 fb98 	bl	80026f0 <BME280_update_data_flow_info>

	return BME280_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <BME280_compensate_temp_int32>:
 *
 * @param[in] calib_data: Pointer to calibration data structure
 * @param[in] uncomp_temp: 20 bit positive temperature raw data
 * @return Compensated int32 temperature value. Needs to be divided by 100 to get result in degrees.
 */
int32_t BME280_compensate_temp_int32(BME280_calibData_t *calib_data, int32_t uncomp_temp) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, temp;
	var1 = ((((uncomp_temp>>3) - ((int32_t)calib_data->dig_T1<<1))) * ((int32_t)calib_data->dig_T2)) >> 11;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	10da      	asrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	12db      	asrs	r3, r3, #11
 8001fee:	61bb      	str	r3, [r7, #24]
	var2 = (((((uncomp_temp>>4) - ((int32_t)calib_data->dig_T1)) * (uncomp_temp>>4) - ((int32_t)calib_data->dig_T1))) >> 12) * \
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	111b      	asrs	r3, r3, #4
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	1112      	asrs	r2, r2, #4
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	8812      	ldrh	r2, [r2, #0]
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	131b      	asrs	r3, r3, #12
		   ((int32_t)calib_data->dig_T3) >> 14;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	var2 = (((((uncomp_temp>>4) - ((int32_t)calib_data->dig_T1)) * (uncomp_temp>>4) - ((int32_t)calib_data->dig_T1))) >> 12) * \
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	139b      	asrs	r3, r3, #14
 8002016:	617b      	str	r3, [r7, #20]
	t_fine = var1 + var2;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4413      	add	r3, r2
 800201e:	4a11      	ldr	r2, [pc, #68]	@ (8002064 <BME280_compensate_temp_int32+0x98>)
 8002020:	6013      	str	r3, [r2, #0]
	temp = (t_fine * 5 + 128) >> 8;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <BME280_compensate_temp_int32+0x98>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3380      	adds	r3, #128	@ 0x80
 800202e:	121b      	asrs	r3, r3, #8
 8002030:	61fb      	str	r3, [r7, #28]

	int32_t temperature_min = BME280_TEMPERATURE_MIN * 100;
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <BME280_compensate_temp_int32+0x9c>)
 8002034:	613b      	str	r3, [r7, #16]
	int32_t temperature_max = BME280_TEMPERATURE_MAX * 100;
 8002036:	f242 1334 	movw	r3, #8500	@ 0x2134
 800203a:	60fb      	str	r3, [r7, #12]
	if(temp < (temperature_min))
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	da02      	bge.n	800204a <BME280_compensate_temp_int32+0x7e>
		temp = temperature_min;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	e005      	b.n	8002056 <BME280_compensate_temp_int32+0x8a>
	else if(temp > temperature_max)
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	429a      	cmp	r2, r3
 8002050:	dd01      	ble.n	8002056 <BME280_compensate_temp_int32+0x8a>
		temp = temperature_max;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	61fb      	str	r3, [r7, #28]

	return temp;
 8002056:	69fb      	ldr	r3, [r7, #28]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3724      	adds	r7, #36	@ 0x24
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200002dc 	.word	0x200002dc
 8002068:	fffff060 	.word	0xfffff060

0800206c <BME280_compensate_press_int64>:
 *
 * @param[in] calib_data: Pointer to calibration data structure
 * @param[in] uncomp_press: 20 bit positive pressure raw data
 * @return Compensated uint32 pressure value. Needs to be divided by 256 to get result in Pa.
 */
uint32_t BME280_compensate_press_int64(BME280_calibData_t *calib_data, int32_t uncomp_press) {
 800206c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002070:	b0ce      	sub	sp, #312	@ 0x138
 8002072:	af00      	add	r7, sp, #0
 8002074:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8002078:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	int64_t var1, var2, press;
	var1 = ((int64_t)t_fine) - 128000;
 800207c:	4bb1      	ldr	r3, [pc, #708]	@ (8002344 <BME280_compensate_press_int64+0x2d8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	17da      	asrs	r2, r3, #31
 8002082:	461c      	mov	r4, r3
 8002084:	4615      	mov	r5, r2
 8002086:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800208a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800208e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8002092:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800209a:	fb03 f102 	mul.w	r1, r3, r2
 800209e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80020a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	18ca      	adds	r2, r1, r3
 80020ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020b0:	fba3 8903 	umull	r8, r9, r3, r3
 80020b4:	eb02 0309 	add.w	r3, r2, r9
 80020b8:	4699      	mov	r9, r3
 80020ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	17da      	asrs	r2, r3, #31
 80020c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020ca:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80020d2:	4603      	mov	r3, r0
 80020d4:	fb03 f209 	mul.w	r2, r3, r9
 80020d8:	460b      	mov	r3, r1
 80020da:	fb08 f303 	mul.w	r3, r8, r3
 80020de:	4413      	add	r3, r2
 80020e0:	4602      	mov	r2, r0
 80020e2:	fba8 2102 	umull	r2, r1, r8, r2
 80020e6:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 80020ea:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80020ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80020f2:	4413      	add	r3, r2
 80020f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020f8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80020fc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8002100:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5)<<17);
 8002104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002108:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800210c:	b21b      	sxth	r3, r3
 800210e:	17da      	asrs	r2, r3, #31
 8002110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002114:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002118:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800211c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8002120:	462a      	mov	r2, r5
 8002122:	fb02 f203 	mul.w	r2, r2, r3
 8002126:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800212a:	4621      	mov	r1, r4
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	441a      	add	r2, r3
 8002132:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002136:	4621      	mov	r1, r4
 8002138:	fba3 3101 	umull	r3, r1, r3, r1
 800213c:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8002140:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800215a:	462b      	mov	r3, r5
 800215c:	0459      	lsls	r1, r3, #17
 800215e:	4622      	mov	r2, r4
 8002160:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8002164:	4623      	mov	r3, r4
 8002166:	0458      	lsls	r0, r3, #17
 8002168:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800216c:	1814      	adds	r4, r2, r0
 800216e:	643c      	str	r4, [r7, #64]	@ 0x40
 8002170:	414b      	adcs	r3, r1
 8002172:	647b      	str	r3, [r7, #68]	@ 0x44
 8002174:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002178:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t)calib_data->dig_P4)<<35);
 800217c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002180:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002184:	b21b      	sxth	r3, r3
 8002186:	17da      	asrs	r2, r3, #31
 8002188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800218c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002190:	f04f 0000 	mov.w	r0, #0
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800219c:	00d9      	lsls	r1, r3, #3
 800219e:	2000      	movs	r0, #0
 80021a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80021a4:	1814      	adds	r4, r2, r0
 80021a6:	63bc      	str	r4, [r7, #56]	@ 0x38
 80021a8:	414b      	adcs	r3, r1
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ac:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80021b0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3)>>8) + ((var1 * (int64_t)calib_data->dig_P2)<<12);
 80021b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80021b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021bc:	fb03 f102 	mul.w	r1, r3, r2
 80021c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80021c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	18ca      	adds	r2, r1, r3
 80021ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021d2:	fba3 3103 	umull	r3, r1, r3, r3
 80021d6:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 80021da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80021de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021e2:	18d3      	adds	r3, r2, r3
 80021e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80021e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	17da      	asrs	r2, r3, #31
 80021f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021f8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021fc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8002200:	4622      	mov	r2, r4
 8002202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002206:	4641      	mov	r1, r8
 8002208:	fb01 f202 	mul.w	r2, r1, r2
 800220c:	464d      	mov	r5, r9
 800220e:	4618      	mov	r0, r3
 8002210:	4621      	mov	r1, r4
 8002212:	4603      	mov	r3, r0
 8002214:	fb03 f305 	mul.w	r3, r3, r5
 8002218:	4413      	add	r3, r2
 800221a:	4602      	mov	r2, r0
 800221c:	4641      	mov	r1, r8
 800221e:	fba2 2101 	umull	r2, r1, r2, r1
 8002222:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8002226:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800222a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800222e:	4413      	add	r3, r2
 8002230:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002240:	4623      	mov	r3, r4
 8002242:	0a18      	lsrs	r0, r3, #8
 8002244:	462a      	mov	r2, r5
 8002246:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800224a:	462b      	mov	r3, r5
 800224c:	1219      	asrs	r1, r3, #8
 800224e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002256:	b21b      	sxth	r3, r3
 8002258:	17da      	asrs	r2, r3, #31
 800225a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800225e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002266:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800226a:	464a      	mov	r2, r9
 800226c:	fb02 f203 	mul.w	r2, r2, r3
 8002270:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002274:	4644      	mov	r4, r8
 8002276:	fb04 f303 	mul.w	r3, r4, r3
 800227a:	441a      	add	r2, r3
 800227c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002280:	4644      	mov	r4, r8
 8002282:	fba3 3404 	umull	r3, r4, r3, r4
 8002286:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 800228a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800228e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002292:	18d3      	adds	r3, r2, r3
 8002294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80022a4:	464c      	mov	r4, r9
 80022a6:	0323      	lsls	r3, r4, #12
 80022a8:	46c4      	mov	ip, r8
 80022aa:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80022ae:	4644      	mov	r4, r8
 80022b0:	0322      	lsls	r2, r4, #12
 80022b2:	1884      	adds	r4, r0, r2
 80022b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80022b6:	eb41 0303 	adc.w	r3, r1, r3
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80022bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80022c0:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((((int64_t)1)<<47)+var1)) * ((int64_t)calib_data->dig_P1)>>33;
 80022c4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80022c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80022cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80022d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80022d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80022d8:	88db      	ldrh	r3, [r3, #6]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022e2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022e6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80022ea:	4622      	mov	r2, r4
 80022ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022f0:	4641      	mov	r1, r8
 80022f2:	fb01 f202 	mul.w	r2, r1, r2
 80022f6:	464d      	mov	r5, r9
 80022f8:	4618      	mov	r0, r3
 80022fa:	4621      	mov	r1, r4
 80022fc:	4603      	mov	r3, r0
 80022fe:	fb03 f305 	mul.w	r3, r3, r5
 8002302:	4413      	add	r3, r2
 8002304:	4602      	mov	r2, r0
 8002306:	4641      	mov	r1, r8
 8002308:	fba2 2101 	umull	r2, r1, r2, r1
 800230c:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8002310:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002314:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002318:	4413      	add	r3, r2
 800231a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800232a:	4629      	mov	r1, r5
 800232c:	104a      	asrs	r2, r1, #1
 800232e:	4629      	mov	r1, r5
 8002330:	17cb      	asrs	r3, r1, #31
 8002332:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	if(var1 == 0)
 8002336:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800233a:	4313      	orrs	r3, r2
 800233c:	d104      	bne.n	8002348 <BME280_compensate_press_int64+0x2dc>
		return 0;
 800233e:	2300      	movs	r3, #0
 8002340:	e16c      	b.n	800261c <BME280_compensate_press_int64+0x5b0>
 8002342:	bf00      	nop
 8002344:	200002dc 	.word	0x200002dc
	press = 1048576 - uncomp_press;
 8002348:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800234c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8002350:	17da      	asrs	r2, r3, #31
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002356:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800235a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	press = (((press<<31) - var2) * 3125) / var1;
 800235e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002362:	105b      	asrs	r3, r3, #1
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002368:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800236c:	07db      	lsls	r3, r3, #31
 800236e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002372:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800237a:	4604      	mov	r4, r0
 800237c:	1aa4      	subs	r4, r4, r2
 800237e:	67bc      	str	r4, [r7, #120]	@ 0x78
 8002380:	eb61 0303 	sbc.w	r3, r1, r3
 8002384:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002386:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800238a:	4622      	mov	r2, r4
 800238c:	462b      	mov	r3, r5
 800238e:	1891      	adds	r1, r2, r2
 8002390:	6239      	str	r1, [r7, #32]
 8002392:	415b      	adcs	r3, r3
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
 8002396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800239a:	4621      	mov	r1, r4
 800239c:	1851      	adds	r1, r2, r1
 800239e:	61b9      	str	r1, [r7, #24]
 80023a0:	4629      	mov	r1, r5
 80023a2:	414b      	adcs	r3, r1
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023b2:	4649      	mov	r1, r9
 80023b4:	018b      	lsls	r3, r1, #6
 80023b6:	4641      	mov	r1, r8
 80023b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023bc:	4641      	mov	r1, r8
 80023be:	018a      	lsls	r2, r1, #6
 80023c0:	4641      	mov	r1, r8
 80023c2:	1889      	adds	r1, r1, r2
 80023c4:	6139      	str	r1, [r7, #16]
 80023c6:	4649      	mov	r1, r9
 80023c8:	eb43 0101 	adc.w	r1, r3, r1
 80023cc:	6179      	str	r1, [r7, #20]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023da:	4649      	mov	r1, r9
 80023dc:	008b      	lsls	r3, r1, #2
 80023de:	46c4      	mov	ip, r8
 80023e0:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80023e4:	4641      	mov	r1, r8
 80023e6:	008a      	lsls	r2, r1, #2
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	4622      	mov	r2, r4
 80023f0:	189b      	adds	r3, r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	460b      	mov	r3, r1
 80023f6:	462a      	mov	r2, r5
 80023f8:	eb42 0303 	adc.w	r3, r2, r3
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800240a:	4649      	mov	r1, r9
 800240c:	008b      	lsls	r3, r1, #2
 800240e:	46c4      	mov	ip, r8
 8002410:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002414:	4641      	mov	r1, r8
 8002416:	008a      	lsls	r2, r1, #2
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	4603      	mov	r3, r0
 800241e:	4622      	mov	r2, r4
 8002420:	189b      	adds	r3, r3, r2
 8002422:	673b      	str	r3, [r7, #112]	@ 0x70
 8002424:	462b      	mov	r3, r5
 8002426:	460a      	mov	r2, r1
 8002428:	eb42 0303 	adc.w	r3, r2, r3
 800242c:	677b      	str	r3, [r7, #116]	@ 0x74
 800242e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002432:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002436:	f7fe fdf5 	bl	8001024 <__aeabi_ldivmod>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	var1 = ((int64_t)calib_data->dig_P9) * (press>>13) * (press>>13) >> 25;
 8002442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002446:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800244a:	b21b      	sxth	r3, r3
 800244c:	17da      	asrs	r2, r3, #31
 800244e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002450:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002452:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	0b50      	lsrs	r0, r2, #13
 8002460:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002464:	1359      	asrs	r1, r3, #13
 8002466:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800246a:	462b      	mov	r3, r5
 800246c:	fb00 f203 	mul.w	r2, r0, r3
 8002470:	4623      	mov	r3, r4
 8002472:	fb03 f301 	mul.w	r3, r3, r1
 8002476:	4413      	add	r3, r2
 8002478:	4622      	mov	r2, r4
 800247a:	fba2 2100 	umull	r2, r1, r2, r0
 800247e:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8002482:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8002486:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800248a:	4413      	add	r3, r2
 800248c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002490:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	0b50      	lsrs	r0, r2, #13
 800249e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80024a2:	1359      	asrs	r1, r3, #13
 80024a4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80024a8:	462b      	mov	r3, r5
 80024aa:	fb00 f203 	mul.w	r2, r0, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	fb03 f301 	mul.w	r3, r3, r1
 80024b4:	4413      	add	r3, r2
 80024b6:	4622      	mov	r2, r4
 80024b8:	fba2 2100 	umull	r2, r1, r2, r0
 80024bc:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 80024c0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80024c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80024c8:	4413      	add	r3, r2
 80024ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80024da:	4621      	mov	r1, r4
 80024dc:	0e4a      	lsrs	r2, r1, #25
 80024de:	4620      	mov	r0, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	460c      	mov	r4, r1
 80024e4:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80024e8:	164b      	asrs	r3, r1, #25
 80024ea:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = (((int64_t)calib_data->dig_P8) * press) >> 19;
 80024ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	17da      	asrs	r2, r3, #31
 80024fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80024fc:	667a      	str	r2, [r7, #100]	@ 0x64
 80024fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002502:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002506:	462a      	mov	r2, r5
 8002508:	fb02 f203 	mul.w	r2, r2, r3
 800250c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002510:	4621      	mov	r1, r4
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800251c:	4621      	mov	r1, r4
 800251e:	fba2 2101 	umull	r2, r1, r2, r1
 8002522:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8002526:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800252a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800252e:	4413      	add	r3, r2
 8002530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002540:	4621      	mov	r1, r4
 8002542:	0cca      	lsrs	r2, r1, #19
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	460c      	mov	r4, r1
 800254a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800254e:	14cb      	asrs	r3, r1, #19
 8002550:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	press = ((press + var1 + var2) >> 8) + (((int64_t)calib_data->dig_P7) << 4);
 8002554:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002558:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800255c:	1884      	adds	r4, r0, r2
 800255e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002560:	eb41 0303 	adc.w	r3, r1, r3
 8002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002566:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800256a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800256e:	4621      	mov	r1, r4
 8002570:	1889      	adds	r1, r1, r2
 8002572:	6539      	str	r1, [r7, #80]	@ 0x50
 8002574:	4629      	mov	r1, r5
 8002576:	eb43 0101 	adc.w	r1, r3, r1
 800257a:	6579      	str	r1, [r7, #84]	@ 0x54
 800257c:	f04f 0000 	mov.w	r0, #0
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002588:	4623      	mov	r3, r4
 800258a:	0a18      	lsrs	r0, r3, #8
 800258c:	462a      	mov	r2, r5
 800258e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002592:	462b      	mov	r3, r5
 8002594:	1219      	asrs	r1, r3, #8
 8002596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800259a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	17da      	asrs	r2, r3, #31
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80025b2:	464c      	mov	r4, r9
 80025b4:	0123      	lsls	r3, r4, #4
 80025b6:	46c4      	mov	ip, r8
 80025b8:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80025bc:	4644      	mov	r4, r8
 80025be:	0122      	lsls	r2, r4, #4
 80025c0:	1884      	adds	r4, r0, r2
 80025c2:	603c      	str	r4, [r7, #0]
 80025c4:	eb41 0303 	adc.w	r3, r1, r3
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80025ce:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130

	int64_t pressure_max = BME280_PRESSURE_MAX * 256;
 80025d2:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <BME280_compensate_press_int64+0x5bc>)
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t pressure_min = BME280_PRESSURE_MIN * 256;
 80025dc:	4a13      	ldr	r2, [pc, #76]	@ (800262c <BME280_compensate_press_int64+0x5c0>)
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	if(press > pressure_max)
 80025e6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80025ea:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80025ee:	4290      	cmp	r0, r2
 80025f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80025f4:	da04      	bge.n	8002600 <BME280_compensate_press_int64+0x594>
		press = pressure_max;
 80025f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80025fa:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
 80025fe:	e00b      	b.n	8002618 <BME280_compensate_press_int64+0x5ac>
	else if(press < pressure_min)
 8002600:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002604:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002608:	4290      	cmp	r0, r2
 800260a:	eb71 0303 	sbcs.w	r3, r1, r3
 800260e:	da03      	bge.n	8002618 <BME280_compensate_press_int64+0x5ac>
		press = pressure_min;
 8002610:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002614:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	return (uint32_t)press;
 8002618:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
}
 800261c:	4618      	mov	r0, r3
 800261e:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8002622:	46bd      	mov	sp, r7
 8002624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002628:	01adb000 	.word	0x01adb000
 800262c:	00753000 	.word	0x00753000

08002630 <BME280_compensate_hum_int32>:
 *
 * @param[in] calib_data: Pointer to calibration data structure
 * @param[in] uncomp_hum: 16 bit positive humidity raw data
 * @return Compensated uint32 humidity value. Needs to be divided by 1024 to get result in %RH.
 */
uint32_t BME280_compensate_hum_int32(BME280_calibData_t *calib_data, int32_t uncomp_hum) {
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 800263a:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <BME280_compensate_hum_int32+0xbc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002642:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((uncomp_hum << 14) - (((int32_t)calib_data->dig_H4) << 20) - (((int32_t)calib_data->dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) \
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	039a      	lsls	r2, r3, #14
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	1ad2      	subs	r2, r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002658:	4619      	mov	r1, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002666:	13db      	asrs	r3, r3, #15
				* (((((((v_x1_u32r * ((int32_t)calib_data->dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)calib_data->dig_H3)) >> 11) + ((int32_t)32768))) \
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800266e:	4611      	mov	r1, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	fb01 f202 	mul.w	r2, r1, r2
 8002676:	1292      	asrs	r2, r2, #10
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	7f09      	ldrb	r1, [r1, #28]
 800267c:	4608      	mov	r0, r1
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	fb00 f101 	mul.w	r1, r0, r1
 8002684:	12c9      	asrs	r1, r1, #11
 8002686:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800268a:	fb01 f202 	mul.w	r2, r1, r2
				>> 10) + ((int32_t)2097152)) * ((int32_t)calib_data->dig_H2) + 8192) >> 14));
 800268e:	1292      	asrs	r2, r2, #10
 8002690:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800269a:	fb01 f202 	mul.w	r2, r1, r2
 800269e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80026a2:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((uncomp_hum << 14) - (((int32_t)calib_data->dig_H4) << 20) - (((int32_t)calib_data->dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) \
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)calib_data->dig_H1)) >> 4));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	13db      	asrs	r3, r3, #15
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	13d2      	asrs	r2, r2, #15
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	11db      	asrs	r3, r3, #7
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	7e12      	ldrb	r2, [r2, #24]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	111b      	asrs	r3, r3, #4
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80026ce:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80026d6:	bfa8      	it	ge
 80026d8:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80026dc:	60fb      	str	r3, [r7, #12]

	return (uint32_t)(v_x1_u32r >> 12);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	131b      	asrs	r3, r3, #12
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	200002dc 	.word	0x200002dc

080026f0 <BME280_update_data_flow_info>:
 * @brief The function calculates measurement time, standby time, maximum output data rate, samples and time to reach 75% of step response using IIR filter
 * 		  in accordance with modes. If corresponding setting is set function calculates current consumption.
 *
 * @param[in,out] measure_struct: Pointer to measurement config structure
 */
void BME280_update_data_flow_info(BME280_measureConfig_t *measure_struct) {
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
	if(measure_struct->mode == SLEEP_MODE) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	795b      	ldrb	r3, [r3, #5]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d117      	bne.n	8002730 <BME280_update_data_flow_info+0x40>
		measure_struct->data_flow_info.measure_time = 0.;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
		measure_struct->data_flow_info.standby_time = 0.;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
		measure_struct->data_flow_info.max_ODR = 0.;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
		measure_struct->data_flow_info.IIR_response_samples = 0.;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	751a      	strb	r2, [r3, #20]
		measure_struct->data_flow_info.IIR_response_time = 0.;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
		measure_struct->data_flow_info.current_consumption = 0.;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
#if UPDATE_CONSUMPTION_INFO == 1
	BME280_calc_current_consumption(measure_struct->mode, measure_struct->data_flow_info.max_ODR, measure_struct->data_flow_info.measure_time, \
									measure_struct->temp_oversamp, measure_struct->press_oversamp, measure_struct->hum_oversamp);
#endif
	}
}
 800272e:	e04d      	b.n	80027cc <BME280_update_data_flow_info+0xdc>
		measure_struct->data_flow_info.measure_time = BME280_calc_measure_time(measure_struct->temp_oversamp, measure_struct->press_oversamp, \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7818      	ldrb	r0, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7859      	ldrb	r1, [r3, #1]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	461a      	mov	r2, r3
 800273e:	f000 f84b 	bl	80027d8 <BME280_calc_measure_time>
 8002742:	4602      	mov	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
		if(measure_struct->mode == NORMAL_MODE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	795b      	ldrb	r3, [r3, #5]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d108      	bne.n	8002762 <BME280_update_data_flow_info+0x72>
			measure_struct->data_flow_info.standby_time = BME280_calc_standby_time(measure_struct->standby_time);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f8df 	bl	8002918 <BME280_calc_standby_time>
 800275a:	4602      	mov	r2, r0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	e003      	b.n	800276a <BME280_update_data_flow_info+0x7a>
			measure_struct->data_flow_info.standby_time = 0.;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
		measure_struct->data_flow_info.max_ODR = BME280_calc_data_rate(measure_struct->data_flow_info.measure_time, \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f000 f917 	bl	80029a8 <BME280_calc_data_rate>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	611a      	str	r2, [r3, #16]
		measure_struct->data_flow_info.IIR_response_samples = BME280_calc_response_samples(measure_struct->filter_coeff);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	78db      	ldrb	r3, [r3, #3]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f927 	bl	80029d8 <BME280_calc_response_samples>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	751a      	strb	r2, [r3, #20]
		measure_struct->data_flow_info.IIR_response_time = BME280_calc_response_time(measure_struct->data_flow_info.IIR_response_samples, \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7d1a      	ldrb	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f000 f945 	bl	8002a2c <BME280_calc_response_time>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	619a      	str	r2, [r3, #24]
	BME280_calc_current_consumption(measure_struct->mode, measure_struct->data_flow_info.max_ODR, measure_struct->data_flow_info.measure_time, \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7958      	ldrb	r0, [r3, #5]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6919      	ldr	r1, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689c      	ldr	r4, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781d      	ldrb	r5, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	785b      	ldrb	r3, [r3, #1]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	7892      	ldrb	r2, [r2, #2]
 80027c0:	9201      	str	r2, [sp, #4]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	462b      	mov	r3, r5
 80027c6:	4622      	mov	r2, r4
 80027c8:	f000 f94a 	bl	8002a60 <BME280_calc_current_consumption>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}
 80027d4:	0000      	movs	r0, r0
	...

080027d8 <BME280_calc_measure_time>:
 * @param[in] temp_oversamp: Oversampling of temperature data enum
 * @param[in] press_oversamp: Oversampling of pressure data enum
 * @param[in] hum_oversamp: Oversampling of humidity data enum
 * @return Calculated measurement time (float)
 */
float BME280_calc_measure_time(BME280_oversampling_t temp_oversamp, BME280_oversampling_t press_oversamp, BME280_oversampling_t hum_oversamp) {
 80027d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	460b      	mov	r3, r1
 80027e6:	71bb      	strb	r3, [r7, #6]
 80027e8:	4613      	mov	r3, r2
 80027ea:	717b      	strb	r3, [r7, #5]
	float measure_time;
#if CALCULATE_VALUES_MAX == 0
	measure_time = 1. + 2. * (float)temp_oversamp + (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
				  (2. * (float)hum_oversamp + 0.5) * (hum_oversamp != 0);
#else
	measure_time = 1.25 + 2.3 * (float)temp_oversamp + (2.3 * (float)press_oversamp + 0.575) * (press_oversamp != 0) + \
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fa50 	bl	8000c94 <__aeabi_ui2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fe16 	bl	8000428 <__aeabi_f2d>
 80027fc:	a340      	add	r3, pc, #256	@ (adr r3, 8002900 <BME280_calc_measure_time+0x128>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd fe69 	bl	80004d8 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b3f      	ldr	r3, [pc, #252]	@ (8002910 <BME280_calc_measure_time+0x138>)
 8002814:	f7fd fcaa 	bl	800016c <__adddf3>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4614      	mov	r4, r2
 800281e:	461d      	mov	r5, r3
 8002820:	79bb      	ldrb	r3, [r7, #6]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fa36 	bl	8000c94 <__aeabi_ui2f>
 8002828:	4603      	mov	r3, r0
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fdfc 	bl	8000428 <__aeabi_f2d>
 8002830:	a333      	add	r3, pc, #204	@ (adr r3, 8002900 <BME280_calc_measure_time+0x128>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd fe4f 	bl	80004d8 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	a331      	add	r3, pc, #196	@ (adr r3, 8002908 <BME280_calc_measure_time+0x130>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fc90 	bl	800016c <__adddf3>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4690      	mov	r8, r2
 8002852:	4699      	mov	r9, r3
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <BME280_calc_measure_time+0x8a>
 800285a:	f04f 0000 	mov.w	r0, #0
 800285e:	492d      	ldr	r1, [pc, #180]	@ (8002914 <BME280_calc_measure_time+0x13c>)
 8002860:	e003      	b.n	800286a <BME280_calc_measure_time+0x92>
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	4642      	mov	r2, r8
 800286c:	464b      	mov	r3, r9
 800286e:	f7fd fe33 	bl	80004d8 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fd fc77 	bl	800016c <__adddf3>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4614      	mov	r4, r2
 8002884:	461d      	mov	r5, r3
				  (2.3 * (float)hum_oversamp + 0.575) * (hum_oversamp != 0);
 8002886:	797b      	ldrb	r3, [r7, #5]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fa03 	bl	8000c94 <__aeabi_ui2f>
 800288e:	4603      	mov	r3, r0
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fdc9 	bl	8000428 <__aeabi_f2d>
 8002896:	a31a      	add	r3, pc, #104	@ (adr r3, 8002900 <BME280_calc_measure_time+0x128>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fe1c 	bl	80004d8 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	a317      	add	r3, pc, #92	@ (adr r3, 8002908 <BME280_calc_measure_time+0x130>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fc5d 	bl	800016c <__adddf3>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	797b      	ldrb	r3, [r7, #5]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <BME280_calc_measure_time+0xf0>
 80028c0:	f04f 0000 	mov.w	r0, #0
 80028c4:	4913      	ldr	r1, [pc, #76]	@ (8002914 <BME280_calc_measure_time+0x13c>)
 80028c6:	e003      	b.n	80028d0 <BME280_calc_measure_time+0xf8>
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	f7fd fe00 	bl	80004d8 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
	measure_time = 1.25 + 2.3 * (float)temp_oversamp + (2.3 * (float)press_oversamp + 0.575) * (press_oversamp != 0) + \
 80028dc:	4620      	mov	r0, r4
 80028de:	4629      	mov	r1, r5
 80028e0:	f7fd fc44 	bl	800016c <__adddf3>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f8cc 	bl	8000a88 <__aeabi_d2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
#endif

	return measure_time;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002900:	66666666 	.word	0x66666666
 8002904:	40026666 	.word	0x40026666
 8002908:	66666666 	.word	0x66666666
 800290c:	3fe26666 	.word	0x3fe26666
 8002910:	3ff40000 	.word	0x3ff40000
 8002914:	3ff00000 	.word	0x3ff00000

08002918 <BME280_calc_standby_time>:
 * @brief The function is used to calculate standby time using corresponding setting
 *
 * @param[in] reg_data_standby: Standby time enum
 * @return Calculated standby time (float)
 */
float BME280_calc_standby_time(BME280_standbyTime_t reg_data_standby) {
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
	float result;
	switch(reg_data_standby) {
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2b07      	cmp	r3, #7
 8002926:	d82b      	bhi.n	8002980 <BME280_calc_standby_time+0x68>
 8002928:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <BME280_calc_standby_time+0x18>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002951 	.word	0x08002951
 8002934:	08002959 	.word	0x08002959
 8002938:	0800295f 	.word	0x0800295f
 800293c:	08002965 	.word	0x08002965
 8002940:	0800296b 	.word	0x0800296b
 8002944:	08002971 	.word	0x08002971
 8002948:	08002977 	.word	0x08002977
 800294c:	0800297d 	.word	0x0800297d
		case STANDBY_1MS:
			result = 0.5;
 8002950:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002954:	60fb      	str	r3, [r7, #12]
			break;
 8002956:	e013      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_63MS:
			result = 62.5;
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <BME280_calc_standby_time+0x74>)
 800295a:	60fb      	str	r3, [r7, #12]
			break;
 800295c:	e010      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_125MS:
			result = 125.;
 800295e:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <BME280_calc_standby_time+0x78>)
 8002960:	60fb      	str	r3, [r7, #12]
			break;
 8002962:	e00d      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_250MS:
			result = 250.;
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <BME280_calc_standby_time+0x7c>)
 8002966:	60fb      	str	r3, [r7, #12]
			break;
 8002968:	e00a      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_500MS:
			result = 500.;
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <BME280_calc_standby_time+0x80>)
 800296c:	60fb      	str	r3, [r7, #12]
			break;
 800296e:	e007      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_1000MS:
			result = 1000.;
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <BME280_calc_standby_time+0x84>)
 8002972:	60fb      	str	r3, [r7, #12]
			break;
 8002974:	e004      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_10MS:
			result = 10.;
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <BME280_calc_standby_time+0x88>)
 8002978:	60fb      	str	r3, [r7, #12]
			break;
 800297a:	e001      	b.n	8002980 <BME280_calc_standby_time+0x68>
		case STANDBY_20MS:
			result = 20.;
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <BME280_calc_standby_time+0x8c>)
 800297e:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	427a0000 	.word	0x427a0000
 8002990:	42fa0000 	.word	0x42fa0000
 8002994:	437a0000 	.word	0x437a0000
 8002998:	43fa0000 	.word	0x43fa0000
 800299c:	447a0000 	.word	0x447a0000
 80029a0:	41200000 	.word	0x41200000
 80029a4:	41a00000 	.word	0x41a00000

080029a8 <BME280_calc_data_rate>:
 *
 * @param[in] measure_time: Measurement time value
 * @param[in] standby_time: Standby time value
 * @return Calculated output data rate (float)
 */
float BME280_calc_data_rate(float measure_time, float standby_time) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
	float out_data_rate = 1000 / (measure_time + standby_time);
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fe f8bd 	bl	8000b34 <__addsf3>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4619      	mov	r1, r3
 80029be:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <BME280_calc_data_rate+0x2c>)
 80029c0:	f7fe fa74 	bl	8000eac <__aeabi_fdiv>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]

	return out_data_rate;
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	447a0000 	.word	0x447a0000

080029d8 <BME280_calc_response_samples>:
 * @brief The function is used to calculate number of samples to reach >75% of step response
 *
 * @param[in] filter_coeff: Filter coefficient enum
 * @return Calculated number of samples to reach >75% of step response
 */
uint8_t BME280_calc_response_samples(BME280_filterCoeff_t filter_coeff) {
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	uint8_t response_samples;
	switch(filter_coeff) {
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d817      	bhi.n	8002a18 <BME280_calc_response_samples+0x40>
 80029e8:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <BME280_calc_response_samples+0x18>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a07 	.word	0x08002a07
 80029f8:	08002a0d 	.word	0x08002a0d
 80029fc:	08002a13 	.word	0x08002a13
		case FILTER_OFF:
			response_samples = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
			break;
 8002a04:	e00b      	b.n	8002a1e <BME280_calc_response_samples+0x46>
		case FILTER_X2:
			response_samples = 3;
 8002a06:	2303      	movs	r3, #3
 8002a08:	73fb      	strb	r3, [r7, #15]
			break;
 8002a0a:	e008      	b.n	8002a1e <BME280_calc_response_samples+0x46>
		case FILTER_X4:
			response_samples = 8;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	73fb      	strb	r3, [r7, #15]
			break;
 8002a10:	e005      	b.n	8002a1e <BME280_calc_response_samples+0x46>
		case FILTER_X8:
			response_samples = 11;
 8002a12:	230b      	movs	r3, #11
 8002a14:	73fb      	strb	r3, [r7, #15]
			break;
 8002a16:	e002      	b.n	8002a1e <BME280_calc_response_samples+0x46>
		default:
			response_samples = 16;
 8002a18:	2310      	movs	r3, #16
 8002a1a:	73fb      	strb	r3, [r7, #15]
			break;
 8002a1c:	bf00      	nop
	}

	return response_samples;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop

08002a2c <BME280_calc_response_time>:
 *
 * @param[in] response_samples: Number of samples to reach >75% of step response
 * @param[in] out_data_rate: Output data rate value
 * @return Calculated time to reach >75% of step response
 */
float BME280_calc_response_time(uint8_t response_samples, float out_data_rate) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
	float response_time = 1000 * response_samples / out_data_rate;
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f92a 	bl	8000c9c <__aeabi_i2f>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fa2d 	bl	8000eac <__aeabi_fdiv>
 8002a52:	4603      	mov	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]

	return response_time;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <BME280_calc_current_consumption>:
 * @param[in] press_oversamp: Oversampling of pressure data enum
 * @param[in] hum_oversamp: Oversampling of humidity data enum
 * @return Calculated current consumption value (float)
 */
float BME280_calc_current_consumption(BME280_mode_t mode, float out_data_rate, float measure_time, BME280_oversampling_t temp_oversamp, \
		  	  	  	  	  	  	  	  BME280_oversampling_t press_oversamp, BME280_oversampling_t hum_oversamp) {
 8002a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a64:	b088      	sub	sp, #32
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6139      	str	r1, [r7, #16]
 8002a6a:	60fa      	str	r2, [r7, #12]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
 8002a72:	4613      	mov	r3, r2
 8002a74:	75bb      	strb	r3, [r7, #22]
	float current_consumption;
	float measure_time_s = measure_time / 1000;
 8002a76:	49c2      	ldr	r1, [pc, #776]	@ (8002d80 <BME280_calc_current_consumption+0x320>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7fe fa17 	bl	8000eac <__aeabi_fdiv>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	61bb      	str	r3, [r7, #24]
	else if(mode == FORCED_MODE)
		current_consumption = BME280_SLEEP_CURRENT_TYP * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
							  BME280_HUM_MEAS_CURRENT * (2. * (float)hum_oversamp + 0.5) * (hum_oversamp != 0));
#else
	if(mode == NORMAL_MODE)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	f040 80c9 	bne.w	8002c1c <BME280_calc_current_consumption+0x1bc>
		current_consumption = BME280_STANDBY_CURRENT_MAX * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
 8002a8a:	6939      	ldr	r1, [r7, #16]
 8002a8c:	69b8      	ldr	r0, [r7, #24]
 8002a8e:	f7fe f959 	bl	8000d44 <__aeabi_fmul>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fcc7 	bl	8000428 <__aeabi_f2d>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	f04f 0000 	mov.w	r0, #0
 8002aa2:	49b8      	ldr	r1, [pc, #736]	@ (8002d84 <BME280_calc_current_consumption+0x324>)
 8002aa4:	f7fd fb60 	bl	8000168 <__aeabi_dsub>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4bb4      	ldr	r3, [pc, #720]	@ (8002d88 <BME280_calc_current_consumption+0x328>)
 8002ab6:	f7fd fd0f 	bl	80004d8 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	6938      	ldr	r0, [r7, #16]
 8002ac4:	f7fd fcb0 	bl	8000428 <__aeabi_f2d>
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4baf      	ldr	r3, [pc, #700]	@ (8002d8c <BME280_calc_current_consumption+0x32c>)
 8002ace:	f7fd fe2d 	bl	800072c <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4690      	mov	r8, r2
 8002ad8:	4699      	mov	r9, r3
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
 8002ada:	7dbb      	ldrb	r3, [r7, #22]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fc91 	bl	8000404 <__aeabi_i2d>
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4baa      	ldr	r3, [pc, #680]	@ (8002d90 <BME280_calc_current_consumption+0x330>)
 8002ae8:	f7fd fcf6 	bl	80004d8 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
		current_consumption = BME280_STANDBY_CURRENT_MAX * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
 8002af4:	a39e      	add	r3, pc, #632	@ (adr r3, 8002d70 <BME280_calc_current_consumption+0x310>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fb37 	bl	800016c <__adddf3>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4692      	mov	sl, r2
 8002b04:	469b      	mov	fp, r3
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
 8002b06:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f8c2 	bl	8000c94 <__aeabi_ui2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fc88 	bl	8000428 <__aeabi_f2d>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	f7fd fb26 	bl	800016c <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	4b96      	ldr	r3, [pc, #600]	@ (8002d88 <BME280_calc_current_consumption+0x328>)
 8002b2e:	f7fd fb1d 	bl	800016c <__adddf3>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b95      	ldr	r3, [pc, #596]	@ (8002d94 <BME280_calc_current_consumption+0x334>)
 8002b40:	f7fd fcca 	bl	80004d8 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	e9c7 2300 	strd	r2, r3, [r7]
 8002b4c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <BME280_calc_current_consumption+0xfc>
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	498a      	ldr	r1, [pc, #552]	@ (8002d84 <BME280_calc_current_consumption+0x324>)
 8002b5a:	e003      	b.n	8002b64 <BME280_calc_current_consumption+0x104>
 8002b5c:	f04f 0000 	mov.w	r0, #0
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b68:	f7fd fcb6 	bl	80004d8 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4650      	mov	r0, sl
 8002b72:	4659      	mov	r1, fp
 8002b74:	f7fd fafa 	bl	800016c <__adddf3>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4692      	mov	sl, r2
 8002b7e:	469b      	mov	fp, r3
							  BME280_HUM_MEAS_CURRENT * (2. * (float)hum_oversamp + 0.5) * (hum_oversamp != 0));
 8002b80:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f885 	bl	8000c94 <__aeabi_ui2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fc4b 	bl	8000428 <__aeabi_f2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	f7fd fae9 	bl	800016c <__adddf3>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	4b78      	ldr	r3, [pc, #480]	@ (8002d88 <BME280_calc_current_consumption+0x328>)
 8002ba8:	f7fd fae0 	bl	800016c <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b77      	ldr	r3, [pc, #476]	@ (8002d98 <BME280_calc_current_consumption+0x338>)
 8002bba:	f7fd fc8d 	bl	80004d8 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	e9c7 2300 	strd	r2, r3, [r7]
 8002bc6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <BME280_calc_current_consumption+0x176>
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	496c      	ldr	r1, [pc, #432]	@ (8002d84 <BME280_calc_current_consumption+0x324>)
 8002bd4:	e003      	b.n	8002bde <BME280_calc_current_consumption+0x17e>
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be2:	f7fd fc79 	bl	80004d8 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
 8002bea:	4650      	mov	r0, sl
 8002bec:	4659      	mov	r1, fp
 8002bee:	f7fd fabd 	bl	800016c <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
		current_consumption = BME280_STANDBY_CURRENT_MAX * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	f7fd fc6d 	bl	80004d8 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4620      	mov	r0, r4
 8002c04:	4629      	mov	r1, r5
 8002c06:	f7fd fab1 	bl	800016c <__adddf3>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fd ff39 	bl	8000a88 <__aeabi_d2f>
 8002c16:	4603      	mov	r3, r0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e0e1      	b.n	8002de0 <BME280_calc_current_consumption+0x380>
	else if(mode == FORCED_MODE)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	f040 80de 	bne.w	8002de0 <BME280_calc_current_consumption+0x380>
		current_consumption = BME280_SLEEP_CURRENT_MAX * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
 8002c24:	6939      	ldr	r1, [r7, #16]
 8002c26:	69b8      	ldr	r0, [r7, #24]
 8002c28:	f7fe f88c 	bl	8000d44 <__aeabi_fmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fbfa 	bl	8000428 <__aeabi_f2d>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	4951      	ldr	r1, [pc, #324]	@ (8002d84 <BME280_calc_current_consumption+0x324>)
 8002c3e:	f7fd fa93 	bl	8000168 <__aeabi_dsub>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	a34b      	add	r3, pc, #300	@ (adr r3, 8002d78 <BME280_calc_current_consumption+0x318>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f7fd fc42 	bl	80004d8 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4614      	mov	r4, r2
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	6938      	ldr	r0, [r7, #16]
 8002c5e:	f7fd fbe3 	bl	8000428 <__aeabi_f2d>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b49      	ldr	r3, [pc, #292]	@ (8002d8c <BME280_calc_current_consumption+0x32c>)
 8002c68:	f7fd fd60 	bl	800072c <__aeabi_ddiv>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4690      	mov	r8, r2
 8002c72:	4699      	mov	r9, r3
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
 8002c74:	7dbb      	ldrb	r3, [r7, #22]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fbc4 	bl	8000404 <__aeabi_i2d>
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	4b43      	ldr	r3, [pc, #268]	@ (8002d90 <BME280_calc_current_consumption+0x330>)
 8002c82:	f7fd fc29 	bl	80004d8 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
		current_consumption = BME280_SLEEP_CURRENT_MAX * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
 8002c8e:	a338      	add	r3, pc, #224	@ (adr r3, 8002d70 <BME280_calc_current_consumption+0x310>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f7fd fa6a 	bl	800016c <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4692      	mov	sl, r2
 8002c9e:	469b      	mov	fp, r3
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
 8002ca0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fff5 	bl	8000c94 <__aeabi_ui2f>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fbbb 	bl	8000428 <__aeabi_f2d>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	f7fd fa59 	bl	800016c <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <BME280_calc_current_consumption+0x328>)
 8002cc8:	f7fd fa50 	bl	800016c <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <BME280_calc_current_consumption+0x334>)
 8002cda:	f7fd fbfd 	bl	80004d8 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	e9c7 2300 	strd	r2, r3, [r7]
 8002ce6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <BME280_calc_current_consumption+0x296>
 8002cee:	f04f 0000 	mov.w	r0, #0
 8002cf2:	4924      	ldr	r1, [pc, #144]	@ (8002d84 <BME280_calc_current_consumption+0x324>)
 8002cf4:	e003      	b.n	8002cfe <BME280_calc_current_consumption+0x29e>
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d02:	f7fd fbe9 	bl	80004d8 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4650      	mov	r0, sl
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	f7fd fa2d 	bl	800016c <__adddf3>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4692      	mov	sl, r2
 8002d18:	469b      	mov	fp, r3
							  BME280_HUM_MEAS_CURRENT * (2. * (float)hum_oversamp + 0.5) * (hum_oversamp != 0));
 8002d1a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ffb8 	bl	8000c94 <__aeabi_ui2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fb7e 	bl	8000428 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	f7fd fa1c 	bl	800016c <__adddf3>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <BME280_calc_current_consumption+0x328>)
 8002d42:	f7fd fa13 	bl	800016c <__adddf3>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <BME280_calc_current_consumption+0x338>)
 8002d54:	f7fd fbc0 	bl	80004d8 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	e9c7 2300 	strd	r2, r3, [r7]
 8002d60:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d019      	beq.n	8002d9c <BME280_calc_current_consumption+0x33c>
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	4905      	ldr	r1, [pc, #20]	@ (8002d84 <BME280_calc_current_consumption+0x324>)
 8002d6e:	e019      	b.n	8002da4 <BME280_calc_current_consumption+0x344>
 8002d70:	00000000 	.word	0x00000000
 8002d74:	4069a000 	.word	0x4069a000
 8002d78:	33333333 	.word	0x33333333
 8002d7c:	3fd33333 	.word	0x3fd33333
 8002d80:	447a0000 	.word	0x447a0000
 8002d84:	3ff00000 	.word	0x3ff00000
 8002d88:	3fe00000 	.word	0x3fe00000
 8002d8c:	408f4000 	.word	0x408f4000
 8002d90:	4085e000 	.word	0x4085e000
 8002d94:	40865000 	.word	0x40865000
 8002d98:	40754000 	.word	0x40754000
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002da8:	f7fd fb96 	bl	80004d8 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
							  2. * temp_oversamp + BME280_PRESS_MEAS_CURRENT * (2. * (float)press_oversamp + 0.5) * (press_oversamp != 0) + \
 8002db0:	4650      	mov	r0, sl
 8002db2:	4659      	mov	r1, fp
 8002db4:	f7fd f9da 	bl	800016c <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
		current_consumption = BME280_SLEEP_CURRENT_MAX * (1. - measure_time_s * out_data_rate) + out_data_rate / 1000. * (205. + BME280_TEMP_MEAS_CURRENT * \
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	f7fd fb8a 	bl	80004d8 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd f9ce 	bl	800016c <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7fd fe56 	bl	8000a88 <__aeabi_d2f>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	61fb      	str	r3, [r7, #28]
#endif
	return current_consumption;
 8002de0:	69fb      	ldr	r3, [r7, #28]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_Init+0x28>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	@ (8002e14 <HAL_Init+0x28>)
 8002df6:	f043 0310 	orr.w	r3, r3, #16
 8002dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 f947 	bl	8003090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f000 f808 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7fe fc30 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_InitTick+0x54>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <HAL_InitTick+0x58>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f95f 	bl	80030fa <HAL_SYSTICK_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00e      	b.n	8002e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d80a      	bhi.n	8002e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f000 f927 	bl	80030a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e58:	4a06      	ldr	r2, [pc, #24]	@ (8002e74 <HAL_InitTick+0x5c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000008 	.word	0x20000008
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_IncTick+0x1c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_IncTick+0x20>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	4a03      	ldr	r2, [pc, #12]	@ (8002e98 <HAL_IncTick+0x20>)
 8002e8a:	6013      	str	r3, [r2, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	20000008 	.word	0x20000008
 8002e98:	200002e0 	.word	0x200002e0

08002e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b02      	ldr	r3, [pc, #8]	@ (8002eac <HAL_GetTick+0x10>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	200002e0 	.word	0x200002e0

08002eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff fff0 	bl	8002e9c <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d005      	beq.n	8002ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_Delay+0x44>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed6:	bf00      	nop
 8002ed8:	f7ff ffe0 	bl	8002e9c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8f7      	bhi.n	8002ed8 <HAL_Delay+0x28>
  {
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000008 	.word	0x20000008

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2a:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60d3      	str	r3, [r2, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4906      	ldr	r1, [pc, #24]	@ (8002f90 <__NVIC_EnableIRQ+0x34>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	@ (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	@ (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	@ 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800305c:	d301      	bcc.n	8003062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305e:	2301      	movs	r3, #1
 8003060:	e00f      	b.n	8003082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <SysTick_Config+0x40>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306a:	210f      	movs	r1, #15
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f7ff ff90 	bl	8002f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <SysTick_Config+0x40>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307a:	4b04      	ldr	r3, [pc, #16]	@ (800308c <SysTick_Config+0x40>)
 800307c:	2207      	movs	r2, #7
 800307e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff2d 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b8:	f7ff ff42 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 80030bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff ff90 	bl	8002fe8 <NVIC_EncodePriority>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff5f 	bl	8002f94 <__NVIC_SetPriority>
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff35 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffa2 	bl	800304c <SysTick_Config>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d008      	beq.n	800313c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2204      	movs	r2, #4
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e020      	b.n	800317e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 020e 	bic.w	r2, r2, #14
 800314a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d005      	beq.n	80031ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e051      	b.n	8003250 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 020e 	bic.w	r2, r2, #14
 80031ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a22      	ldr	r2, [pc, #136]	@ (800325c <HAL_DMA_Abort_IT+0xd4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d029      	beq.n	800322a <HAL_DMA_Abort_IT+0xa2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <HAL_DMA_Abort_IT+0xd8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_DMA_Abort_IT+0x9e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003264 <HAL_DMA_Abort_IT+0xdc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01a      	beq.n	8003220 <HAL_DMA_Abort_IT+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <HAL_DMA_Abort_IT+0xe0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d012      	beq.n	800321a <HAL_DMA_Abort_IT+0x92>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <HAL_DMA_Abort_IT+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00a      	beq.n	8003214 <HAL_DMA_Abort_IT+0x8c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1b      	ldr	r2, [pc, #108]	@ (8003270 <HAL_DMA_Abort_IT+0xe8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d102      	bne.n	800320e <HAL_DMA_Abort_IT+0x86>
 8003208:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800320c:	e00e      	b.n	800322c <HAL_DMA_Abort_IT+0xa4>
 800320e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003212:	e00b      	b.n	800322c <HAL_DMA_Abort_IT+0xa4>
 8003214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003218:	e008      	b.n	800322c <HAL_DMA_Abort_IT+0xa4>
 800321a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800321e:	e005      	b.n	800322c <HAL_DMA_Abort_IT+0xa4>
 8003220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003224:	e002      	b.n	800322c <HAL_DMA_Abort_IT+0xa4>
 8003226:	2310      	movs	r3, #16
 8003228:	e000      	b.n	800322c <HAL_DMA_Abort_IT+0xa4>
 800322a:	2301      	movs	r3, #1
 800322c:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <HAL_DMA_Abort_IT+0xec>)
 800322e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
    } 
  }
  return status;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40020008 	.word	0x40020008
 8003260:	4002001c 	.word	0x4002001c
 8003264:	40020030 	.word	0x40020030
 8003268:	40020044 	.word	0x40020044
 800326c:	40020058 	.word	0x40020058
 8003270:	4002006c 	.word	0x4002006c
 8003274:	40020000 	.word	0x40020000

08003278 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003286:	b2db      	uxtb	r3, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
	...

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b08b      	sub	sp, #44	@ 0x2c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a6:	e169      	b.n	800357c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032a8:	2201      	movs	r2, #1
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f040 8158 	bne.w	8003576 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a9a      	ldr	r2, [pc, #616]	@ (8003534 <HAL_GPIO_Init+0x2a0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d05e      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032d0:	4a98      	ldr	r2, [pc, #608]	@ (8003534 <HAL_GPIO_Init+0x2a0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d875      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032d6:	4a98      	ldr	r2, [pc, #608]	@ (8003538 <HAL_GPIO_Init+0x2a4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d058      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032dc:	4a96      	ldr	r2, [pc, #600]	@ (8003538 <HAL_GPIO_Init+0x2a4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d86f      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032e2:	4a96      	ldr	r2, [pc, #600]	@ (800353c <HAL_GPIO_Init+0x2a8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d052      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032e8:	4a94      	ldr	r2, [pc, #592]	@ (800353c <HAL_GPIO_Init+0x2a8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d869      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032ee:	4a94      	ldr	r2, [pc, #592]	@ (8003540 <HAL_GPIO_Init+0x2ac>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04c      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 80032f4:	4a92      	ldr	r2, [pc, #584]	@ (8003540 <HAL_GPIO_Init+0x2ac>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d863      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 80032fa:	4a92      	ldr	r2, [pc, #584]	@ (8003544 <HAL_GPIO_Init+0x2b0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d046      	beq.n	800338e <HAL_GPIO_Init+0xfa>
 8003300:	4a90      	ldr	r2, [pc, #576]	@ (8003544 <HAL_GPIO_Init+0x2b0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d85d      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 8003306:	2b12      	cmp	r3, #18
 8003308:	d82a      	bhi.n	8003360 <HAL_GPIO_Init+0xcc>
 800330a:	2b12      	cmp	r3, #18
 800330c:	d859      	bhi.n	80033c2 <HAL_GPIO_Init+0x12e>
 800330e:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <HAL_GPIO_Init+0x80>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	0800338f 	.word	0x0800338f
 8003318:	08003369 	.word	0x08003369
 800331c:	0800337b 	.word	0x0800337b
 8003320:	080033bd 	.word	0x080033bd
 8003324:	080033c3 	.word	0x080033c3
 8003328:	080033c3 	.word	0x080033c3
 800332c:	080033c3 	.word	0x080033c3
 8003330:	080033c3 	.word	0x080033c3
 8003334:	080033c3 	.word	0x080033c3
 8003338:	080033c3 	.word	0x080033c3
 800333c:	080033c3 	.word	0x080033c3
 8003340:	080033c3 	.word	0x080033c3
 8003344:	080033c3 	.word	0x080033c3
 8003348:	080033c3 	.word	0x080033c3
 800334c:	080033c3 	.word	0x080033c3
 8003350:	080033c3 	.word	0x080033c3
 8003354:	080033c3 	.word	0x080033c3
 8003358:	08003371 	.word	0x08003371
 800335c:	08003385 	.word	0x08003385
 8003360:	4a79      	ldr	r2, [pc, #484]	@ (8003548 <HAL_GPIO_Init+0x2b4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003366:	e02c      	b.n	80033c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	623b      	str	r3, [r7, #32]
          break;
 800336e:	e029      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	3304      	adds	r3, #4
 8003376:	623b      	str	r3, [r7, #32]
          break;
 8003378:	e024      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	3308      	adds	r3, #8
 8003380:	623b      	str	r3, [r7, #32]
          break;
 8003382:	e01f      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	330c      	adds	r3, #12
 800338a:	623b      	str	r3, [r7, #32]
          break;
 800338c:	e01a      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003396:	2304      	movs	r3, #4
 8003398:	623b      	str	r3, [r7, #32]
          break;
 800339a:	e013      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033a4:	2308      	movs	r3, #8
 80033a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	611a      	str	r2, [r3, #16]
          break;
 80033ae:	e009      	b.n	80033c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033b0:	2308      	movs	r3, #8
 80033b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	615a      	str	r2, [r3, #20]
          break;
 80033ba:	e003      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
          break;
 80033c0:	e000      	b.n	80033c4 <HAL_GPIO_Init+0x130>
          break;
 80033c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2bff      	cmp	r3, #255	@ 0xff
 80033c8:	d801      	bhi.n	80033ce <HAL_GPIO_Init+0x13a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	e001      	b.n	80033d2 <HAL_GPIO_Init+0x13e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2bff      	cmp	r3, #255	@ 0xff
 80033d8:	d802      	bhi.n	80033e0 <HAL_GPIO_Init+0x14c>
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	e002      	b.n	80033e6 <HAL_GPIO_Init+0x152>
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	3b08      	subs	r3, #8
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	210f      	movs	r1, #15
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	6a39      	ldr	r1, [r7, #32]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	431a      	orrs	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80b1 	beq.w	8003576 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003414:	4b4d      	ldr	r3, [pc, #308]	@ (800354c <HAL_GPIO_Init+0x2b8>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a4c      	ldr	r2, [pc, #304]	@ (800354c <HAL_GPIO_Init+0x2b8>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <HAL_GPIO_Init+0x2b8>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800342c:	4a48      	ldr	r2, [pc, #288]	@ (8003550 <HAL_GPIO_Init+0x2bc>)
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a40      	ldr	r2, [pc, #256]	@ (8003554 <HAL_GPIO_Init+0x2c0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_GPIO_Init+0x1ec>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3f      	ldr	r2, [pc, #252]	@ (8003558 <HAL_GPIO_Init+0x2c4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00d      	beq.n	800347c <HAL_GPIO_Init+0x1e8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3e      	ldr	r2, [pc, #248]	@ (800355c <HAL_GPIO_Init+0x2c8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <HAL_GPIO_Init+0x1e4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3d      	ldr	r2, [pc, #244]	@ (8003560 <HAL_GPIO_Init+0x2cc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_GPIO_Init+0x1e0>
 8003470:	2303      	movs	r3, #3
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003474:	2304      	movs	r3, #4
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003478:	2302      	movs	r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003480:	2300      	movs	r3, #0
 8003482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003492:	492f      	ldr	r1, [pc, #188]	@ (8003550 <HAL_GPIO_Init+0x2bc>)
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	492c      	ldr	r1, [pc, #176]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]
 80034b8:	e006      	b.n	80034c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	4928      	ldr	r1, [pc, #160]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d006      	beq.n	80034e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034d4:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4922      	ldr	r1, [pc, #136]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60cb      	str	r3, [r1, #12]
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034e2:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	491e      	ldr	r1, [pc, #120]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4918      	ldr	r1, [pc, #96]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800350a:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	43db      	mvns	r3, r3
 8003512:	4914      	ldr	r1, [pc, #80]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 8003514:	4013      	ands	r3, r2
 8003516:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d021      	beq.n	8003568 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	490e      	ldr	r1, [pc, #56]	@ (8003564 <HAL_GPIO_Init+0x2d0>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e021      	b.n	8003576 <HAL_GPIO_Init+0x2e2>
 8003532:	bf00      	nop
 8003534:	10320000 	.word	0x10320000
 8003538:	10310000 	.word	0x10310000
 800353c:	10220000 	.word	0x10220000
 8003540:	10210000 	.word	0x10210000
 8003544:	10120000 	.word	0x10120000
 8003548:	10110000 	.word	0x10110000
 800354c:	40021000 	.word	0x40021000
 8003550:	40010000 	.word	0x40010000
 8003554:	40010800 	.word	0x40010800
 8003558:	40010c00 	.word	0x40010c00
 800355c:	40011000 	.word	0x40011000
 8003560:	40011400 	.word	0x40011400
 8003564:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003568:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <HAL_GPIO_Init+0x304>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	43db      	mvns	r3, r3
 8003570:	4909      	ldr	r1, [pc, #36]	@ (8003598 <HAL_GPIO_Init+0x304>)
 8003572:	4013      	ands	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	f47f ae8e 	bne.w	80032a8 <HAL_GPIO_Init+0x14>
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	372c      	adds	r7, #44	@ 0x2c
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e12b      	b.n	8003806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe f884 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	@ 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003600:	f002 ffb8 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a81      	ldr	r2, [pc, #516]	@ (8003810 <HAL_I2C_Init+0x274>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d807      	bhi.n	8003620 <HAL_I2C_Init+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a80      	ldr	r2, [pc, #512]	@ (8003814 <HAL_I2C_Init+0x278>)
 8003614:	4293      	cmp	r3, r2
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e006      	b.n	800362e <HAL_I2C_Init+0x92>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a7d      	ldr	r2, [pc, #500]	@ (8003818 <HAL_I2C_Init+0x27c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0e7      	b.n	8003806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a78      	ldr	r2, [pc, #480]	@ (800381c <HAL_I2C_Init+0x280>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0c9b      	lsrs	r3, r3, #18
 8003640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a6a      	ldr	r2, [pc, #424]	@ (8003810 <HAL_I2C_Init+0x274>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <HAL_I2C_Init+0xd4>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3301      	adds	r3, #1
 800366e:	e009      	b.n	8003684 <HAL_I2C_Init+0xe8>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a69      	ldr	r2, [pc, #420]	@ (8003820 <HAL_I2C_Init+0x284>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	3301      	adds	r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003696:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	495c      	ldr	r1, [pc, #368]	@ (8003810 <HAL_I2C_Init+0x274>)
 80036a0:	428b      	cmp	r3, r1
 80036a2:	d819      	bhi.n	80036d8 <HAL_I2C_Init+0x13c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e59      	subs	r1, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036b8:	400b      	ands	r3, r1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_I2C_Init+0x138>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e59      	subs	r1, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d2:	e051      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e04f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d111      	bne.n	8003704 <HAL_I2C_Init+0x168>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e012      	b.n	800372a <HAL_I2C_Init+0x18e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Init+0x196>
 800372e:	2301      	movs	r3, #1
 8003730:	e022      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10e      	bne.n	8003758 <HAL_I2C_Init+0x1bc>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e58      	subs	r0, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	440b      	add	r3, r1
 8003748:	fbb0 f3f3 	udiv	r3, r0, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003756:	e00f      	b.n	8003778 <HAL_I2C_Init+0x1dc>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6911      	ldr	r1, [r2, #16]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	000186a0 	.word	0x000186a0
 8003814:	001e847f 	.word	0x001e847f
 8003818:	003d08ff 	.word	0x003d08ff
 800381c:	431bde83 	.word	0x431bde83
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003836:	2b80      	cmp	r3, #128	@ 0x80
 8003838:	d103      	bne.n	8003842 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	611a      	str	r2, [r3, #16]
  }
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	461a      	mov	r2, r3
 8003858:	460b      	mov	r3, r1
 800385a:	817b      	strh	r3, [r7, #10]
 800385c:	4613      	mov	r3, r2
 800385e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff fb1c 	bl	8002e9c <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	f040 80e0 	bne.w	8003a34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2319      	movs	r3, #25
 800387a:	2201      	movs	r2, #1
 800387c:	4970      	ldr	r1, [pc, #448]	@ (8003a40 <HAL_I2C_Master_Transmit+0x1f4>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f002 f82c 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	e0d3      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2C_Master_Transmit+0x50>
 8003898:	2302      	movs	r3, #2
 800389a:	e0cc      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d007      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2221      	movs	r2, #33	@ 0x21
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2210      	movs	r2, #16
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	893a      	ldrh	r2, [r7, #8]
 80038f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a50      	ldr	r2, [pc, #320]	@ (8003a44 <HAL_I2C_Master_Transmit+0x1f8>)
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003904:	8979      	ldrh	r1, [r7, #10]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f001 fdd4 	bl	80054b8 <I2C_MasterRequestWrite>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e08d      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003930:	e066      	b.n	8003a00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	6a39      	ldr	r1, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f002 f8ea 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2b04      	cmp	r3, #4
 8003948:	d107      	bne.n	800395a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e06b      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d11b      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x188>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d017      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	6a39      	ldr	r1, [r7, #32]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f002 f8e1 	bl	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e01a      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d194      	bne.n	8003932 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	00100002 	.word	0x00100002
 8003a44:	ffff0000 	.word	0xffff0000

08003a48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	@ 0x30
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a66:	f7ff fa19 	bl	8002e9c <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	f040 8250 	bne.w	8003f1a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2319      	movs	r3, #25
 8003a80:	2201      	movs	r2, #1
 8003a82:	4982      	ldr	r1, [pc, #520]	@ (8003c8c <HAL_I2C_Mem_Read+0x244>)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f001 ff29 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
 8003a92:	e243      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x5a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e23c      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d007      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2222      	movs	r2, #34	@ 0x22
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2240      	movs	r2, #64	@ 0x40
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a62      	ldr	r2, [pc, #392]	@ (8003c90 <HAL_I2C_Mem_Read+0x248>)
 8003b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b0a:	88f8      	ldrh	r0, [r7, #6]
 8003b0c:	893a      	ldrh	r2, [r7, #8]
 8003b0e:	8979      	ldrh	r1, [r7, #10]
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	4603      	mov	r3, r0
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f001 fd4e 	bl	80055bc <I2C_RequestMemoryRead>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1f8      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d113      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e1cc      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d11e      	bne.n	8003ba0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b72:	b672      	cpsid	i
}
 8003b74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b9c:	b662      	cpsie	i
}
 8003b9e:	e035      	b.n	8003c0c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d11e      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb8:	b672      	cpsid	i
}
 8003bba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003be2:	b662      	cpsie	i
}
 8003be4:	e012      	b.n	8003c0c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bf4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003c0c:	e172      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	f200 811f 	bhi.w	8003e56 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d123      	bne.n	8003c68 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f002 f835 	bl	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e173      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c66:	e145      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d152      	bne.n	8003d16 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c76:	2200      	movs	r2, #0
 8003c78:	4906      	ldr	r1, [pc, #24]	@ (8003c94 <HAL_I2C_Mem_Read+0x24c>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 fe2e 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e148      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
 8003c8a:	bf00      	nop
 8003c8c:	00100002 	.word	0x00100002
 8003c90:	ffff0000 	.word	0xffff0000
 8003c94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c98:	b672      	cpsid	i
}
 8003c9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cde:	b662      	cpsie	i
}
 8003ce0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d14:	e0ee      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4981      	ldr	r1, [pc, #516]	@ (8003f24 <HAL_I2C_Mem_Read+0x4dc>)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f001 fddb 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0f5      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d40:	b672      	cpsid	i
}
 8003d42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d76:	4b6c      	ldr	r3, [pc, #432]	@ (8003f28 <HAL_I2C_Mem_Read+0x4e0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f2c <HAL_I2C_Mem_Read+0x4e4>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0a1a      	lsrs	r2, r3, #8
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	00da      	lsls	r2, r3, #3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d118      	bne.n	8003dce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003dbe:	b662      	cpsie	i
}
 8003dc0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0a6      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d1d9      	bne.n	8003d90 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e1e:	b662      	cpsie	i
}
 8003e20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e54:	e04e      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f001 ff1a 	bl	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e058      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d124      	bne.n	8003ef4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f47f ae88 	bne.w	8003c0e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	@ 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	00010004 	.word	0x00010004
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	14f8b589 	.word	0x14f8b589

08003f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d003      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x38>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b40      	cmp	r3, #64	@ 0x40
 8003f64:	f040 80b1 	bne.w	80040ca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_I2C_EV_IRQHandler+0x6e>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003f88:	d003      	beq.n	8003f92 <HAL_I2C_EV_IRQHandler+0x62>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_EV_IRQHandler+0x66>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x68>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f000 8114 	beq.w	80041c6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x90>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 fef9 	bl	8005daa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fccd 	bl	8004958 <I2C_Master_SB>
 8003fbe:	e083      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_I2C_EV_IRQHandler+0xac>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fd44 	bl	8004a62 <I2C_Master_ADD10>
 8003fda:	e075      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0xc8>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fd5f 	bl	8004ab4 <I2C_Master_ADDR>
 8003ff6:	e067      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800400c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004010:	f000 80db 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x10a>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x10a>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f92d 	bl	8004292 <I2C_MasterTransmit_TXE>
 8004038:	e046      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80c2 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80bc 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004052:	7bbb      	ldrb	r3, [r7, #14]
 8004054:	2b21      	cmp	r3, #33	@ 0x21
 8004056:	d103      	bne.n	8004060 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f9b6 	bl	80043ca <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405e:	e0b4      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	f040 80b1 	bne.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa24 	bl	80044b6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800406e:	e0ac      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407e:	f000 80a4 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x178>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x178>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 faa0 	bl	80045e6 <I2C_MasterReceive_RXNE>
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808b 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8085 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fb58 	bl	8004776 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040c6:	e080      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
 80040c8:	e07f      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e007      	b.n	80040ec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d011      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0x1ea>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004110:	69b9      	ldr	r1, [r7, #24]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 ff25 	bl	8004f62 <I2C_Slave_ADDR>
 8004118:	e05a      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x206>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 ff60 	bl	8004ff4 <I2C_Slave_STOPF>
 8004134:	e04c      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004136:	7bbb      	ldrb	r3, [r7, #14]
 8004138:	2b21      	cmp	r3, #33	@ 0x21
 800413a:	d002      	beq.n	8004142 <HAL_I2C_EV_IRQHandler+0x212>
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	2b29      	cmp	r3, #41	@ 0x29
 8004140:	d120      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <HAL_I2C_EV_IRQHandler+0x238>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_I2C_EV_IRQHandler+0x238>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fe42 	bl	8004dea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004166:	e032      	b.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d02d      	beq.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004178:	2b00      	cmp	r3, #0
 800417a:	d028      	beq.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fe71 	bl	8004e64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004182:	e024      	b.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x27a>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x27a>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fe7e 	bl	8004ea4 <I2C_SlaveReceive_RXNE>
 80041a8:	e012      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 feae 	bl	8004f20 <I2C_SlaveReceive_BTF>
 80041c4:	e004      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	70fb      	strb	r3, [r7, #3]
 800422a:	4613      	mov	r3, r2
 800422c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042a8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d150      	bne.n	800435a <I2C_MasterTransmit_TXE+0xc8>
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b21      	cmp	r3, #33	@ 0x21
 80042bc:	d14d      	bne.n	800435a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d01d      	beq.n	8004300 <I2C_MasterTransmit_TXE+0x6e>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d01a      	beq.n	8004300 <I2C_MasterTransmit_TXE+0x6e>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042d0:	d016      	beq.n	8004300 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2211      	movs	r2, #17
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff6c 	bl	80041d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042fe:	e060      	b.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800430e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d107      	bne.n	800434a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff81 	bl	800424a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004348:	e03b      	b.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ff3f 	bl	80041d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004358:	e033      	b.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b21      	cmp	r3, #33	@ 0x21
 800435e:	d005      	beq.n	800436c <I2C_MasterTransmit_TXE+0xda>
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	2b40      	cmp	r3, #64	@ 0x40
 8004364:	d12d      	bne.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b22      	cmp	r3, #34	@ 0x22
 800436a:	d12a      	bne.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004384:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004386:	e01c      	b.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d103      	bne.n	800439c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f88e 	bl	80044b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800439a:	e012      	b.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043c0:	e7ff      	b.n	80043c2 <I2C_MasterTransmit_TXE+0x130>
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b21      	cmp	r3, #33	@ 0x21
 80043e2:	d164      	bne.n	80044ae <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004412:	e04c      	b.n	80044ae <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d01d      	beq.n	8004456 <I2C_MasterTransmit_BTF+0x8c>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b20      	cmp	r3, #32
 800441e:	d01a      	beq.n	8004456 <I2C_MasterTransmit_BTF+0x8c>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004426:	d016      	beq.n	8004456 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004436:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2211      	movs	r2, #17
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fec1 	bl	80041d6 <HAL_I2C_MasterTxCpltCallback>
}
 8004454:	e02b      	b.n	80044ae <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004464:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004474:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d107      	bne.n	80044a0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fed6 	bl	800424a <HAL_I2C_MemTxCpltCallback>
}
 800449e:	e006      	b.n	80044ae <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fe94 	bl	80041d6 <HAL_I2C_MasterTxCpltCallback>
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11d      	bne.n	800450a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10b      	bne.n	80044ee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80044ec:	e077      	b.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	121b      	asrs	r3, r3, #8
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004508:	e069      	b.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10b      	bne.n	800452a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004516:	b2da      	uxtb	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004528:	e059      	b.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452e:	2b02      	cmp	r3, #2
 8004530:	d152      	bne.n	80045d8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b22      	cmp	r3, #34	@ 0x22
 8004536:	d10d      	bne.n	8004554 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004546:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004552:	e044      	b.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d015      	beq.n	800458a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b21      	cmp	r3, #33	@ 0x21
 8004562:	d112      	bne.n	800458a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004588:	e029      	b.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d124      	bne.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b21      	cmp	r3, #33	@ 0x21
 8004598:	d121      	bne.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045a8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fe3a 	bl	800424a <HAL_I2C_MemTxCpltCallback>
}
 80045d6:	e002      	b.n	80045de <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff f923 	bl	8003824 <I2C_Flush_DR>
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b22      	cmp	r3, #34	@ 0x22
 80045f8:	f040 80b9 	bne.w	800476e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d921      	bls.n	8004654 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b03      	cmp	r3, #3
 800463e:	f040 8096 	bne.w	800476e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004650:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004652:	e08c      	b.n	800476e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	2b02      	cmp	r3, #2
 800465a:	d07f      	beq.n	800475c <I2C_MasterReceive_RXNE+0x176>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d002      	beq.n	8004668 <I2C_MasterReceive_RXNE+0x82>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d179      	bne.n	800475c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 fae1 	bl	8005c30 <I2C_WaitOnSTOPRequestThroughIT>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d14c      	bne.n	800470e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004682:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004692:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d10a      	bne.n	80046e4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fdbd 	bl	800425c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046e2:	e044      	b.n	800476e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d002      	beq.n	80046f8 <I2C_MasterReceive_RXNE+0x112>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d103      	bne.n	8004700 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80046fe:	e002      	b.n	8004706 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2212      	movs	r2, #18
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fd6e 	bl	80041e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800470c:	e02f      	b.n	800476e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800471c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fd8a 	bl	800426e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800475a:	e008      	b.n	800476e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476a:	605a      	str	r2, [r3, #4]
}
 800476c:	e7ff      	b.n	800476e <I2C_MasterReceive_RXNE+0x188>
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b04      	cmp	r3, #4
 800478c:	d11b      	bne.n	80047c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800479c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80047c4:	e0c4      	b.n	8004950 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d129      	bne.n	8004824 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d00a      	beq.n	80047fc <I2C_MasterReceive_BTF+0x86>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d007      	beq.n	80047fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004822:	e095      	b.n	8004950 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d17d      	bne.n	800492a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d002      	beq.n	800483a <I2C_MasterReceive_BTF+0xc4>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b10      	cmp	r3, #16
 8004838:	d108      	bne.n	800484c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e016      	b.n	800487a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d002      	beq.n	8004858 <I2C_MasterReceive_BTF+0xe2>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d108      	bne.n	800486a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e007      	b.n	800487a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004878:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b40      	cmp	r3, #64	@ 0x40
 80048e8:	d10a      	bne.n	8004900 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fcaf 	bl	800425c <HAL_I2C_MemRxCpltCallback>
}
 80048fe:	e027      	b.n	8004950 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b08      	cmp	r3, #8
 800490c:	d002      	beq.n	8004914 <I2C_MasterReceive_BTF+0x19e>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b20      	cmp	r3, #32
 8004912:	d103      	bne.n	800491c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	@ 0x30
 800491a:	e002      	b.n	8004922 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2212      	movs	r2, #18
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fc60 	bl	80041e8 <HAL_I2C_MasterRxCpltCallback>
}
 8004928:	e012      	b.n	8004950 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d117      	bne.n	800499c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004984:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004986:	e067      	b.n	8004a58 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	b2da      	uxtb	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	611a      	str	r2, [r3, #16]
}
 800499a:	e05d      	b.n	8004a58 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049a4:	d133      	bne.n	8004a0e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b21      	cmp	r3, #33	@ 0x21
 80049b0:	d109      	bne.n	80049c6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049c2:	611a      	str	r2, [r3, #16]
 80049c4:	e008      	b.n	80049d8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <I2C_Master_SB+0x92>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d032      	beq.n	8004a58 <I2C_Master_SB+0x100>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02d      	beq.n	8004a58 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0a:	605a      	str	r2, [r3, #4]
}
 8004a0c:	e024      	b.n	8004a58 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10e      	bne.n	8004a34 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	11db      	asrs	r3, r3, #7
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 0306 	and.w	r3, r3, #6
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f063 030f 	orn	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	611a      	str	r2, [r3, #16]
}
 8004a32:	e011      	b.n	8004a58 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10d      	bne.n	8004a58 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	11db      	asrs	r3, r3, #7
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0306 	and.w	r3, r3, #6
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f063 030e 	orn	r3, r3, #14
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d004      	beq.n	8004a88 <I2C_Master_ADD10+0x26>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <I2C_Master_ADD10+0x48>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa8:	605a      	str	r2, [r3, #4]
  }
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b091      	sub	sp, #68	@ 0x44
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ac2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b22      	cmp	r3, #34	@ 0x22
 8004adc:	f040 8174 	bne.w	8004dc8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <I2C_Master_ADDR+0x54>
 8004ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	d10b      	bne.n	8004b08 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af0:	2300      	movs	r3, #0
 8004af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	e16b      	b.n	8004de0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d11d      	bne.n	8004b4c <I2C_Master_ADDR+0x98>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b18:	d118      	bne.n	8004b4c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b3e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b4a:	e149      	b.n	8004de0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d113      	bne.n	8004b7e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e120      	b.n	8004dc0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f040 808a 	bne.w	8004c9e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b90:	d137      	bne.n	8004c02 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb0:	d113      	bne.n	8004bda <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	e0f2      	b.n	8004dc0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e0de      	b.n	8004dc0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d02e      	beq.n	8004c66 <I2C_Master_ADDR+0x1b2>
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d02b      	beq.n	8004c66 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c10:	2b12      	cmp	r3, #18
 8004c12:	d102      	bne.n	8004c1a <I2C_Master_ADDR+0x166>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d125      	bne.n	8004c66 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d00e      	beq.n	8004c3e <I2C_Master_ADDR+0x18a>
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d00b      	beq.n	8004c3e <I2C_Master_ADDR+0x18a>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d008      	beq.n	8004c3e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e007      	b.n	8004c4e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	e0ac      	b.n	8004dc0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e090      	b.n	8004dc0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d158      	bne.n	8004d5a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d021      	beq.n	8004cf2 <I2C_Master_ADDR+0x23e>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d01e      	beq.n	8004cf2 <I2C_Master_ADDR+0x23e>
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d01b      	beq.n	8004cf2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	e012      	b.n	8004d18 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d00:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d26:	d14b      	bne.n	8004dc0 <I2C_Master_ADDR+0x30c>
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d2e:	d00b      	beq.n	8004d48 <I2C_Master_ADDR+0x294>
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d008      	beq.n	8004d48 <I2C_Master_ADDR+0x294>
 8004d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d005      	beq.n	8004d48 <I2C_Master_ADDR+0x294>
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	d002      	beq.n	8004d48 <I2C_Master_ADDR+0x294>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d13b      	bne.n	8004dc0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	e032      	b.n	8004dc0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d78:	d117      	bne.n	8004daa <I2C_Master_ADDR+0x2f6>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d80:	d00b      	beq.n	8004d9a <I2C_Master_ADDR+0x2e6>
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d008      	beq.n	8004d9a <I2C_Master_ADDR+0x2e6>
 8004d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d005      	beq.n	8004d9a <I2C_Master_ADDR+0x2e6>
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d002      	beq.n	8004d9a <I2C_Master_ADDR+0x2e6>
 8004d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d107      	bne.n	8004daa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004da8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004dc6:	e00b      	b.n	8004de0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
}
 8004dde:	e7ff      	b.n	8004de0 <I2C_Master_ADDR+0x32c>
 8004de0:	bf00      	nop
 8004de2:	3744      	adds	r7, #68	@ 0x44
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d02b      	beq.n	8004e5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d114      	bne.n	8004e5c <I2C_SlaveTransmit_TXE+0x72>
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b29      	cmp	r3, #41	@ 0x29
 8004e36:	d111      	bne.n	8004e5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2221      	movs	r2, #33	@ 0x21
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2228      	movs	r2, #40	@ 0x28
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff f9cf 	bl	80041fa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d011      	beq.n	8004e9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d02c      	beq.n	8004f18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d114      	bne.n	8004f18 <I2C_SlaveReceive_RXNE+0x74>
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef2:	d111      	bne.n	8004f18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2222      	movs	r2, #34	@ 0x22
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2228      	movs	r2, #40	@ 0x28
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff f97a 	bl	800420c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f7c:	2b28      	cmp	r3, #40	@ 0x28
 8004f7e:	d125      	bne.n	8004fcc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f8e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	81bb      	strh	r3, [r7, #12]
 8004fae:	e002      	b.n	8004fb6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004fbe:	89ba      	ldrh	r2, [r7, #12]
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff f92a 	bl	800421e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fca:	e00e      	b.n	8004fea <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005002:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005012:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005040:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800504c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005050:	d172      	bne.n	8005138 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b22      	cmp	r3, #34	@ 0x22
 8005056:	d002      	beq.n	800505e <I2C_Slave_STOPF+0x6a>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b2a      	cmp	r3, #42	@ 0x2a
 800505c:	d135      	bne.n	80050ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005090:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe f8ee 	bl	8003278 <HAL_DMA_GetState>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d049      	beq.n	8005136 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	4a69      	ldr	r2, [pc, #420]	@ (800524c <I2C_Slave_STOPF+0x258>)
 80050a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe f86a 	bl	8003188 <HAL_DMA_Abort_IT>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d03d      	beq.n	8005136 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050c4:	4610      	mov	r0, r2
 80050c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c8:	e035      	b.n	8005136 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	f043 0204 	orr.w	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe f8b8 	bl	8003278 <HAL_DMA_GetState>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d014      	beq.n	8005138 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005112:	4a4e      	ldr	r2, [pc, #312]	@ (800524c <I2C_Slave_STOPF+0x258>)
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe f834 	bl	8003188 <HAL_DMA_Abort_IT>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
 8005134:	e000      	b.n	8005138 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005136:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d03e      	beq.n	80051c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b04      	cmp	r3, #4
 800514e:	d112      	bne.n	8005176 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d112      	bne.n	80051aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f843 	bl	8005254 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80051ce:	e039      	b.n	8005244 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d4:	d109      	bne.n	80051ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2228      	movs	r2, #40	@ 0x28
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff f811 	bl	800420c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b28      	cmp	r3, #40	@ 0x28
 80051f4:	d111      	bne.n	800521a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a15      	ldr	r2, [pc, #84]	@ (8005250 <I2C_Slave_STOPF+0x25c>)
 80051fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff f810 	bl	8004238 <HAL_I2C_ListenCpltCallback>
}
 8005218:	e014      	b.n	8005244 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	2b22      	cmp	r3, #34	@ 0x22
 8005220:	d002      	beq.n	8005228 <I2C_Slave_STOPF+0x234>
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b22      	cmp	r3, #34	@ 0x22
 8005226:	d10d      	bne.n	8005244 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fe ffe4 	bl	800420c <HAL_I2C_SlaveRxCpltCallback>
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	0800578d 	.word	0x0800578d
 8005250:	ffff0000 	.word	0xffff0000

08005254 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005262:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800526a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	2b10      	cmp	r3, #16
 8005270:	d002      	beq.n	8005278 <I2C_ITError+0x24>
 8005272:	7bbb      	ldrb	r3, [r7, #14]
 8005274:	2b40      	cmp	r3, #64	@ 0x40
 8005276:	d10a      	bne.n	800528e <I2C_ITError+0x3a>
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b22      	cmp	r3, #34	@ 0x22
 800527c:	d107      	bne.n	800528e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800528c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005294:	2b28      	cmp	r3, #40	@ 0x28
 8005296:	d107      	bne.n	80052a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2228      	movs	r2, #40	@ 0x28
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052a6:	e015      	b.n	80052d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b6:	d00a      	beq.n	80052ce <I2C_ITError+0x7a>
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b60      	cmp	r3, #96	@ 0x60
 80052bc:	d007      	beq.n	80052ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e2:	d162      	bne.n	80053aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d020      	beq.n	8005344 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005306:	4a6a      	ldr	r2, [pc, #424]	@ (80054b0 <I2C_ITError+0x25c>)
 8005308:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd ff3a 	bl	8003188 <HAL_DMA_Abort_IT>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 8089 	beq.w	800542e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800533e:	4610      	mov	r0, r2
 8005340:	4798      	blx	r3
 8005342:	e074      	b.n	800542e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005348:	4a59      	ldr	r2, [pc, #356]	@ (80054b0 <I2C_ITError+0x25c>)
 800534a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd ff19 	bl	8003188 <HAL_DMA_Abort_IT>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d068      	beq.n	800542e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	2b40      	cmp	r3, #64	@ 0x40
 8005368:	d10b      	bne.n	8005382 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053a4:	4610      	mov	r0, r2
 80053a6:	4798      	blx	r3
 80053a8:	e041      	b.n	800542e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b60      	cmp	r3, #96	@ 0x60
 80053b4:	d125      	bne.n	8005402 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ce:	2b40      	cmp	r3, #64	@ 0x40
 80053d0:	d10b      	bne.n	80053ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fe ff40 	bl	8004280 <HAL_I2C_AbortCpltCallback>
 8005400:	e015      	b.n	800542e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b40      	cmp	r3, #64	@ 0x40
 800540e:	d10b      	bne.n	8005428 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fe ff20 	bl	800426e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10e      	bne.n	800545c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d113      	bne.n	80054a8 <I2C_ITError+0x254>
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b28      	cmp	r3, #40	@ 0x28
 8005484:	d110      	bne.n	80054a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a0a      	ldr	r2, [pc, #40]	@ (80054b4 <I2C_ITError+0x260>)
 800548a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fe fec8 	bl	8004238 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	0800578d 	.word	0x0800578d
 80054b4:	ffff0000 	.word	0xffff0000

080054b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	460b      	mov	r3, r1
 80054c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d006      	beq.n	80054e2 <I2C_MasterRequestWrite+0x2a>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d003      	beq.n	80054e2 <I2C_MasterRequestWrite+0x2a>
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054e0:	d108      	bne.n	80054f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e00b      	b.n	800550c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	2b12      	cmp	r3, #18
 80054fa:	d107      	bne.n	800550c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800550a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f9df 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005532:	d103      	bne.n	800553c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e035      	b.n	80055ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005548:	d108      	bne.n	800555c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005558:	611a      	str	r2, [r3, #16]
 800555a:	e01b      	b.n	8005594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800555c:	897b      	ldrh	r3, [r7, #10]
 800555e:	11db      	asrs	r3, r3, #7
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0306 	and.w	r3, r3, #6
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f063 030f 	orn	r3, r3, #15
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	490e      	ldr	r1, [pc, #56]	@ (80055b4 <I2C_MasterRequestWrite+0xfc>)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fa28 	bl	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e010      	b.n	80055ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4907      	ldr	r1, [pc, #28]	@ (80055b8 <I2C_MasterRequestWrite+0x100>)
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fa18 	bl	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	00010008 	.word	0x00010008
 80055b8:	00010002 	.word	0x00010002

080055bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	4608      	mov	r0, r1
 80055c6:	4611      	mov	r1, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	817b      	strh	r3, [r7, #10]
 80055ce:	460b      	mov	r3, r1
 80055d0:	813b      	strh	r3, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f96a 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800561c:	d103      	bne.n	8005626 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005624:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e0aa      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800562a:	897b      	ldrh	r3, [r7, #10]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005638:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	4952      	ldr	r1, [pc, #328]	@ (8005788 <I2C_RequestMemoryRead+0x1cc>)
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f9c5 	bl	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e097      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005668:	6a39      	ldr	r1, [r7, #32]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fa50 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	2b04      	cmp	r3, #4
 800567c:	d107      	bne.n	800568e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e076      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005698:	893b      	ldrh	r3, [r7, #8]
 800569a:	b2da      	uxtb	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	611a      	str	r2, [r3, #16]
 80056a2:	e021      	b.n	80056e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056a4:	893b      	ldrh	r3, [r7, #8]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b4:	6a39      	ldr	r1, [r7, #32]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fa2a 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d107      	bne.n	80056da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e050      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056de:	893b      	ldrh	r3, [r7, #8]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ea:	6a39      	ldr	r1, [r7, #32]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fa0f 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d107      	bne.n	8005710 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e035      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005722:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2200      	movs	r2, #0
 800572c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f8d3 	bl	80058dc <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574a:	d103      	bne.n	8005754 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005752:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e013      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005758:	897b      	ldrh	r3, [r7, #10]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	4906      	ldr	r1, [pc, #24]	@ (8005788 <I2C_RequestMemoryRead+0x1cc>)
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f92e 	bl	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	00010002 	.word	0x00010002

0800578c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057a6:	4b4b      	ldr	r3, [pc, #300]	@ (80058d4 <I2C_DMAAbort+0x148>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	08db      	lsrs	r3, r3, #3
 80057ac:	4a4a      	ldr	r2, [pc, #296]	@ (80058d8 <I2C_DMAAbort+0x14c>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	0a1a      	lsrs	r2, r3, #8
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00da      	lsls	r2, r3, #3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80057d2:	e00a      	b.n	80057ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e8:	d0ea      	beq.n	80057c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	2200      	movs	r2, #0
 8005808:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005818:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582c:	2200      	movs	r2, #0
 800582e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b60      	cmp	r3, #96	@ 0x60
 800585a:	d10e      	bne.n	800587a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7fe fd04 	bl	8004280 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005878:	e027      	b.n	80058ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005880:	2b28      	cmp	r3, #40	@ 0x28
 8005882:	d117      	bne.n	80058b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2228      	movs	r2, #40	@ 0x28
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80058b2:	e007      	b.n	80058c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80058c4:	6978      	ldr	r0, [r7, #20]
 80058c6:	f7fe fcd2 	bl	800426e <HAL_I2C_ErrorCallback>
}
 80058ca:	bf00      	nop
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000000 	.word	0x20000000
 80058d8:	14f8b589 	.word	0x14f8b589

080058dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ec:	e048      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d044      	beq.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f6:	f7fd fad1 	bl	8002e9c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d139      	bne.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10d      	bne.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	43da      	mvns	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	e00c      	b.n	800594c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	43da      	mvns	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	429a      	cmp	r2, r3
 8005950:	d116      	bne.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e023      	b.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d10d      	bne.n	80059a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	43da      	mvns	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	e00c      	b.n	80059c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d093      	beq.n	80058ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059de:	e071      	b.n	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ee:	d123      	bne.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e067      	b.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d041      	beq.n	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fd fa2c 	bl	8002e9c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d136      	bne.n	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d10c      	bne.n	8005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	43da      	mvns	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e00b      	b.n	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	43da      	mvns	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	f043 0220 	orr.w	r2, r3, #32
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e021      	b.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d10c      	bne.n	8005ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	43da      	mvns	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e00b      	b.n	8005b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	43da      	mvns	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f47f af6d 	bne.w	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b1c:	e034      	b.n	8005b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f915 	bl	8005d4e <I2C_IsAcknowledgeFailed>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e034      	b.n	8005b98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d028      	beq.n	8005b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fd f9b1 	bl	8002e9c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11d      	bne.n	8005b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b56:	2b80      	cmp	r3, #128	@ 0x80
 8005b58:	d016      	beq.n	8005b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e007      	b.n	8005b98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b80      	cmp	r3, #128	@ 0x80
 8005b94:	d1c3      	bne.n	8005b1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bac:	e034      	b.n	8005c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f8cd 	bl	8005d4e <I2C_IsAcknowledgeFailed>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e034      	b.n	8005c28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d028      	beq.n	8005c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fd f969 	bl	8002e9c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11d      	bne.n	8005c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d016      	beq.n	8005c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e007      	b.n	8005c28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d1c3      	bne.n	8005bae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c3c:	4b13      	ldr	r3, [pc, #76]	@ (8005c8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	08db      	lsrs	r3, r3, #3
 8005c42:	4a13      	ldr	r2, [pc, #76]	@ (8005c90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	0a1a      	lsrs	r2, r3, #8
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e008      	b.n	8005c80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c7c:	d0e9      	beq.n	8005c52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000000 	.word	0x20000000
 8005c90:	14f8b589 	.word	0x14f8b589

08005c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca0:	e049      	b.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d119      	bne.n	8005ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0210 	mvn.w	r2, #16
 8005cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e030      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7fd f8da 	bl	8002e9c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11d      	bne.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	d016      	beq.n	8005d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e007      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b40      	cmp	r3, #64	@ 0x40
 8005d42:	d1ae      	bne.n	8005ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d64:	d11b      	bne.n	8005d9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	f043 0204 	orr.w	r2, r3, #4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005dba:	d103      	bne.n	8005dc4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dc2:	e007      	b.n	8005dd4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005dcc:	d102      	bne.n	8005dd4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e272      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8087 	beq.w	8005f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e00:	4b92      	ldr	r3, [pc, #584]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d00c      	beq.n	8005e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d112      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
 8005e18:	4b8c      	ldr	r3, [pc, #560]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e24:	d10b      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e26:	4b89      	ldr	r3, [pc, #548]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d06c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x12c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d168      	bne.n	8005f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e24c      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x76>
 8005e48:	4b80      	ldr	r3, [pc, #512]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a7f      	ldr	r2, [pc, #508]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	e02e      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a7a      	ldr	r2, [pc, #488]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b78      	ldr	r3, [pc, #480]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a77      	ldr	r2, [pc, #476]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0xbc>
 8005e82:	4b72      	ldr	r3, [pc, #456]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a71      	ldr	r2, [pc, #452]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6e      	ldr	r2, [pc, #440]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b68      	ldr	r3, [pc, #416]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a67      	ldr	r2, [pc, #412]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc ffee 	bl	8002e9c <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fc ffea 	bl	8002e9c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	@ 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e200      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xe4>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fc ffda 	bl	8002e9c <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc ffd6 	bl	8002e9c <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	@ 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e1ec      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	4b53      	ldr	r3, [pc, #332]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x10c>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d063      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f26:	4b49      	ldr	r3, [pc, #292]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d11c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x18c>
 8005f32:	4b46      	ldr	r3, [pc, #280]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	4b43      	ldr	r3, [pc, #268]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e1c0      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b3d      	ldr	r3, [pc, #244]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4939      	ldr	r1, [pc, #228]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	e03a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f74:	4b36      	ldr	r3, [pc, #216]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7a:	f7fc ff8f 	bl	8002e9c <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f82:	f7fc ff8b 	bl	8002e9c <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e1a1      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	4b2d      	ldr	r3, [pc, #180]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4927      	ldr	r1, [pc, #156]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
 8005fb4:	e015      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb6:	4b26      	ldr	r3, [pc, #152]	@ (8006050 <HAL_RCC_OscConfig+0x270>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fc ff6e 	bl	8002e9c <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fc ff6a 	bl	8002e9c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e180      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d03a      	beq.n	8006064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d019      	beq.n	800602a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff6:	4b17      	ldr	r3, [pc, #92]	@ (8006054 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffc:	f7fc ff4e 	bl	8002e9c <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7fc ff4a 	bl	8002e9c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e160      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <HAL_RCC_OscConfig+0x26c>)
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006022:	2001      	movs	r0, #1
 8006024:	f000 face 	bl	80065c4 <RCC_Delay>
 8006028:	e01c      	b.n	8006064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <HAL_RCC_OscConfig+0x274>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006030:	f7fc ff34 	bl	8002e9c <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006036:	e00f      	b.n	8006058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006038:	f7fc ff30 	bl	8002e9c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d908      	bls.n	8006058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e146      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	42420000 	.word	0x42420000
 8006054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	4b92      	ldr	r3, [pc, #584]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e9      	bne.n	8006038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a6 	beq.w	80061be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006076:	4b8b      	ldr	r3, [pc, #556]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	4b88      	ldr	r3, [pc, #544]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	4a87      	ldr	r2, [pc, #540]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800608c:	61d3      	str	r3, [r2, #28]
 800608e:	4b85      	ldr	r3, [pc, #532]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609e:	4b82      	ldr	r3, [pc, #520]	@ (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d118      	bne.n	80060dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060aa:	4b7f      	ldr	r3, [pc, #508]	@ (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a7e      	ldr	r2, [pc, #504]	@ (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b6:	f7fc fef1 	bl	8002e9c <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060be:	f7fc feed 	bl	8002e9c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b64      	cmp	r3, #100	@ 0x64
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e103      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	4b75      	ldr	r3, [pc, #468]	@ (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d106      	bne.n	80060f2 <HAL_RCC_OscConfig+0x312>
 80060e4:	4b6f      	ldr	r3, [pc, #444]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6213      	str	r3, [r2, #32]
 80060f0:	e02d      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10c      	bne.n	8006114 <HAL_RCC_OscConfig+0x334>
 80060fa:	4b6a      	ldr	r3, [pc, #424]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4a69      	ldr	r2, [pc, #420]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6213      	str	r3, [r2, #32]
 8006106:	4b67      	ldr	r3, [pc, #412]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4a66      	ldr	r2, [pc, #408]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	6213      	str	r3, [r2, #32]
 8006112:	e01c      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b05      	cmp	r3, #5
 800611a:	d10c      	bne.n	8006136 <HAL_RCC_OscConfig+0x356>
 800611c:	4b61      	ldr	r3, [pc, #388]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	4a60      	ldr	r2, [pc, #384]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6213      	str	r3, [r2, #32]
 8006128:	4b5e      	ldr	r3, [pc, #376]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4a5d      	ldr	r2, [pc, #372]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6213      	str	r3, [r2, #32]
 8006134:	e00b      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 8006136:	4b5b      	ldr	r3, [pc, #364]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4a5a      	ldr	r2, [pc, #360]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	6213      	str	r3, [r2, #32]
 8006142:	4b58      	ldr	r3, [pc, #352]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4a57      	ldr	r2, [pc, #348]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006148:	f023 0304 	bic.w	r3, r3, #4
 800614c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7fc fea1 	bl	8002e9c <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7fc fe9d 	bl	8002e9c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0b1      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006174:	4b4b      	ldr	r3, [pc, #300]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ee      	beq.n	800615e <HAL_RCC_OscConfig+0x37e>
 8006180:	e014      	b.n	80061ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006182:	f7fc fe8b 	bl	8002e9c <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006188:	e00a      	b.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618a:	f7fc fe87 	bl	8002e9c <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e09b      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a0:	4b40      	ldr	r3, [pc, #256]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ee      	bne.n	800618a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b2:	4b3c      	ldr	r3, [pc, #240]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4a3b      	ldr	r2, [pc, #236]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8087 	beq.w	80062d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061c8:	4b36      	ldr	r3, [pc, #216]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d061      	beq.n	8006298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d146      	bne.n	800626a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061dc:	4b33      	ldr	r3, [pc, #204]	@ (80062ac <HAL_RCC_OscConfig+0x4cc>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e2:	f7fc fe5b 	bl	8002e9c <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ea:	f7fc fe57 	bl	8002e9c <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e06d      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061fc:	4b29      	ldr	r3, [pc, #164]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006210:	d108      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006212:	4b24      	ldr	r3, [pc, #144]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4921      	ldr	r1, [pc, #132]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006224:	4b1f      	ldr	r3, [pc, #124]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a19      	ldr	r1, [r3, #32]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	430b      	orrs	r3, r1
 8006236:	491b      	ldr	r1, [pc, #108]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800623c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <HAL_RCC_OscConfig+0x4cc>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006242:	f7fc fe2b 	bl	8002e9c <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624a:	f7fc fe27 	bl	8002e9c <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e03d      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800625c:	4b11      	ldr	r3, [pc, #68]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x46a>
 8006268:	e035      	b.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_RCC_OscConfig+0x4cc>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fc fe14 	bl	8002e9c <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006278:	f7fc fe10 	bl	8002e9c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e026      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800628a:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x498>
 8006296:	e01e      	b.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e019      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
 80062ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <HAL_RCC_OscConfig+0x500>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0d0      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b6a      	ldr	r3, [pc, #424]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d910      	bls.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b67      	ldr	r3, [pc, #412]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	4965      	ldr	r1, [pc, #404]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b63      	ldr	r3, [pc, #396]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0b8      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006340:	4b59      	ldr	r3, [pc, #356]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4a58      	ldr	r2, [pc, #352]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800634a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006358:	4b53      	ldr	r3, [pc, #332]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a52      	ldr	r2, [pc, #328]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800635e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006364:	4b50      	ldr	r3, [pc, #320]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	494d      	ldr	r1, [pc, #308]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d040      	beq.n	8006404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b47      	ldr	r3, [pc, #284]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d115      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07f      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a2:	4b41      	ldr	r3, [pc, #260]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e073      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b2:	4b3d      	ldr	r3, [pc, #244]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e06b      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c2:	4b39      	ldr	r3, [pc, #228]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4936      	ldr	r1, [pc, #216]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d4:	f7fc fd62 	bl	8002e9c <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fc fd5e 	bl	8002e9c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e053      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	4b2d      	ldr	r3, [pc, #180]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 020c 	and.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d1eb      	bne.n	80063dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b27      	ldr	r3, [pc, #156]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d210      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 0207 	bic.w	r2, r3, #7
 800641a:	4922      	ldr	r1, [pc, #136]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b20      	ldr	r3, [pc, #128]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e032      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006440:	4b19      	ldr	r3, [pc, #100]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4916      	ldr	r1, [pc, #88]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800645e:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	490e      	ldr	r1, [pc, #56]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800646e:	4313      	orrs	r3, r2
 8006470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006472:	f000 f821 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 8006476:	4602      	mov	r2, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	490a      	ldr	r1, [pc, #40]	@ (80064ac <HAL_RCC_ClockConfig+0x1c8>)
 8006484:	5ccb      	ldrb	r3, [r1, r3]
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <HAL_RCC_ClockConfig+0x1cc>)
 800648c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800648e:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fc fcc0 	bl	8002e18 <HAL_InitTick>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40022000 	.word	0x40022000
 80064a8:	40021000 	.word	0x40021000
 80064ac:	08009e0c 	.word	0x08009e0c
 80064b0:	20000000 	.word	0x20000000
 80064b4:	20000004 	.word	0x20000004

080064b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	2300      	movs	r3, #0
 80064cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064d2:	4b1e      	ldr	r3, [pc, #120]	@ (800654c <HAL_RCC_GetSysClockFreq+0x94>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 030c 	and.w	r3, r3, #12
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d002      	beq.n	80064e8 <HAL_RCC_GetSysClockFreq+0x30>
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d003      	beq.n	80064ee <HAL_RCC_GetSysClockFreq+0x36>
 80064e6:	e027      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064e8:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ea:	613b      	str	r3, [r7, #16]
      break;
 80064ec:	e027      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	0c9b      	lsrs	r3, r3, #18
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	4a17      	ldr	r2, [pc, #92]	@ (8006554 <HAL_RCC_GetSysClockFreq+0x9c>)
 80064f8:	5cd3      	ldrb	r3, [r2, r3]
 80064fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006506:	4b11      	ldr	r3, [pc, #68]	@ (800654c <HAL_RCC_GetSysClockFreq+0x94>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	0c5b      	lsrs	r3, r3, #17
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	4a11      	ldr	r2, [pc, #68]	@ (8006558 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006512:	5cd3      	ldrb	r3, [r2, r3]
 8006514:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a0d      	ldr	r2, [pc, #52]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x98>)
 800651a:	fb03 f202 	mul.w	r2, r3, r2
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e004      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a0c      	ldr	r2, [pc, #48]	@ (800655c <HAL_RCC_GetSysClockFreq+0xa4>)
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	613b      	str	r3, [r7, #16]
      break;
 8006536:	e002      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x98>)
 800653a:	613b      	str	r3, [r7, #16]
      break;
 800653c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653e:	693b      	ldr	r3, [r7, #16]
}
 8006540:	4618      	mov	r0, r3
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40021000 	.word	0x40021000
 8006550:	007a1200 	.word	0x007a1200
 8006554:	08009e24 	.word	0x08009e24
 8006558:	08009e34 	.word	0x08009e34
 800655c:	003d0900 	.word	0x003d0900

08006560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b02      	ldr	r3, [pc, #8]	@ (8006570 <HAL_RCC_GetHCLKFreq+0x10>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	20000000 	.word	0x20000000

08006574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006578:	f7ff fff2 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4903      	ldr	r1, [pc, #12]	@ (8006598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40021000 	.word	0x40021000
 8006598:	08009e1c 	.word	0x08009e1c

0800659c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065a0:	f7ff ffde 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	0adb      	lsrs	r3, r3, #11
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	4903      	ldr	r1, [pc, #12]	@ (80065c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b2:	5ccb      	ldrb	r3, [r1, r3]
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000
 80065c0:	08009e1c 	.word	0x08009e1c

080065c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <RCC_Delay+0x34>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <RCC_Delay+0x38>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0a5b      	lsrs	r3, r3, #9
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065e0:	bf00      	nop
  }
  while (Delay --);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	60fa      	str	r2, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f9      	bne.n	80065e0 <RCC_Delay+0x1c>
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	20000000 	.word	0x20000000
 80065fc:	10624dd3 	.word	0x10624dd3

08006600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e042      	b.n	8006698 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fb f898 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2224      	movs	r2, #36	@ 0x24
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fcd1 	bl	8006fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d121      	bne.n	80066fe <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_UART_Transmit_IT+0x26>
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e01a      	b.n	8006700 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2221      	movs	r2, #33	@ 0x21
 80066e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80066f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e000      	b.n	8006700 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80066fe:	2302      	movs	r3, #2
  }
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr
	...

0800670c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b0ba      	sub	sp, #232	@ 0xe8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006732:	2300      	movs	r3, #0
 8006734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800674a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10f      	bne.n	8006772 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d009      	beq.n	8006772 <HAL_UART_IRQHandler+0x66>
 800675e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fb80 	bl	8006e70 <UART_Receive_IT>
      return;
 8006770:	e25b      	b.n	8006c2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80de 	beq.w	8006938 <HAL_UART_IRQHandler+0x22c>
 800677c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800678c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 80d1 	beq.w	8006938 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_UART_IRQHandler+0xae>
 80067a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b2:	f043 0201 	orr.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <HAL_UART_IRQHandler+0xd2>
 80067c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	f043 0202 	orr.w	r2, r3, #2
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_UART_IRQHandler+0xf6>
 80067ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	f043 0204 	orr.w	r2, r3, #4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d011      	beq.n	8006832 <HAL_UART_IRQHandler+0x126>
 800680e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800681a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682a:	f043 0208 	orr.w	r2, r3, #8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 81f2 	beq.w	8006c20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800683c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_UART_IRQHandler+0x14e>
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fb0b 	bl	8006e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf14      	ite	ne
 8006868:	2301      	movne	r3, #1
 800686a:	2300      	moveq	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_UART_IRQHandler+0x17a>
 800687e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d04f      	beq.n	8006926 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa15 	bl	8006cb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d041      	beq.n	800691e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3314      	adds	r3, #20
 80068a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1d9      	bne.n	800689a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d013      	beq.n	8006916 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f2:	4a7e      	ldr	r2, [pc, #504]	@ (8006aec <HAL_UART_IRQHandler+0x3e0>)
 80068f4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fc fc44 	bl	8003188 <HAL_DMA_Abort_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	e00e      	b.n	8006934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f99c 	bl	8006c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	e00a      	b.n	8006934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f998 	bl	8006c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	e006      	b.n	8006934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f994 	bl	8006c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006932:	e175      	b.n	8006c20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	bf00      	nop
    return;
 8006936:	e173      	b.n	8006c20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	2b01      	cmp	r3, #1
 800693e:	f040 814f 	bne.w	8006be0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8148 	beq.w	8006be0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8141 	beq.w	8006be0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 80b6 	beq.w	8006af0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8145 	beq.w	8006c24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800699e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069a2:	429a      	cmp	r2, r3
 80069a4:	f080 813e 	bcs.w	8006c24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	f000 8088 	beq.w	8006acc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80069e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1d9      	bne.n	80069bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3314      	adds	r3, #20
 8006a0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3314      	adds	r3, #20
 8006a28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a2c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a34:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e1      	bne.n	8006a08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3314      	adds	r3, #20
 8006a4a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3314      	adds	r3, #20
 8006a64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a68:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e3      	bne.n	8006a44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9c:	f023 0310 	bic.w	r3, r3, #16
 8006aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006aae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ab0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ab4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e3      	bne.n	8006a8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fc fb23 	bl	8003112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8bf 	bl	8006c66 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ae8:	e09c      	b.n	8006c24 <HAL_UART_IRQHandler+0x518>
 8006aea:	bf00      	nop
 8006aec:	08006d7b 	.word	0x08006d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 808e 	beq.w	8006c28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8089 	beq.w	8006c28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e3      	bne.n	8006b16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3314      	adds	r3, #20
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b72:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e3      	bne.n	8006b4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006bb8:	61fa      	str	r2, [r7, #28]
 8006bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e3      	bne.n	8006b94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f844 	bl	8006c66 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bde:	e023      	b.n	8006c28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <HAL_UART_IRQHandler+0x4f4>
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f8d2 	bl	8006da2 <UART_Transmit_IT>
    return;
 8006bfe:	e014      	b.n	8006c2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <HAL_UART_IRQHandler+0x51e>
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f911 	bl	8006e40 <UART_EndTransmit_IT>
    return;
 8006c1e:	e004      	b.n	8006c2a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c20:	bf00      	nop
 8006c22:	e002      	b.n	8006c2a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c24:	bf00      	nop
 8006c26:	e000      	b.n	8006c2a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c28:	bf00      	nop
  }
}
 8006c2a:	37e8      	adds	r7, #232	@ 0xe8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr

08006c66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	b2db      	uxtb	r3, r3
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b095      	sub	sp, #84	@ 0x54
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	330c      	adds	r3, #12
 8006cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cde:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e5      	bne.n	8006cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3314      	adds	r3, #20
 8006cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3314      	adds	r3, #20
 8006d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e5      	bne.n	8006cf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d119      	bne.n	8006d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f023 0310 	bic.w	r3, r3, #16
 8006d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d4e:	61ba      	str	r2, [r7, #24]
 8006d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6979      	ldr	r1, [r7, #20]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d70:	bf00      	nop
 8006d72:	3754      	adds	r7, #84	@ 0x54
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff ff5d 	bl	8006c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b21      	cmp	r3, #33	@ 0x21
 8006db4:	d13e      	bne.n	8006e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbe:	d114      	bne.n	8006dea <UART_Transmit_IT+0x48>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d110      	bne.n	8006dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	1c9a      	adds	r2, r3, #2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	621a      	str	r2, [r3, #32]
 8006de8:	e008      	b.n	8006dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6211      	str	r1, [r2, #32]
 8006df4:	781a      	ldrb	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e000      	b.n	8006e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fee5 	bl	8006c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08c      	sub	sp, #48	@ 0x30
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b22      	cmp	r3, #34	@ 0x22
 8006e82:	f040 80ae 	bne.w	8006fe2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	d117      	bne.n	8006ec0 <UART_Receive_IT+0x50>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d113      	bne.n	8006ec0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb8:	1c9a      	adds	r2, r3, #2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ebe:	e026      	b.n	8006f0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed2:	d007      	beq.n	8006ee4 <UART_Receive_IT+0x74>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <UART_Receive_IT+0x82>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e008      	b.n	8006f04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d15d      	bne.n	8006fde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0220 	bic.w	r2, r2, #32
 8006f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d135      	bne.n	8006fd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f023 0310 	bic.w	r3, r3, #16
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8e:	623a      	str	r2, [r7, #32]
 8006f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	69f9      	ldr	r1, [r7, #28]
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d10a      	bne.n	8006fc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fe4a 	bl	8006c66 <HAL_UARTEx_RxEventCallback>
 8006fd2:	e002      	b.n	8006fda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fe34 	bl	8006c42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e002      	b.n	8006fe4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e000      	b.n	8006fe4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
  }
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3730      	adds	r7, #48	@ 0x30
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007026:	f023 030c 	bic.w	r3, r3, #12
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	430b      	orrs	r3, r1
 8007032:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2c      	ldr	r2, [pc, #176]	@ (8007100 <UART_SetConfig+0x114>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007054:	f7ff faa2 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	e002      	b.n	8007062 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800705c:	f7ff fa8a 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8007060:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009a      	lsls	r2, r3, #2
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	4a22      	ldr	r2, [pc, #136]	@ (8007104 <UART_SetConfig+0x118>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	0119      	lsls	r1, r3, #4
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009a      	lsls	r2, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	fbb2 f2f3 	udiv	r2, r2, r3
 8007098:	4b1a      	ldr	r3, [pc, #104]	@ (8007104 <UART_SetConfig+0x118>)
 800709a:	fba3 0302 	umull	r0, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2064      	movs	r0, #100	@ 0x64
 80070a2:	fb00 f303 	mul.w	r3, r0, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	@ 0x32
 80070ac:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <UART_SetConfig+0x118>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070b8:	4419      	add	r1, r3
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009a      	lsls	r2, r3, #2
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80070d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <UART_SetConfig+0x118>)
 80070d2:	fba3 0302 	umull	r0, r3, r3, r2
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	2064      	movs	r0, #100	@ 0x64
 80070da:	fb00 f303 	mul.w	r3, r0, r3
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	3332      	adds	r3, #50	@ 0x32
 80070e4:	4a07      	ldr	r2, [pc, #28]	@ (8007104 <UART_SetConfig+0x118>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	f003 020f 	and.w	r2, r3, #15
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	440a      	add	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40013800 	.word	0x40013800
 8007104:	51eb851f 	.word	0x51eb851f

08007108 <malloc>:
 8007108:	4b02      	ldr	r3, [pc, #8]	@ (8007114 <malloc+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f000 b82d 	b.w	800716c <_malloc_r>
 8007112:	bf00      	nop
 8007114:	20000018 	.word	0x20000018

08007118 <free>:
 8007118:	4b02      	ldr	r3, [pc, #8]	@ (8007124 <free+0xc>)
 800711a:	4601      	mov	r1, r0
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	f001 bd23 	b.w	8008b68 <_free_r>
 8007122:	bf00      	nop
 8007124:	20000018 	.word	0x20000018

08007128 <sbrk_aligned>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4e0f      	ldr	r6, [pc, #60]	@ (8007168 <sbrk_aligned+0x40>)
 800712c:	460c      	mov	r4, r1
 800712e:	6831      	ldr	r1, [r6, #0]
 8007130:	4605      	mov	r5, r0
 8007132:	b911      	cbnz	r1, 800713a <sbrk_aligned+0x12>
 8007134:	f000 fe68 	bl	8007e08 <_sbrk_r>
 8007138:	6030      	str	r0, [r6, #0]
 800713a:	4621      	mov	r1, r4
 800713c:	4628      	mov	r0, r5
 800713e:	f000 fe63 	bl	8007e08 <_sbrk_r>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	d103      	bne.n	800714e <sbrk_aligned+0x26>
 8007146:	f04f 34ff 	mov.w	r4, #4294967295
 800714a:	4620      	mov	r0, r4
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	1cc4      	adds	r4, r0, #3
 8007150:	f024 0403 	bic.w	r4, r4, #3
 8007154:	42a0      	cmp	r0, r4
 8007156:	d0f8      	beq.n	800714a <sbrk_aligned+0x22>
 8007158:	1a21      	subs	r1, r4, r0
 800715a:	4628      	mov	r0, r5
 800715c:	f000 fe54 	bl	8007e08 <_sbrk_r>
 8007160:	3001      	adds	r0, #1
 8007162:	d1f2      	bne.n	800714a <sbrk_aligned+0x22>
 8007164:	e7ef      	b.n	8007146 <sbrk_aligned+0x1e>
 8007166:	bf00      	nop
 8007168:	200002e4 	.word	0x200002e4

0800716c <_malloc_r>:
 800716c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007170:	1ccd      	adds	r5, r1, #3
 8007172:	f025 0503 	bic.w	r5, r5, #3
 8007176:	3508      	adds	r5, #8
 8007178:	2d0c      	cmp	r5, #12
 800717a:	bf38      	it	cc
 800717c:	250c      	movcc	r5, #12
 800717e:	2d00      	cmp	r5, #0
 8007180:	4606      	mov	r6, r0
 8007182:	db01      	blt.n	8007188 <_malloc_r+0x1c>
 8007184:	42a9      	cmp	r1, r5
 8007186:	d904      	bls.n	8007192 <_malloc_r+0x26>
 8007188:	230c      	movs	r3, #12
 800718a:	6033      	str	r3, [r6, #0]
 800718c:	2000      	movs	r0, #0
 800718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007268 <_malloc_r+0xfc>
 8007196:	f000 f869 	bl	800726c <__malloc_lock>
 800719a:	f8d8 3000 	ldr.w	r3, [r8]
 800719e:	461c      	mov	r4, r3
 80071a0:	bb44      	cbnz	r4, 80071f4 <_malloc_r+0x88>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff ffbf 	bl	8007128 <sbrk_aligned>
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	4604      	mov	r4, r0
 80071ae:	d158      	bne.n	8007262 <_malloc_r+0xf6>
 80071b0:	f8d8 4000 	ldr.w	r4, [r8]
 80071b4:	4627      	mov	r7, r4
 80071b6:	2f00      	cmp	r7, #0
 80071b8:	d143      	bne.n	8007242 <_malloc_r+0xd6>
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	d04b      	beq.n	8007256 <_malloc_r+0xea>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	4639      	mov	r1, r7
 80071c2:	4630      	mov	r0, r6
 80071c4:	eb04 0903 	add.w	r9, r4, r3
 80071c8:	f000 fe1e 	bl	8007e08 <_sbrk_r>
 80071cc:	4581      	cmp	r9, r0
 80071ce:	d142      	bne.n	8007256 <_malloc_r+0xea>
 80071d0:	6821      	ldr	r1, [r4, #0]
 80071d2:	4630      	mov	r0, r6
 80071d4:	1a6d      	subs	r5, r5, r1
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7ff ffa6 	bl	8007128 <sbrk_aligned>
 80071dc:	3001      	adds	r0, #1
 80071de:	d03a      	beq.n	8007256 <_malloc_r+0xea>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	442b      	add	r3, r5
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	f8d8 3000 	ldr.w	r3, [r8]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	bb62      	cbnz	r2, 8007248 <_malloc_r+0xdc>
 80071ee:	f8c8 7000 	str.w	r7, [r8]
 80071f2:	e00f      	b.n	8007214 <_malloc_r+0xa8>
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	1b52      	subs	r2, r2, r5
 80071f8:	d420      	bmi.n	800723c <_malloc_r+0xd0>
 80071fa:	2a0b      	cmp	r2, #11
 80071fc:	d917      	bls.n	800722e <_malloc_r+0xc2>
 80071fe:	1961      	adds	r1, r4, r5
 8007200:	42a3      	cmp	r3, r4
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	bf18      	it	ne
 8007206:	6059      	strne	r1, [r3, #4]
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	bf08      	it	eq
 800720c:	f8c8 1000 	streq.w	r1, [r8]
 8007210:	5162      	str	r2, [r4, r5]
 8007212:	604b      	str	r3, [r1, #4]
 8007214:	4630      	mov	r0, r6
 8007216:	f000 f82f 	bl	8007278 <__malloc_unlock>
 800721a:	f104 000b 	add.w	r0, r4, #11
 800721e:	1d23      	adds	r3, r4, #4
 8007220:	f020 0007 	bic.w	r0, r0, #7
 8007224:	1ac2      	subs	r2, r0, r3
 8007226:	bf1c      	itt	ne
 8007228:	1a1b      	subne	r3, r3, r0
 800722a:	50a3      	strne	r3, [r4, r2]
 800722c:	e7af      	b.n	800718e <_malloc_r+0x22>
 800722e:	6862      	ldr	r2, [r4, #4]
 8007230:	42a3      	cmp	r3, r4
 8007232:	bf0c      	ite	eq
 8007234:	f8c8 2000 	streq.w	r2, [r8]
 8007238:	605a      	strne	r2, [r3, #4]
 800723a:	e7eb      	b.n	8007214 <_malloc_r+0xa8>
 800723c:	4623      	mov	r3, r4
 800723e:	6864      	ldr	r4, [r4, #4]
 8007240:	e7ae      	b.n	80071a0 <_malloc_r+0x34>
 8007242:	463c      	mov	r4, r7
 8007244:	687f      	ldr	r7, [r7, #4]
 8007246:	e7b6      	b.n	80071b6 <_malloc_r+0x4a>
 8007248:	461a      	mov	r2, r3
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	42a3      	cmp	r3, r4
 800724e:	d1fb      	bne.n	8007248 <_malloc_r+0xdc>
 8007250:	2300      	movs	r3, #0
 8007252:	6053      	str	r3, [r2, #4]
 8007254:	e7de      	b.n	8007214 <_malloc_r+0xa8>
 8007256:	230c      	movs	r3, #12
 8007258:	4630      	mov	r0, r6
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	f000 f80c 	bl	8007278 <__malloc_unlock>
 8007260:	e794      	b.n	800718c <_malloc_r+0x20>
 8007262:	6005      	str	r5, [r0, #0]
 8007264:	e7d6      	b.n	8007214 <_malloc_r+0xa8>
 8007266:	bf00      	nop
 8007268:	200002e8 	.word	0x200002e8

0800726c <__malloc_lock>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__malloc_lock+0x8>)
 800726e:	f000 be18 	b.w	8007ea2 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	2000042c 	.word	0x2000042c

08007278 <__malloc_unlock>:
 8007278:	4801      	ldr	r0, [pc, #4]	@ (8007280 <__malloc_unlock+0x8>)
 800727a:	f000 be13 	b.w	8007ea4 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	2000042c 	.word	0x2000042c

08007284 <__cvt>:
 8007284:	2b00      	cmp	r3, #0
 8007286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800728a:	461d      	mov	r5, r3
 800728c:	bfbb      	ittet	lt
 800728e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007292:	461d      	movlt	r5, r3
 8007294:	2300      	movge	r3, #0
 8007296:	232d      	movlt	r3, #45	@ 0x2d
 8007298:	b088      	sub	sp, #32
 800729a:	4614      	mov	r4, r2
 800729c:	bfb8      	it	lt
 800729e:	4614      	movlt	r4, r2
 80072a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072a2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80072a4:	7013      	strb	r3, [r2, #0]
 80072a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80072ac:	f023 0820 	bic.w	r8, r3, #32
 80072b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072b4:	d005      	beq.n	80072c2 <__cvt+0x3e>
 80072b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072ba:	d100      	bne.n	80072be <__cvt+0x3a>
 80072bc:	3601      	adds	r6, #1
 80072be:	2302      	movs	r3, #2
 80072c0:	e000      	b.n	80072c4 <__cvt+0x40>
 80072c2:	2303      	movs	r3, #3
 80072c4:	aa07      	add	r2, sp, #28
 80072c6:	9204      	str	r2, [sp, #16]
 80072c8:	aa06      	add	r2, sp, #24
 80072ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80072ce:	e9cd 3600 	strd	r3, r6, [sp]
 80072d2:	4622      	mov	r2, r4
 80072d4:	462b      	mov	r3, r5
 80072d6:	f000 fe7f 	bl	8007fd8 <_dtoa_r>
 80072da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072de:	4607      	mov	r7, r0
 80072e0:	d119      	bne.n	8007316 <__cvt+0x92>
 80072e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072e4:	07db      	lsls	r3, r3, #31
 80072e6:	d50e      	bpl.n	8007306 <__cvt+0x82>
 80072e8:	eb00 0906 	add.w	r9, r0, r6
 80072ec:	2200      	movs	r2, #0
 80072ee:	2300      	movs	r3, #0
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f9 fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80072f8:	b108      	cbz	r0, 80072fe <__cvt+0x7a>
 80072fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80072fe:	2230      	movs	r2, #48	@ 0x30
 8007300:	9b07      	ldr	r3, [sp, #28]
 8007302:	454b      	cmp	r3, r9
 8007304:	d31e      	bcc.n	8007344 <__cvt+0xc0>
 8007306:	4638      	mov	r0, r7
 8007308:	9b07      	ldr	r3, [sp, #28]
 800730a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800730c:	1bdb      	subs	r3, r3, r7
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	b008      	add	sp, #32
 8007312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007316:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800731a:	eb00 0906 	add.w	r9, r0, r6
 800731e:	d1e5      	bne.n	80072ec <__cvt+0x68>
 8007320:	7803      	ldrb	r3, [r0, #0]
 8007322:	2b30      	cmp	r3, #48	@ 0x30
 8007324:	d10a      	bne.n	800733c <__cvt+0xb8>
 8007326:	2200      	movs	r2, #0
 8007328:	2300      	movs	r3, #0
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f9 fb3b 	bl	80009a8 <__aeabi_dcmpeq>
 8007332:	b918      	cbnz	r0, 800733c <__cvt+0xb8>
 8007334:	f1c6 0601 	rsb	r6, r6, #1
 8007338:	f8ca 6000 	str.w	r6, [sl]
 800733c:	f8da 3000 	ldr.w	r3, [sl]
 8007340:	4499      	add	r9, r3
 8007342:	e7d3      	b.n	80072ec <__cvt+0x68>
 8007344:	1c59      	adds	r1, r3, #1
 8007346:	9107      	str	r1, [sp, #28]
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	e7d9      	b.n	8007300 <__cvt+0x7c>

0800734c <__exponent>:
 800734c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800734e:	2900      	cmp	r1, #0
 8007350:	bfb6      	itet	lt
 8007352:	232d      	movlt	r3, #45	@ 0x2d
 8007354:	232b      	movge	r3, #43	@ 0x2b
 8007356:	4249      	neglt	r1, r1
 8007358:	2909      	cmp	r1, #9
 800735a:	7002      	strb	r2, [r0, #0]
 800735c:	7043      	strb	r3, [r0, #1]
 800735e:	dd29      	ble.n	80073b4 <__exponent+0x68>
 8007360:	f10d 0307 	add.w	r3, sp, #7
 8007364:	461d      	mov	r5, r3
 8007366:	270a      	movs	r7, #10
 8007368:	fbb1 f6f7 	udiv	r6, r1, r7
 800736c:	461a      	mov	r2, r3
 800736e:	fb07 1416 	mls	r4, r7, r6, r1
 8007372:	3430      	adds	r4, #48	@ 0x30
 8007374:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007378:	460c      	mov	r4, r1
 800737a:	2c63      	cmp	r4, #99	@ 0x63
 800737c:	4631      	mov	r1, r6
 800737e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007382:	dcf1      	bgt.n	8007368 <__exponent+0x1c>
 8007384:	3130      	adds	r1, #48	@ 0x30
 8007386:	1e94      	subs	r4, r2, #2
 8007388:	f803 1c01 	strb.w	r1, [r3, #-1]
 800738c:	4623      	mov	r3, r4
 800738e:	1c41      	adds	r1, r0, #1
 8007390:	42ab      	cmp	r3, r5
 8007392:	d30a      	bcc.n	80073aa <__exponent+0x5e>
 8007394:	f10d 0309 	add.w	r3, sp, #9
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	42ac      	cmp	r4, r5
 800739c:	bf88      	it	hi
 800739e:	2300      	movhi	r3, #0
 80073a0:	3302      	adds	r3, #2
 80073a2:	4403      	add	r3, r0
 80073a4:	1a18      	subs	r0, r3, r0
 80073a6:	b003      	add	sp, #12
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073b2:	e7ed      	b.n	8007390 <__exponent+0x44>
 80073b4:	2330      	movs	r3, #48	@ 0x30
 80073b6:	3130      	adds	r1, #48	@ 0x30
 80073b8:	7083      	strb	r3, [r0, #2]
 80073ba:	70c1      	strb	r1, [r0, #3]
 80073bc:	1d03      	adds	r3, r0, #4
 80073be:	e7f1      	b.n	80073a4 <__exponent+0x58>

080073c0 <_printf_float>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	b091      	sub	sp, #68	@ 0x44
 80073c6:	460c      	mov	r4, r1
 80073c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80073cc:	4616      	mov	r6, r2
 80073ce:	461f      	mov	r7, r3
 80073d0:	4605      	mov	r5, r0
 80073d2:	f000 fce1 	bl	8007d98 <_localeconv_r>
 80073d6:	6803      	ldr	r3, [r0, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	9308      	str	r3, [sp, #32]
 80073dc:	f7f8 feb8 	bl	8000150 <strlen>
 80073e0:	2300      	movs	r3, #0
 80073e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80073e4:	f8d8 3000 	ldr.w	r3, [r8]
 80073e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80073ea:	3307      	adds	r3, #7
 80073ec:	f023 0307 	bic.w	r3, r3, #7
 80073f0:	f103 0208 	add.w	r2, r3, #8
 80073f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073f8:	f8d4 b000 	ldr.w	fp, [r4]
 80073fc:	f8c8 2000 	str.w	r2, [r8]
 8007400:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007404:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800740a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800740e:	f04f 32ff 	mov.w	r2, #4294967295
 8007412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800741a:	4b9c      	ldr	r3, [pc, #624]	@ (800768c <_printf_float+0x2cc>)
 800741c:	f7f9 faf6 	bl	8000a0c <__aeabi_dcmpun>
 8007420:	bb70      	cbnz	r0, 8007480 <_printf_float+0xc0>
 8007422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007426:	f04f 32ff 	mov.w	r2, #4294967295
 800742a:	4b98      	ldr	r3, [pc, #608]	@ (800768c <_printf_float+0x2cc>)
 800742c:	f7f9 fad0 	bl	80009d0 <__aeabi_dcmple>
 8007430:	bb30      	cbnz	r0, 8007480 <_printf_float+0xc0>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f9 fabf 	bl	80009bc <__aeabi_dcmplt>
 800743e:	b110      	cbz	r0, 8007446 <_printf_float+0x86>
 8007440:	232d      	movs	r3, #45	@ 0x2d
 8007442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007446:	4a92      	ldr	r2, [pc, #584]	@ (8007690 <_printf_float+0x2d0>)
 8007448:	4b92      	ldr	r3, [pc, #584]	@ (8007694 <_printf_float+0x2d4>)
 800744a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800744e:	bf94      	ite	ls
 8007450:	4690      	movls	r8, r2
 8007452:	4698      	movhi	r8, r3
 8007454:	2303      	movs	r3, #3
 8007456:	f04f 0900 	mov.w	r9, #0
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	f02b 0304 	bic.w	r3, fp, #4
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	4633      	mov	r3, r6
 8007464:	4621      	mov	r1, r4
 8007466:	4628      	mov	r0, r5
 8007468:	9700      	str	r7, [sp, #0]
 800746a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800746c:	f000 f9d4 	bl	8007818 <_printf_common>
 8007470:	3001      	adds	r0, #1
 8007472:	f040 8090 	bne.w	8007596 <_printf_float+0x1d6>
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	b011      	add	sp, #68	@ 0x44
 800747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f9 fac0 	bl	8000a0c <__aeabi_dcmpun>
 800748c:	b148      	cbz	r0, 80074a2 <_printf_float+0xe2>
 800748e:	464b      	mov	r3, r9
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfb8      	it	lt
 8007494:	232d      	movlt	r3, #45	@ 0x2d
 8007496:	4a80      	ldr	r2, [pc, #512]	@ (8007698 <_printf_float+0x2d8>)
 8007498:	bfb8      	it	lt
 800749a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800749e:	4b7f      	ldr	r3, [pc, #508]	@ (800769c <_printf_float+0x2dc>)
 80074a0:	e7d3      	b.n	800744a <_printf_float+0x8a>
 80074a2:	6863      	ldr	r3, [r4, #4]
 80074a4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	d13f      	bne.n	800752c <_printf_float+0x16c>
 80074ac:	2306      	movs	r3, #6
 80074ae:	6063      	str	r3, [r4, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	9206      	str	r2, [sp, #24]
 80074ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80074bc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80074c0:	aa0d      	add	r2, sp, #52	@ 0x34
 80074c2:	9203      	str	r2, [sp, #12]
 80074c4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80074c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	4642      	mov	r2, r8
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4628      	mov	r0, r5
 80074d4:	464b      	mov	r3, r9
 80074d6:	910a      	str	r1, [sp, #40]	@ 0x28
 80074d8:	f7ff fed4 	bl	8007284 <__cvt>
 80074dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074de:	4680      	mov	r8, r0
 80074e0:	2947      	cmp	r1, #71	@ 0x47
 80074e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80074e4:	d128      	bne.n	8007538 <_printf_float+0x178>
 80074e6:	1cc8      	adds	r0, r1, #3
 80074e8:	db02      	blt.n	80074f0 <_printf_float+0x130>
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	4299      	cmp	r1, r3
 80074ee:	dd40      	ble.n	8007572 <_printf_float+0x1b2>
 80074f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80074f4:	fa5f fa8a 	uxtb.w	sl, sl
 80074f8:	4652      	mov	r2, sl
 80074fa:	3901      	subs	r1, #1
 80074fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007500:	910d      	str	r1, [sp, #52]	@ 0x34
 8007502:	f7ff ff23 	bl	800734c <__exponent>
 8007506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007508:	4681      	mov	r9, r0
 800750a:	1813      	adds	r3, r2, r0
 800750c:	2a01      	cmp	r2, #1
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	dc02      	bgt.n	8007518 <_printf_float+0x158>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	07d2      	lsls	r2, r2, #31
 8007516:	d501      	bpl.n	800751c <_printf_float+0x15c>
 8007518:	3301      	adds	r3, #1
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007520:	2b00      	cmp	r3, #0
 8007522:	d09e      	beq.n	8007462 <_printf_float+0xa2>
 8007524:	232d      	movs	r3, #45	@ 0x2d
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800752a:	e79a      	b.n	8007462 <_printf_float+0xa2>
 800752c:	2947      	cmp	r1, #71	@ 0x47
 800752e:	d1bf      	bne.n	80074b0 <_printf_float+0xf0>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1bd      	bne.n	80074b0 <_printf_float+0xf0>
 8007534:	2301      	movs	r3, #1
 8007536:	e7ba      	b.n	80074ae <_printf_float+0xee>
 8007538:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800753c:	d9dc      	bls.n	80074f8 <_printf_float+0x138>
 800753e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007542:	d118      	bne.n	8007576 <_printf_float+0x1b6>
 8007544:	2900      	cmp	r1, #0
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	dd0b      	ble.n	8007562 <_printf_float+0x1a2>
 800754a:	6121      	str	r1, [r4, #16]
 800754c:	b913      	cbnz	r3, 8007554 <_printf_float+0x194>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	07d0      	lsls	r0, r2, #31
 8007552:	d502      	bpl.n	800755a <_printf_float+0x19a>
 8007554:	3301      	adds	r3, #1
 8007556:	440b      	add	r3, r1
 8007558:	6123      	str	r3, [r4, #16]
 800755a:	f04f 0900 	mov.w	r9, #0
 800755e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007560:	e7dc      	b.n	800751c <_printf_float+0x15c>
 8007562:	b913      	cbnz	r3, 800756a <_printf_float+0x1aa>
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	07d2      	lsls	r2, r2, #31
 8007568:	d501      	bpl.n	800756e <_printf_float+0x1ae>
 800756a:	3302      	adds	r3, #2
 800756c:	e7f4      	b.n	8007558 <_printf_float+0x198>
 800756e:	2301      	movs	r3, #1
 8007570:	e7f2      	b.n	8007558 <_printf_float+0x198>
 8007572:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007578:	4299      	cmp	r1, r3
 800757a:	db05      	blt.n	8007588 <_printf_float+0x1c8>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	6121      	str	r1, [r4, #16]
 8007580:	07d8      	lsls	r0, r3, #31
 8007582:	d5ea      	bpl.n	800755a <_printf_float+0x19a>
 8007584:	1c4b      	adds	r3, r1, #1
 8007586:	e7e7      	b.n	8007558 <_printf_float+0x198>
 8007588:	2900      	cmp	r1, #0
 800758a:	bfcc      	ite	gt
 800758c:	2201      	movgt	r2, #1
 800758e:	f1c1 0202 	rsble	r2, r1, #2
 8007592:	4413      	add	r3, r2
 8007594:	e7e0      	b.n	8007558 <_printf_float+0x198>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	055a      	lsls	r2, r3, #21
 800759a:	d407      	bmi.n	80075ac <_printf_float+0x1ec>
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	4642      	mov	r2, r8
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	d12b      	bne.n	8007602 <_printf_float+0x242>
 80075aa:	e764      	b.n	8007476 <_printf_float+0xb6>
 80075ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b0:	f240 80dc 	bls.w	800776c <_printf_float+0x3ac>
 80075b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075b8:	2200      	movs	r2, #0
 80075ba:	2300      	movs	r3, #0
 80075bc:	f7f9 f9f4 	bl	80009a8 <__aeabi_dcmpeq>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d033      	beq.n	800762c <_printf_float+0x26c>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	4a35      	ldr	r2, [pc, #212]	@ (80076a0 <_printf_float+0x2e0>)
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af51 	beq.w	8007476 <_printf_float+0xb6>
 80075d4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80075d8:	4543      	cmp	r3, r8
 80075da:	db02      	blt.n	80075e2 <_printf_float+0x222>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	07d8      	lsls	r0, r3, #31
 80075e0:	d50f      	bpl.n	8007602 <_printf_float+0x242>
 80075e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	f43f af42 	beq.w	8007476 <_printf_float+0xb6>
 80075f2:	f04f 0900 	mov.w	r9, #0
 80075f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80075fa:	f104 0a1a 	add.w	sl, r4, #26
 80075fe:	45c8      	cmp	r8, r9
 8007600:	dc09      	bgt.n	8007616 <_printf_float+0x256>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	079b      	lsls	r3, r3, #30
 8007606:	f100 8102 	bmi.w	800780e <_printf_float+0x44e>
 800760a:	68e0      	ldr	r0, [r4, #12]
 800760c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800760e:	4298      	cmp	r0, r3
 8007610:	bfb8      	it	lt
 8007612:	4618      	movlt	r0, r3
 8007614:	e731      	b.n	800747a <_printf_float+0xba>
 8007616:	2301      	movs	r3, #1
 8007618:	4652      	mov	r2, sl
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f af28 	beq.w	8007476 <_printf_float+0xb6>
 8007626:	f109 0901 	add.w	r9, r9, #1
 800762a:	e7e8      	b.n	80075fe <_printf_float+0x23e>
 800762c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	dc38      	bgt.n	80076a4 <_printf_float+0x2e4>
 8007632:	2301      	movs	r3, #1
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	4a19      	ldr	r2, [pc, #100]	@ (80076a0 <_printf_float+0x2e0>)
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	f43f af1a 	beq.w	8007476 <_printf_float+0xb6>
 8007642:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007646:	ea59 0303 	orrs.w	r3, r9, r3
 800764a:	d102      	bne.n	8007652 <_printf_float+0x292>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	d5d7      	bpl.n	8007602 <_printf_float+0x242>
 8007652:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f af0a 	beq.w	8007476 <_printf_float+0xb6>
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	f104 0b1a 	add.w	fp, r4, #26
 800766a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800766c:	425b      	negs	r3, r3
 800766e:	4553      	cmp	r3, sl
 8007670:	dc01      	bgt.n	8007676 <_printf_float+0x2b6>
 8007672:	464b      	mov	r3, r9
 8007674:	e793      	b.n	800759e <_printf_float+0x1de>
 8007676:	2301      	movs	r3, #1
 8007678:	465a      	mov	r2, fp
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f aef8 	beq.w	8007476 <_printf_float+0xb6>
 8007686:	f10a 0a01 	add.w	sl, sl, #1
 800768a:	e7ee      	b.n	800766a <_printf_float+0x2aa>
 800768c:	7fefffff 	.word	0x7fefffff
 8007690:	08009e36 	.word	0x08009e36
 8007694:	08009e3a 	.word	0x08009e3a
 8007698:	08009e3e 	.word	0x08009e3e
 800769c:	08009e42 	.word	0x08009e42
 80076a0:	08009e46 	.word	0x08009e46
 80076a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076a6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80076aa:	4553      	cmp	r3, sl
 80076ac:	bfa8      	it	ge
 80076ae:	4653      	movge	r3, sl
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	4699      	mov	r9, r3
 80076b4:	dc36      	bgt.n	8007724 <_printf_float+0x364>
 80076b6:	f04f 0b00 	mov.w	fp, #0
 80076ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076be:	f104 021a 	add.w	r2, r4, #26
 80076c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c6:	eba3 0309 	sub.w	r3, r3, r9
 80076ca:	455b      	cmp	r3, fp
 80076cc:	dc31      	bgt.n	8007732 <_printf_float+0x372>
 80076ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d0:	459a      	cmp	sl, r3
 80076d2:	dc3a      	bgt.n	800774a <_printf_float+0x38a>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	07da      	lsls	r2, r3, #31
 80076d8:	d437      	bmi.n	800774a <_printf_float+0x38a>
 80076da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076dc:	ebaa 0903 	sub.w	r9, sl, r3
 80076e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e2:	ebaa 0303 	sub.w	r3, sl, r3
 80076e6:	4599      	cmp	r9, r3
 80076e8:	bfa8      	it	ge
 80076ea:	4699      	movge	r9, r3
 80076ec:	f1b9 0f00 	cmp.w	r9, #0
 80076f0:	dc33      	bgt.n	800775a <_printf_float+0x39a>
 80076f2:	f04f 0800 	mov.w	r8, #0
 80076f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076fa:	f104 0b1a 	add.w	fp, r4, #26
 80076fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007700:	ebaa 0303 	sub.w	r3, sl, r3
 8007704:	eba3 0309 	sub.w	r3, r3, r9
 8007708:	4543      	cmp	r3, r8
 800770a:	f77f af7a 	ble.w	8007602 <_printf_float+0x242>
 800770e:	2301      	movs	r3, #1
 8007710:	465a      	mov	r2, fp
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f aeac 	beq.w	8007476 <_printf_float+0xb6>
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	e7ec      	b.n	80076fe <_printf_float+0x33e>
 8007724:	4642      	mov	r2, r8
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	d1c2      	bne.n	80076b6 <_printf_float+0x2f6>
 8007730:	e6a1      	b.n	8007476 <_printf_float+0xb6>
 8007732:	2301      	movs	r3, #1
 8007734:	4631      	mov	r1, r6
 8007736:	4628      	mov	r0, r5
 8007738:	920a      	str	r2, [sp, #40]	@ 0x28
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f ae9a 	beq.w	8007476 <_printf_float+0xb6>
 8007742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007744:	f10b 0b01 	add.w	fp, fp, #1
 8007748:	e7bb      	b.n	80076c2 <_printf_float+0x302>
 800774a:	4631      	mov	r1, r6
 800774c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007750:	4628      	mov	r0, r5
 8007752:	47b8      	blx	r7
 8007754:	3001      	adds	r0, #1
 8007756:	d1c0      	bne.n	80076da <_printf_float+0x31a>
 8007758:	e68d      	b.n	8007476 <_printf_float+0xb6>
 800775a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800775c:	464b      	mov	r3, r9
 800775e:	4631      	mov	r1, r6
 8007760:	4628      	mov	r0, r5
 8007762:	4442      	add	r2, r8
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	d1c3      	bne.n	80076f2 <_printf_float+0x332>
 800776a:	e684      	b.n	8007476 <_printf_float+0xb6>
 800776c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007770:	f1ba 0f01 	cmp.w	sl, #1
 8007774:	dc01      	bgt.n	800777a <_printf_float+0x3ba>
 8007776:	07db      	lsls	r3, r3, #31
 8007778:	d536      	bpl.n	80077e8 <_printf_float+0x428>
 800777a:	2301      	movs	r3, #1
 800777c:	4642      	mov	r2, r8
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f ae76 	beq.w	8007476 <_printf_float+0xb6>
 800778a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f ae6e 	beq.w	8007476 <_printf_float+0xb6>
 800779a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077a6:	f7f9 f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80077aa:	b9c0      	cbnz	r0, 80077de <_printf_float+0x41e>
 80077ac:	4653      	mov	r3, sl
 80077ae:	f108 0201 	add.w	r2, r8, #1
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	d10c      	bne.n	80077d6 <_printf_float+0x416>
 80077bc:	e65b      	b.n	8007476 <_printf_float+0xb6>
 80077be:	2301      	movs	r3, #1
 80077c0:	465a      	mov	r2, fp
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae54 	beq.w	8007476 <_printf_float+0xb6>
 80077ce:	f108 0801 	add.w	r8, r8, #1
 80077d2:	45d0      	cmp	r8, sl
 80077d4:	dbf3      	blt.n	80077be <_printf_float+0x3fe>
 80077d6:	464b      	mov	r3, r9
 80077d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077dc:	e6e0      	b.n	80075a0 <_printf_float+0x1e0>
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	f104 0b1a 	add.w	fp, r4, #26
 80077e6:	e7f4      	b.n	80077d2 <_printf_float+0x412>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4642      	mov	r2, r8
 80077ec:	e7e1      	b.n	80077b2 <_printf_float+0x3f2>
 80077ee:	2301      	movs	r3, #1
 80077f0:	464a      	mov	r2, r9
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f ae3c 	beq.w	8007476 <_printf_float+0xb6>
 80077fe:	f108 0801 	add.w	r8, r8, #1
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007806:	1a5b      	subs	r3, r3, r1
 8007808:	4543      	cmp	r3, r8
 800780a:	dcf0      	bgt.n	80077ee <_printf_float+0x42e>
 800780c:	e6fd      	b.n	800760a <_printf_float+0x24a>
 800780e:	f04f 0800 	mov.w	r8, #0
 8007812:	f104 0919 	add.w	r9, r4, #25
 8007816:	e7f4      	b.n	8007802 <_printf_float+0x442>

08007818 <_printf_common>:
 8007818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	4616      	mov	r6, r2
 800781e:	4698      	mov	r8, r3
 8007820:	688a      	ldr	r2, [r1, #8]
 8007822:	690b      	ldr	r3, [r1, #16]
 8007824:	4607      	mov	r7, r0
 8007826:	4293      	cmp	r3, r2
 8007828:	bfb8      	it	lt
 800782a:	4613      	movlt	r3, r2
 800782c:	6033      	str	r3, [r6, #0]
 800782e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007832:	460c      	mov	r4, r1
 8007834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007838:	b10a      	cbz	r2, 800783e <_printf_common+0x26>
 800783a:	3301      	adds	r3, #1
 800783c:	6033      	str	r3, [r6, #0]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	0699      	lsls	r1, r3, #26
 8007842:	bf42      	ittt	mi
 8007844:	6833      	ldrmi	r3, [r6, #0]
 8007846:	3302      	addmi	r3, #2
 8007848:	6033      	strmi	r3, [r6, #0]
 800784a:	6825      	ldr	r5, [r4, #0]
 800784c:	f015 0506 	ands.w	r5, r5, #6
 8007850:	d106      	bne.n	8007860 <_printf_common+0x48>
 8007852:	f104 0a19 	add.w	sl, r4, #25
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	6832      	ldr	r2, [r6, #0]
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	42ab      	cmp	r3, r5
 800785e:	dc2b      	bgt.n	80078b8 <_printf_common+0xa0>
 8007860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007864:	6822      	ldr	r2, [r4, #0]
 8007866:	3b00      	subs	r3, #0
 8007868:	bf18      	it	ne
 800786a:	2301      	movne	r3, #1
 800786c:	0692      	lsls	r2, r2, #26
 800786e:	d430      	bmi.n	80078d2 <_printf_common+0xba>
 8007870:	4641      	mov	r1, r8
 8007872:	4638      	mov	r0, r7
 8007874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007878:	47c8      	blx	r9
 800787a:	3001      	adds	r0, #1
 800787c:	d023      	beq.n	80078c6 <_printf_common+0xae>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	2b04      	cmp	r3, #4
 8007888:	bf14      	ite	ne
 800788a:	2500      	movne	r5, #0
 800788c:	6833      	ldreq	r3, [r6, #0]
 800788e:	f04f 0600 	mov.w	r6, #0
 8007892:	bf08      	it	eq
 8007894:	68e5      	ldreq	r5, [r4, #12]
 8007896:	f104 041a 	add.w	r4, r4, #26
 800789a:	bf08      	it	eq
 800789c:	1aed      	subeq	r5, r5, r3
 800789e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078a2:	bf08      	it	eq
 80078a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bfc4      	itt	gt
 80078ac:	1a9b      	subgt	r3, r3, r2
 80078ae:	18ed      	addgt	r5, r5, r3
 80078b0:	42b5      	cmp	r5, r6
 80078b2:	d11a      	bne.n	80078ea <_printf_common+0xd2>
 80078b4:	2000      	movs	r0, #0
 80078b6:	e008      	b.n	80078ca <_printf_common+0xb2>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4652      	mov	r2, sl
 80078bc:	4641      	mov	r1, r8
 80078be:	4638      	mov	r0, r7
 80078c0:	47c8      	blx	r9
 80078c2:	3001      	adds	r0, #1
 80078c4:	d103      	bne.n	80078ce <_printf_common+0xb6>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ce:	3501      	adds	r5, #1
 80078d0:	e7c1      	b.n	8007856 <_printf_common+0x3e>
 80078d2:	2030      	movs	r0, #48	@ 0x30
 80078d4:	18e1      	adds	r1, r4, r3
 80078d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078e0:	4422      	add	r2, r4
 80078e2:	3302      	adds	r3, #2
 80078e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e8:	e7c2      	b.n	8007870 <_printf_common+0x58>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4622      	mov	r2, r4
 80078ee:	4641      	mov	r1, r8
 80078f0:	4638      	mov	r0, r7
 80078f2:	47c8      	blx	r9
 80078f4:	3001      	adds	r0, #1
 80078f6:	d0e6      	beq.n	80078c6 <_printf_common+0xae>
 80078f8:	3601      	adds	r6, #1
 80078fa:	e7d9      	b.n	80078b0 <_printf_common+0x98>

080078fc <_printf_i>:
 80078fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	7e0f      	ldrb	r7, [r1, #24]
 8007902:	4691      	mov	r9, r2
 8007904:	2f78      	cmp	r7, #120	@ 0x78
 8007906:	4680      	mov	r8, r0
 8007908:	460c      	mov	r4, r1
 800790a:	469a      	mov	sl, r3
 800790c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800790e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007912:	d807      	bhi.n	8007924 <_printf_i+0x28>
 8007914:	2f62      	cmp	r7, #98	@ 0x62
 8007916:	d80a      	bhi.n	800792e <_printf_i+0x32>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f000 80d3 	beq.w	8007ac4 <_printf_i+0x1c8>
 800791e:	2f58      	cmp	r7, #88	@ 0x58
 8007920:	f000 80ba 	beq.w	8007a98 <_printf_i+0x19c>
 8007924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800792c:	e03a      	b.n	80079a4 <_printf_i+0xa8>
 800792e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007932:	2b15      	cmp	r3, #21
 8007934:	d8f6      	bhi.n	8007924 <_printf_i+0x28>
 8007936:	a101      	add	r1, pc, #4	@ (adr r1, 800793c <_printf_i+0x40>)
 8007938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800793c:	08007995 	.word	0x08007995
 8007940:	080079a9 	.word	0x080079a9
 8007944:	08007925 	.word	0x08007925
 8007948:	08007925 	.word	0x08007925
 800794c:	08007925 	.word	0x08007925
 8007950:	08007925 	.word	0x08007925
 8007954:	080079a9 	.word	0x080079a9
 8007958:	08007925 	.word	0x08007925
 800795c:	08007925 	.word	0x08007925
 8007960:	08007925 	.word	0x08007925
 8007964:	08007925 	.word	0x08007925
 8007968:	08007aab 	.word	0x08007aab
 800796c:	080079d3 	.word	0x080079d3
 8007970:	08007a65 	.word	0x08007a65
 8007974:	08007925 	.word	0x08007925
 8007978:	08007925 	.word	0x08007925
 800797c:	08007acd 	.word	0x08007acd
 8007980:	08007925 	.word	0x08007925
 8007984:	080079d3 	.word	0x080079d3
 8007988:	08007925 	.word	0x08007925
 800798c:	08007925 	.word	0x08007925
 8007990:	08007a6d 	.word	0x08007a6d
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6032      	str	r2, [r6, #0]
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a4:	2301      	movs	r3, #1
 80079a6:	e09e      	b.n	8007ae6 <_printf_i+0x1ea>
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	6820      	ldr	r0, [r4, #0]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	6031      	str	r1, [r6, #0]
 80079b0:	0606      	lsls	r6, r0, #24
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0xbc>
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	e003      	b.n	80079c0 <_printf_i+0xc4>
 80079b8:	0645      	lsls	r5, r0, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0xb8>
 80079bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	da03      	bge.n	80079cc <_printf_i+0xd0>
 80079c4:	232d      	movs	r3, #45	@ 0x2d
 80079c6:	426d      	negs	r5, r5
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079cc:	230a      	movs	r3, #10
 80079ce:	4859      	ldr	r0, [pc, #356]	@ (8007b34 <_printf_i+0x238>)
 80079d0:	e011      	b.n	80079f6 <_printf_i+0xfa>
 80079d2:	6821      	ldr	r1, [r4, #0]
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	0608      	lsls	r0, r1, #24
 80079d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079dc:	d402      	bmi.n	80079e4 <_printf_i+0xe8>
 80079de:	0649      	lsls	r1, r1, #25
 80079e0:	bf48      	it	mi
 80079e2:	b2ad      	uxthmi	r5, r5
 80079e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	bf14      	ite	ne
 80079ea:	230a      	movne	r3, #10
 80079ec:	2308      	moveq	r3, #8
 80079ee:	4851      	ldr	r0, [pc, #324]	@ (8007b34 <_printf_i+0x238>)
 80079f0:	2100      	movs	r1, #0
 80079f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f6:	6866      	ldr	r6, [r4, #4]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	bfa8      	it	ge
 80079fc:	6821      	ldrge	r1, [r4, #0]
 80079fe:	60a6      	str	r6, [r4, #8]
 8007a00:	bfa4      	itt	ge
 8007a02:	f021 0104 	bicge.w	r1, r1, #4
 8007a06:	6021      	strge	r1, [r4, #0]
 8007a08:	b90d      	cbnz	r5, 8007a0e <_printf_i+0x112>
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	d04b      	beq.n	8007aa6 <_printf_i+0x1aa>
 8007a0e:	4616      	mov	r6, r2
 8007a10:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a14:	fb03 5711 	mls	r7, r3, r1, r5
 8007a18:	5dc7      	ldrb	r7, [r0, r7]
 8007a1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a1e:	462f      	mov	r7, r5
 8007a20:	42bb      	cmp	r3, r7
 8007a22:	460d      	mov	r5, r1
 8007a24:	d9f4      	bls.n	8007a10 <_printf_i+0x114>
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d10b      	bne.n	8007a42 <_printf_i+0x146>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	07df      	lsls	r7, r3, #31
 8007a2e:	d508      	bpl.n	8007a42 <_printf_i+0x146>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	6861      	ldr	r1, [r4, #4]
 8007a34:	4299      	cmp	r1, r3
 8007a36:	bfde      	ittt	le
 8007a38:	2330      	movle	r3, #48	@ 0x30
 8007a3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a42:	1b92      	subs	r2, r2, r6
 8007a44:	6122      	str	r2, [r4, #16]
 8007a46:	464b      	mov	r3, r9
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f8cd a000 	str.w	sl, [sp]
 8007a50:	aa03      	add	r2, sp, #12
 8007a52:	f7ff fee1 	bl	8007818 <_printf_common>
 8007a56:	3001      	adds	r0, #1
 8007a58:	d14a      	bne.n	8007af0 <_printf_i+0x1f4>
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	b004      	add	sp, #16
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	f043 0320 	orr.w	r3, r3, #32
 8007a6a:	6023      	str	r3, [r4, #0]
 8007a6c:	2778      	movs	r7, #120	@ 0x78
 8007a6e:	4832      	ldr	r0, [pc, #200]	@ (8007b38 <_printf_i+0x23c>)
 8007a70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	6831      	ldr	r1, [r6, #0]
 8007a78:	061f      	lsls	r7, r3, #24
 8007a7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a7e:	d402      	bmi.n	8007a86 <_printf_i+0x18a>
 8007a80:	065f      	lsls	r7, r3, #25
 8007a82:	bf48      	it	mi
 8007a84:	b2ad      	uxthmi	r5, r5
 8007a86:	6031      	str	r1, [r6, #0]
 8007a88:	07d9      	lsls	r1, r3, #31
 8007a8a:	bf44      	itt	mi
 8007a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007a90:	6023      	strmi	r3, [r4, #0]
 8007a92:	b11d      	cbz	r5, 8007a9c <_printf_i+0x1a0>
 8007a94:	2310      	movs	r3, #16
 8007a96:	e7ab      	b.n	80079f0 <_printf_i+0xf4>
 8007a98:	4826      	ldr	r0, [pc, #152]	@ (8007b34 <_printf_i+0x238>)
 8007a9a:	e7e9      	b.n	8007a70 <_printf_i+0x174>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	f023 0320 	bic.w	r3, r3, #32
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	e7f6      	b.n	8007a94 <_printf_i+0x198>
 8007aa6:	4616      	mov	r6, r2
 8007aa8:	e7bd      	b.n	8007a26 <_printf_i+0x12a>
 8007aaa:	6833      	ldr	r3, [r6, #0]
 8007aac:	6825      	ldr	r5, [r4, #0]
 8007aae:	1d18      	adds	r0, r3, #4
 8007ab0:	6961      	ldr	r1, [r4, #20]
 8007ab2:	6030      	str	r0, [r6, #0]
 8007ab4:	062e      	lsls	r6, r5, #24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	d501      	bpl.n	8007abe <_printf_i+0x1c2>
 8007aba:	6019      	str	r1, [r3, #0]
 8007abc:	e002      	b.n	8007ac4 <_printf_i+0x1c8>
 8007abe:	0668      	lsls	r0, r5, #25
 8007ac0:	d5fb      	bpl.n	8007aba <_printf_i+0x1be>
 8007ac2:	8019      	strh	r1, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4616      	mov	r6, r2
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	e7bc      	b.n	8007a46 <_printf_i+0x14a>
 8007acc:	6833      	ldr	r3, [r6, #0]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	1d1a      	adds	r2, r3, #4
 8007ad2:	6032      	str	r2, [r6, #0]
 8007ad4:	681e      	ldr	r6, [r3, #0]
 8007ad6:	6862      	ldr	r2, [r4, #4]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 f9e4 	bl	8007ea6 <memchr>
 8007ade:	b108      	cbz	r0, 8007ae4 <_printf_i+0x1e8>
 8007ae0:	1b80      	subs	r0, r0, r6
 8007ae2:	6060      	str	r0, [r4, #4]
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aee:	e7aa      	b.n	8007a46 <_printf_i+0x14a>
 8007af0:	4632      	mov	r2, r6
 8007af2:	4649      	mov	r1, r9
 8007af4:	4640      	mov	r0, r8
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	47d0      	blx	sl
 8007afa:	3001      	adds	r0, #1
 8007afc:	d0ad      	beq.n	8007a5a <_printf_i+0x15e>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	079b      	lsls	r3, r3, #30
 8007b02:	d413      	bmi.n	8007b2c <_printf_i+0x230>
 8007b04:	68e0      	ldr	r0, [r4, #12]
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	4618      	movlt	r0, r3
 8007b0e:	e7a6      	b.n	8007a5e <_printf_i+0x162>
 8007b10:	2301      	movs	r3, #1
 8007b12:	4632      	mov	r2, r6
 8007b14:	4649      	mov	r1, r9
 8007b16:	4640      	mov	r0, r8
 8007b18:	47d0      	blx	sl
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d09d      	beq.n	8007a5a <_printf_i+0x15e>
 8007b1e:	3501      	adds	r5, #1
 8007b20:	68e3      	ldr	r3, [r4, #12]
 8007b22:	9903      	ldr	r1, [sp, #12]
 8007b24:	1a5b      	subs	r3, r3, r1
 8007b26:	42ab      	cmp	r3, r5
 8007b28:	dcf2      	bgt.n	8007b10 <_printf_i+0x214>
 8007b2a:	e7eb      	b.n	8007b04 <_printf_i+0x208>
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	f104 0619 	add.w	r6, r4, #25
 8007b32:	e7f5      	b.n	8007b20 <_printf_i+0x224>
 8007b34:	08009e48 	.word	0x08009e48
 8007b38:	08009e59 	.word	0x08009e59

08007b3c <std>:
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
 8007b42:	e9c0 3300 	strd	r3, r3, [r0]
 8007b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4a:	6083      	str	r3, [r0, #8]
 8007b4c:	8181      	strh	r1, [r0, #12]
 8007b4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b50:	81c2      	strh	r2, [r0, #14]
 8007b52:	6183      	str	r3, [r0, #24]
 8007b54:	4619      	mov	r1, r3
 8007b56:	2208      	movs	r2, #8
 8007b58:	305c      	adds	r0, #92	@ 0x5c
 8007b5a:	f000 f914 	bl	8007d86 <memset>
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <std+0x58>)
 8007b60:	6224      	str	r4, [r4, #32]
 8007b62:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b64:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <std+0x5c>)
 8007b66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b68:	4b0c      	ldr	r3, [pc, #48]	@ (8007b9c <std+0x60>)
 8007b6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba0 <std+0x64>)
 8007b6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <std+0x68>)
 8007b72:	429c      	cmp	r4, r3
 8007b74:	d006      	beq.n	8007b84 <std+0x48>
 8007b76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b7a:	4294      	cmp	r4, r2
 8007b7c:	d002      	beq.n	8007b84 <std+0x48>
 8007b7e:	33d0      	adds	r3, #208	@ 0xd0
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d105      	bne.n	8007b90 <std+0x54>
 8007b84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	f000 b988 	b.w	8007ea0 <__retarget_lock_init_recursive>
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08007d01 	.word	0x08007d01
 8007b98:	08007d23 	.word	0x08007d23
 8007b9c:	08007d5b 	.word	0x08007d5b
 8007ba0:	08007d7f 	.word	0x08007d7f
 8007ba4:	200002ec 	.word	0x200002ec

08007ba8 <stdio_exit_handler>:
 8007ba8:	4a02      	ldr	r2, [pc, #8]	@ (8007bb4 <stdio_exit_handler+0xc>)
 8007baa:	4903      	ldr	r1, [pc, #12]	@ (8007bb8 <stdio_exit_handler+0x10>)
 8007bac:	4803      	ldr	r0, [pc, #12]	@ (8007bbc <stdio_exit_handler+0x14>)
 8007bae:	f000 b869 	b.w	8007c84 <_fwalk_sglue>
 8007bb2:	bf00      	nop
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	080096a9 	.word	0x080096a9
 8007bbc:	2000001c 	.word	0x2000001c

08007bc0 <cleanup_stdio>:
 8007bc0:	6841      	ldr	r1, [r0, #4]
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <cleanup_stdio+0x34>)
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	4604      	mov	r4, r0
 8007bca:	d001      	beq.n	8007bd0 <cleanup_stdio+0x10>
 8007bcc:	f001 fd6c 	bl	80096a8 <_fflush_r>
 8007bd0:	68a1      	ldr	r1, [r4, #8]
 8007bd2:	4b09      	ldr	r3, [pc, #36]	@ (8007bf8 <cleanup_stdio+0x38>)
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d002      	beq.n	8007bde <cleanup_stdio+0x1e>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f001 fd65 	bl	80096a8 <_fflush_r>
 8007bde:	68e1      	ldr	r1, [r4, #12]
 8007be0:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <cleanup_stdio+0x3c>)
 8007be2:	4299      	cmp	r1, r3
 8007be4:	d004      	beq.n	8007bf0 <cleanup_stdio+0x30>
 8007be6:	4620      	mov	r0, r4
 8007be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bec:	f001 bd5c 	b.w	80096a8 <_fflush_r>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200002ec 	.word	0x200002ec
 8007bf8:	20000354 	.word	0x20000354
 8007bfc:	200003bc 	.word	0x200003bc

08007c00 <global_stdio_init.part.0>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <global_stdio_init.part.0+0x30>)
 8007c04:	4c0b      	ldr	r4, [pc, #44]	@ (8007c34 <global_stdio_init.part.0+0x34>)
 8007c06:	4a0c      	ldr	r2, [pc, #48]	@ (8007c38 <global_stdio_init.part.0+0x38>)
 8007c08:	4620      	mov	r0, r4
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7ff ff94 	bl	8007b3c <std>
 8007c14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2109      	movs	r1, #9
 8007c1c:	f7ff ff8e 	bl	8007b3c <std>
 8007c20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c24:	2202      	movs	r2, #2
 8007c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2a:	2112      	movs	r1, #18
 8007c2c:	f7ff bf86 	b.w	8007b3c <std>
 8007c30:	20000424 	.word	0x20000424
 8007c34:	200002ec 	.word	0x200002ec
 8007c38:	08007ba9 	.word	0x08007ba9

08007c3c <__sfp_lock_acquire>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	@ (8007c44 <__sfp_lock_acquire+0x8>)
 8007c3e:	f000 b930 	b.w	8007ea2 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	2000042d 	.word	0x2000042d

08007c48 <__sfp_lock_release>:
 8007c48:	4801      	ldr	r0, [pc, #4]	@ (8007c50 <__sfp_lock_release+0x8>)
 8007c4a:	f000 b92b 	b.w	8007ea4 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	2000042d 	.word	0x2000042d

08007c54 <__sinit>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	f7ff fff0 	bl	8007c3c <__sfp_lock_acquire>
 8007c5c:	6a23      	ldr	r3, [r4, #32]
 8007c5e:	b11b      	cbz	r3, 8007c68 <__sinit+0x14>
 8007c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c64:	f7ff bff0 	b.w	8007c48 <__sfp_lock_release>
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <__sinit+0x28>)
 8007c6a:	6223      	str	r3, [r4, #32]
 8007c6c:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <__sinit+0x2c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1f5      	bne.n	8007c60 <__sinit+0xc>
 8007c74:	f7ff ffc4 	bl	8007c00 <global_stdio_init.part.0>
 8007c78:	e7f2      	b.n	8007c60 <__sinit+0xc>
 8007c7a:	bf00      	nop
 8007c7c:	08007bc1 	.word	0x08007bc1
 8007c80:	20000424 	.word	0x20000424

08007c84 <_fwalk_sglue>:
 8007c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4688      	mov	r8, r1
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	2600      	movs	r6, #0
 8007c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c94:	f1b9 0901 	subs.w	r9, r9, #1
 8007c98:	d505      	bpl.n	8007ca6 <_fwalk_sglue+0x22>
 8007c9a:	6824      	ldr	r4, [r4, #0]
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	d1f7      	bne.n	8007c90 <_fwalk_sglue+0xc>
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d907      	bls.n	8007cbc <_fwalk_sglue+0x38>
 8007cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	d003      	beq.n	8007cbc <_fwalk_sglue+0x38>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c0      	blx	r8
 8007cba:	4306      	orrs	r6, r0
 8007cbc:	3568      	adds	r5, #104	@ 0x68
 8007cbe:	e7e9      	b.n	8007c94 <_fwalk_sglue+0x10>

08007cc0 <siprintf>:
 8007cc0:	b40e      	push	{r1, r2, r3}
 8007cc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007cc6:	b500      	push	{lr}
 8007cc8:	b09c      	sub	sp, #112	@ 0x70
 8007cca:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	9006      	str	r0, [sp, #24]
 8007cd0:	9107      	str	r1, [sp, #28]
 8007cd2:	9104      	str	r1, [sp, #16]
 8007cd4:	4808      	ldr	r0, [pc, #32]	@ (8007cf8 <siprintf+0x38>)
 8007cd6:	4909      	ldr	r1, [pc, #36]	@ (8007cfc <siprintf+0x3c>)
 8007cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	6800      	ldr	r0, [r0, #0]
 8007ce0:	a902      	add	r1, sp, #8
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	f001 fb64 	bl	80093b0 <_svfiprintf_r>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	b01c      	add	sp, #112	@ 0x70
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	b003      	add	sp, #12
 8007cf6:	4770      	bx	lr
 8007cf8:	20000018 	.word	0x20000018
 8007cfc:	ffff0208 	.word	0xffff0208

08007d00 <__sread>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	460c      	mov	r4, r1
 8007d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d08:	f000 f86c 	bl	8007de4 <_read_r>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	bfab      	itete	ge
 8007d10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d12:	89a3      	ldrhlt	r3, [r4, #12]
 8007d14:	181b      	addge	r3, r3, r0
 8007d16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d1a:	bfac      	ite	ge
 8007d1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d1e:	81a3      	strhlt	r3, [r4, #12]
 8007d20:	bd10      	pop	{r4, pc}

08007d22 <__swrite>:
 8007d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d26:	461f      	mov	r7, r3
 8007d28:	898b      	ldrh	r3, [r1, #12]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	05db      	lsls	r3, r3, #23
 8007d2e:	460c      	mov	r4, r1
 8007d30:	4616      	mov	r6, r2
 8007d32:	d505      	bpl.n	8007d40 <__swrite+0x1e>
 8007d34:	2302      	movs	r3, #2
 8007d36:	2200      	movs	r2, #0
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	f000 f840 	bl	8007dc0 <_lseek_r>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	4632      	mov	r2, r6
 8007d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	f000 b867 	b.w	8007e28 <_write_r>

08007d5a <__sseek>:
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 f82d 	bl	8007dc0 <_lseek_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	bf15      	itete	ne
 8007d6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d76:	81a3      	strheq	r3, [r4, #12]
 8007d78:	bf18      	it	ne
 8007d7a:	81a3      	strhne	r3, [r4, #12]
 8007d7c:	bd10      	pop	{r4, pc}

08007d7e <__sclose>:
 8007d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d82:	f000 b80d 	b.w	8007da0 <_close_r>

08007d86 <memset>:
 8007d86:	4603      	mov	r3, r0
 8007d88:	4402      	add	r2, r0
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d100      	bne.n	8007d90 <memset+0xa>
 8007d8e:	4770      	bx	lr
 8007d90:	f803 1b01 	strb.w	r1, [r3], #1
 8007d94:	e7f9      	b.n	8007d8a <memset+0x4>
	...

08007d98 <_localeconv_r>:
 8007d98:	4800      	ldr	r0, [pc, #0]	@ (8007d9c <_localeconv_r+0x4>)
 8007d9a:	4770      	bx	lr
 8007d9c:	20000158 	.word	0x20000158

08007da0 <_close_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	2300      	movs	r3, #0
 8007da4:	4d05      	ldr	r5, [pc, #20]	@ (8007dbc <_close_r+0x1c>)
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7f9 fdc5 	bl	800193a <_close>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_close_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_close_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20000428 	.word	0x20000428

08007dc0 <_lseek_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4d05      	ldr	r5, [pc, #20]	@ (8007de0 <_lseek_r+0x20>)
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 fdd7 	bl	8001982 <_lseek>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_lseek_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_lseek_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	20000428 	.word	0x20000428

08007de4 <_read_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	2200      	movs	r2, #0
 8007dee:	4d05      	ldr	r5, [pc, #20]	@ (8007e04 <_read_r+0x20>)
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7f9 fd68 	bl	80018c8 <_read>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_read_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_read_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20000428 	.word	0x20000428

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4d05      	ldr	r5, [pc, #20]	@ (8007e24 <_sbrk_r+0x1c>)
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7f9 fdc2 	bl	800199c <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20000428 	.word	0x20000428

08007e28 <_write_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	4611      	mov	r1, r2
 8007e30:	2200      	movs	r2, #0
 8007e32:	4d05      	ldr	r5, [pc, #20]	@ (8007e48 <_write_r+0x20>)
 8007e34:	602a      	str	r2, [r5, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	f7f9 fd63 	bl	8001902 <_write>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_write_r+0x1e>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_write_r+0x1e>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	20000428 	.word	0x20000428

08007e4c <__errno>:
 8007e4c:	4b01      	ldr	r3, [pc, #4]	@ (8007e54 <__errno+0x8>)
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000018 	.word	0x20000018

08007e58 <__libc_init_array>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	4d0c      	ldr	r5, [pc, #48]	@ (8007e90 <__libc_init_array+0x38>)
 8007e5e:	4c0d      	ldr	r4, [pc, #52]	@ (8007e94 <__libc_init_array+0x3c>)
 8007e60:	1b64      	subs	r4, r4, r5
 8007e62:	10a4      	asrs	r4, r4, #2
 8007e64:	42a6      	cmp	r6, r4
 8007e66:	d109      	bne.n	8007e7c <__libc_init_array+0x24>
 8007e68:	f001 ffaa 	bl	8009dc0 <_init>
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	4d0a      	ldr	r5, [pc, #40]	@ (8007e98 <__libc_init_array+0x40>)
 8007e70:	4c0a      	ldr	r4, [pc, #40]	@ (8007e9c <__libc_init_array+0x44>)
 8007e72:	1b64      	subs	r4, r4, r5
 8007e74:	10a4      	asrs	r4, r4, #2
 8007e76:	42a6      	cmp	r6, r4
 8007e78:	d105      	bne.n	8007e86 <__libc_init_array+0x2e>
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e80:	4798      	blx	r3
 8007e82:	3601      	adds	r6, #1
 8007e84:	e7ee      	b.n	8007e64 <__libc_init_array+0xc>
 8007e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8a:	4798      	blx	r3
 8007e8c:	3601      	adds	r6, #1
 8007e8e:	e7f2      	b.n	8007e76 <__libc_init_array+0x1e>
 8007e90:	0800a1b0 	.word	0x0800a1b0
 8007e94:	0800a1b0 	.word	0x0800a1b0
 8007e98:	0800a1b0 	.word	0x0800a1b0
 8007e9c:	0800a1b4 	.word	0x0800a1b4

08007ea0 <__retarget_lock_init_recursive>:
 8007ea0:	4770      	bx	lr

08007ea2 <__retarget_lock_acquire_recursive>:
 8007ea2:	4770      	bx	lr

08007ea4 <__retarget_lock_release_recursive>:
 8007ea4:	4770      	bx	lr

08007ea6 <memchr>:
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	b2c9      	uxtb	r1, r1
 8007eac:	4402      	add	r2, r0
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	d101      	bne.n	8007eb8 <memchr+0x12>
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e003      	b.n	8007ec0 <memchr+0x1a>
 8007eb8:	7804      	ldrb	r4, [r0, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	428c      	cmp	r4, r1
 8007ebe:	d1f6      	bne.n	8007eae <memchr+0x8>
 8007ec0:	bd10      	pop	{r4, pc}

08007ec2 <quorem>:
 8007ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec6:	6903      	ldr	r3, [r0, #16]
 8007ec8:	690c      	ldr	r4, [r1, #16]
 8007eca:	4607      	mov	r7, r0
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	db7e      	blt.n	8007fce <quorem+0x10c>
 8007ed0:	3c01      	subs	r4, #1
 8007ed2:	00a3      	lsls	r3, r4, #2
 8007ed4:	f100 0514 	add.w	r5, r0, #20
 8007ed8:	f101 0814 	add.w	r8, r1, #20
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eec:	3301      	adds	r3, #1
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ef8:	d32e      	bcc.n	8007f58 <quorem+0x96>
 8007efa:	f04f 0a00 	mov.w	sl, #0
 8007efe:	46c4      	mov	ip, r8
 8007f00:	46ae      	mov	lr, r5
 8007f02:	46d3      	mov	fp, sl
 8007f04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f08:	b298      	uxth	r0, r3
 8007f0a:	fb06 a000 	mla	r0, r6, r0, sl
 8007f0e:	0c1b      	lsrs	r3, r3, #16
 8007f10:	0c02      	lsrs	r2, r0, #16
 8007f12:	fb06 2303 	mla	r3, r6, r3, r2
 8007f16:	f8de 2000 	ldr.w	r2, [lr]
 8007f1a:	b280      	uxth	r0, r0
 8007f1c:	b292      	uxth	r2, r2
 8007f1e:	1a12      	subs	r2, r2, r0
 8007f20:	445a      	add	r2, fp
 8007f22:	f8de 0000 	ldr.w	r0, [lr]
 8007f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f34:	b292      	uxth	r2, r2
 8007f36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f3a:	45e1      	cmp	r9, ip
 8007f3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f40:	f84e 2b04 	str.w	r2, [lr], #4
 8007f44:	d2de      	bcs.n	8007f04 <quorem+0x42>
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	58eb      	ldr	r3, [r5, r3]
 8007f4a:	b92b      	cbnz	r3, 8007f58 <quorem+0x96>
 8007f4c:	9b01      	ldr	r3, [sp, #4]
 8007f4e:	3b04      	subs	r3, #4
 8007f50:	429d      	cmp	r5, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	d32f      	bcc.n	8007fb6 <quorem+0xf4>
 8007f56:	613c      	str	r4, [r7, #16]
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f001 f8c5 	bl	80090e8 <__mcmp>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	db25      	blt.n	8007fae <quorem+0xec>
 8007f62:	4629      	mov	r1, r5
 8007f64:	2000      	movs	r0, #0
 8007f66:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f6a:	f8d1 c000 	ldr.w	ip, [r1]
 8007f6e:	fa1f fe82 	uxth.w	lr, r2
 8007f72:	fa1f f38c 	uxth.w	r3, ip
 8007f76:	eba3 030e 	sub.w	r3, r3, lr
 8007f7a:	4403      	add	r3, r0
 8007f7c:	0c12      	lsrs	r2, r2, #16
 8007f7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f8c:	45c1      	cmp	r9, r8
 8007f8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f92:	f841 3b04 	str.w	r3, [r1], #4
 8007f96:	d2e6      	bcs.n	8007f66 <quorem+0xa4>
 8007f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fa0:	b922      	cbnz	r2, 8007fac <quorem+0xea>
 8007fa2:	3b04      	subs	r3, #4
 8007fa4:	429d      	cmp	r5, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	d30b      	bcc.n	8007fc2 <quorem+0x100>
 8007faa:	613c      	str	r4, [r7, #16]
 8007fac:	3601      	adds	r6, #1
 8007fae:	4630      	mov	r0, r6
 8007fb0:	b003      	add	sp, #12
 8007fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	3b04      	subs	r3, #4
 8007fba:	2a00      	cmp	r2, #0
 8007fbc:	d1cb      	bne.n	8007f56 <quorem+0x94>
 8007fbe:	3c01      	subs	r4, #1
 8007fc0:	e7c6      	b.n	8007f50 <quorem+0x8e>
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	3b04      	subs	r3, #4
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	d1ef      	bne.n	8007faa <quorem+0xe8>
 8007fca:	3c01      	subs	r4, #1
 8007fcc:	e7ea      	b.n	8007fa4 <quorem+0xe2>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e7ee      	b.n	8007fb0 <quorem+0xee>
 8007fd2:	0000      	movs	r0, r0
 8007fd4:	0000      	movs	r0, r0
	...

08007fd8 <_dtoa_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	4614      	mov	r4, r2
 8007fde:	461d      	mov	r5, r3
 8007fe0:	69c7      	ldr	r7, [r0, #28]
 8007fe2:	b097      	sub	sp, #92	@ 0x5c
 8007fe4:	4683      	mov	fp, r0
 8007fe6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007fea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007fec:	b97f      	cbnz	r7, 800800e <_dtoa_r+0x36>
 8007fee:	2010      	movs	r0, #16
 8007ff0:	f7ff f88a 	bl	8007108 <malloc>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ffa:	b920      	cbnz	r0, 8008006 <_dtoa_r+0x2e>
 8007ffc:	21ef      	movs	r1, #239	@ 0xef
 8007ffe:	4ba8      	ldr	r3, [pc, #672]	@ (80082a0 <_dtoa_r+0x2c8>)
 8008000:	48a8      	ldr	r0, [pc, #672]	@ (80082a4 <_dtoa_r+0x2cc>)
 8008002:	f001 fba1 	bl	8009748 <__assert_func>
 8008006:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800800a:	6007      	str	r7, [r0, #0]
 800800c:	60c7      	str	r7, [r0, #12]
 800800e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	b159      	cbz	r1, 800802e <_dtoa_r+0x56>
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	2301      	movs	r3, #1
 800801a:	4093      	lsls	r3, r2
 800801c:	604a      	str	r2, [r1, #4]
 800801e:	608b      	str	r3, [r1, #8]
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fe29 	bl	8008c78 <_Bfree>
 8008026:	2200      	movs	r2, #0
 8008028:	f8db 301c 	ldr.w	r3, [fp, #28]
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	1e2b      	subs	r3, r5, #0
 8008030:	bfaf      	iteee	ge
 8008032:	2300      	movge	r3, #0
 8008034:	2201      	movlt	r2, #1
 8008036:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800803a:	9303      	strlt	r3, [sp, #12]
 800803c:	bfa8      	it	ge
 800803e:	6033      	strge	r3, [r6, #0]
 8008040:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008044:	4b98      	ldr	r3, [pc, #608]	@ (80082a8 <_dtoa_r+0x2d0>)
 8008046:	bfb8      	it	lt
 8008048:	6032      	strlt	r2, [r6, #0]
 800804a:	ea33 0308 	bics.w	r3, r3, r8
 800804e:	d112      	bne.n	8008076 <_dtoa_r+0x9e>
 8008050:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008054:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800805c:	4323      	orrs	r3, r4
 800805e:	f000 8550 	beq.w	8008b02 <_dtoa_r+0xb2a>
 8008062:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008064:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80082ac <_dtoa_r+0x2d4>
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8552 	beq.w	8008b12 <_dtoa_r+0xb3a>
 800806e:	f10a 0303 	add.w	r3, sl, #3
 8008072:	f000 bd4c 	b.w	8008b0e <_dtoa_r+0xb36>
 8008076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800807a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800807e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008082:	2200      	movs	r2, #0
 8008084:	2300      	movs	r3, #0
 8008086:	f7f8 fc8f 	bl	80009a8 <__aeabi_dcmpeq>
 800808a:	4607      	mov	r7, r0
 800808c:	b158      	cbz	r0, 80080a6 <_dtoa_r+0xce>
 800808e:	2301      	movs	r3, #1
 8008090:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008096:	b113      	cbz	r3, 800809e <_dtoa_r+0xc6>
 8008098:	4b85      	ldr	r3, [pc, #532]	@ (80082b0 <_dtoa_r+0x2d8>)
 800809a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80082b4 <_dtoa_r+0x2dc>
 80080a2:	f000 bd36 	b.w	8008b12 <_dtoa_r+0xb3a>
 80080a6:	ab14      	add	r3, sp, #80	@ 0x50
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	ab15      	add	r3, sp, #84	@ 0x54
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4658      	mov	r0, fp
 80080b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080b4:	f001 f8c8 	bl	8009248 <__d2b>
 80080b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80080bc:	4681      	mov	r9, r0
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d077      	beq.n	80081b2 <_dtoa_r+0x1da>
 80080c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80080d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80080d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80080da:	4619      	mov	r1, r3
 80080dc:	2200      	movs	r2, #0
 80080de:	4b76      	ldr	r3, [pc, #472]	@ (80082b8 <_dtoa_r+0x2e0>)
 80080e0:	f7f8 f842 	bl	8000168 <__aeabi_dsub>
 80080e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008288 <_dtoa_r+0x2b0>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f9f5 	bl	80004d8 <__aeabi_dmul>
 80080ee:	a368      	add	r3, pc, #416	@ (adr r3, 8008290 <_dtoa_r+0x2b8>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 f83a 	bl	800016c <__adddf3>
 80080f8:	4604      	mov	r4, r0
 80080fa:	4630      	mov	r0, r6
 80080fc:	460d      	mov	r5, r1
 80080fe:	f7f8 f981 	bl	8000404 <__aeabi_i2d>
 8008102:	a365      	add	r3, pc, #404	@ (adr r3, 8008298 <_dtoa_r+0x2c0>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 f9e6 	bl	80004d8 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4620      	mov	r0, r4
 8008112:	4629      	mov	r1, r5
 8008114:	f7f8 f82a 	bl	800016c <__adddf3>
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	f7f8 fc8c 	bl	8000a38 <__aeabi_d2iz>
 8008120:	2200      	movs	r2, #0
 8008122:	4607      	mov	r7, r0
 8008124:	2300      	movs	r3, #0
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fc47 	bl	80009bc <__aeabi_dcmplt>
 800812e:	b140      	cbz	r0, 8008142 <_dtoa_r+0x16a>
 8008130:	4638      	mov	r0, r7
 8008132:	f7f8 f967 	bl	8000404 <__aeabi_i2d>
 8008136:	4622      	mov	r2, r4
 8008138:	462b      	mov	r3, r5
 800813a:	f7f8 fc35 	bl	80009a8 <__aeabi_dcmpeq>
 800813e:	b900      	cbnz	r0, 8008142 <_dtoa_r+0x16a>
 8008140:	3f01      	subs	r7, #1
 8008142:	2f16      	cmp	r7, #22
 8008144:	d853      	bhi.n	80081ee <_dtoa_r+0x216>
 8008146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814a:	4b5c      	ldr	r3, [pc, #368]	@ (80082bc <_dtoa_r+0x2e4>)
 800814c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 fc32 	bl	80009bc <__aeabi_dcmplt>
 8008158:	2800      	cmp	r0, #0
 800815a:	d04a      	beq.n	80081f2 <_dtoa_r+0x21a>
 800815c:	2300      	movs	r3, #0
 800815e:	3f01      	subs	r7, #1
 8008160:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008162:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008164:	1b9b      	subs	r3, r3, r6
 8008166:	1e5a      	subs	r2, r3, #1
 8008168:	bf46      	itte	mi
 800816a:	f1c3 0801 	rsbmi	r8, r3, #1
 800816e:	2300      	movmi	r3, #0
 8008170:	f04f 0800 	movpl.w	r8, #0
 8008174:	9209      	str	r2, [sp, #36]	@ 0x24
 8008176:	bf48      	it	mi
 8008178:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800817a:	2f00      	cmp	r7, #0
 800817c:	db3b      	blt.n	80081f6 <_dtoa_r+0x21e>
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	970e      	str	r7, [sp, #56]	@ 0x38
 8008182:	443b      	add	r3, r7
 8008184:	9309      	str	r3, [sp, #36]	@ 0x24
 8008186:	2300      	movs	r3, #0
 8008188:	930a      	str	r3, [sp, #40]	@ 0x28
 800818a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800818c:	2b09      	cmp	r3, #9
 800818e:	d866      	bhi.n	800825e <_dtoa_r+0x286>
 8008190:	2b05      	cmp	r3, #5
 8008192:	bfc4      	itt	gt
 8008194:	3b04      	subgt	r3, #4
 8008196:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008198:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800819a:	bfc8      	it	gt
 800819c:	2400      	movgt	r4, #0
 800819e:	f1a3 0302 	sub.w	r3, r3, #2
 80081a2:	bfd8      	it	le
 80081a4:	2401      	movle	r4, #1
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d864      	bhi.n	8008274 <_dtoa_r+0x29c>
 80081aa:	e8df f003 	tbb	[pc, r3]
 80081ae:	382b      	.short	0x382b
 80081b0:	5636      	.short	0x5636
 80081b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80081b6:	441e      	add	r6, r3
 80081b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80081bc:	2b20      	cmp	r3, #32
 80081be:	bfc1      	itttt	gt
 80081c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80081c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80081c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80081cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80081d0:	bfd6      	itet	le
 80081d2:	f1c3 0320 	rsble	r3, r3, #32
 80081d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80081da:	fa04 f003 	lslle.w	r0, r4, r3
 80081de:	f7f8 f901 	bl	80003e4 <__aeabi_ui2d>
 80081e2:	2201      	movs	r2, #1
 80081e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081e8:	3e01      	subs	r6, #1
 80081ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80081ec:	e775      	b.n	80080da <_dtoa_r+0x102>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7b6      	b.n	8008160 <_dtoa_r+0x188>
 80081f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80081f4:	e7b5      	b.n	8008162 <_dtoa_r+0x18a>
 80081f6:	427b      	negs	r3, r7
 80081f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80081fa:	2300      	movs	r3, #0
 80081fc:	eba8 0807 	sub.w	r8, r8, r7
 8008200:	930e      	str	r3, [sp, #56]	@ 0x38
 8008202:	e7c2      	b.n	800818a <_dtoa_r+0x1b2>
 8008204:	2300      	movs	r3, #0
 8008206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800820a:	2b00      	cmp	r3, #0
 800820c:	dc35      	bgt.n	800827a <_dtoa_r+0x2a2>
 800820e:	2301      	movs	r3, #1
 8008210:	461a      	mov	r2, r3
 8008212:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008216:	9221      	str	r2, [sp, #132]	@ 0x84
 8008218:	e00b      	b.n	8008232 <_dtoa_r+0x25a>
 800821a:	2301      	movs	r3, #1
 800821c:	e7f3      	b.n	8008206 <_dtoa_r+0x22e>
 800821e:	2300      	movs	r3, #0
 8008220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008222:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	9308      	str	r3, [sp, #32]
 8008228:	3301      	adds	r3, #1
 800822a:	2b01      	cmp	r3, #1
 800822c:	9307      	str	r3, [sp, #28]
 800822e:	bfb8      	it	lt
 8008230:	2301      	movlt	r3, #1
 8008232:	2100      	movs	r1, #0
 8008234:	2204      	movs	r2, #4
 8008236:	f8db 001c 	ldr.w	r0, [fp, #28]
 800823a:	f102 0514 	add.w	r5, r2, #20
 800823e:	429d      	cmp	r5, r3
 8008240:	d91f      	bls.n	8008282 <_dtoa_r+0x2aa>
 8008242:	6041      	str	r1, [r0, #4]
 8008244:	4658      	mov	r0, fp
 8008246:	f000 fcd7 	bl	8008bf8 <_Balloc>
 800824a:	4682      	mov	sl, r0
 800824c:	2800      	cmp	r0, #0
 800824e:	d139      	bne.n	80082c4 <_dtoa_r+0x2ec>
 8008250:	4602      	mov	r2, r0
 8008252:	f240 11af 	movw	r1, #431	@ 0x1af
 8008256:	4b1a      	ldr	r3, [pc, #104]	@ (80082c0 <_dtoa_r+0x2e8>)
 8008258:	e6d2      	b.n	8008000 <_dtoa_r+0x28>
 800825a:	2301      	movs	r3, #1
 800825c:	e7e0      	b.n	8008220 <_dtoa_r+0x248>
 800825e:	2401      	movs	r4, #1
 8008260:	2300      	movs	r3, #0
 8008262:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008264:	9320      	str	r3, [sp, #128]	@ 0x80
 8008266:	f04f 33ff 	mov.w	r3, #4294967295
 800826a:	2200      	movs	r2, #0
 800826c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008270:	2312      	movs	r3, #18
 8008272:	e7d0      	b.n	8008216 <_dtoa_r+0x23e>
 8008274:	2301      	movs	r3, #1
 8008276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008278:	e7f5      	b.n	8008266 <_dtoa_r+0x28e>
 800827a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800827c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008280:	e7d7      	b.n	8008232 <_dtoa_r+0x25a>
 8008282:	3101      	adds	r1, #1
 8008284:	0052      	lsls	r2, r2, #1
 8008286:	e7d8      	b.n	800823a <_dtoa_r+0x262>
 8008288:	636f4361 	.word	0x636f4361
 800828c:	3fd287a7 	.word	0x3fd287a7
 8008290:	8b60c8b3 	.word	0x8b60c8b3
 8008294:	3fc68a28 	.word	0x3fc68a28
 8008298:	509f79fb 	.word	0x509f79fb
 800829c:	3fd34413 	.word	0x3fd34413
 80082a0:	08009e77 	.word	0x08009e77
 80082a4:	08009e8e 	.word	0x08009e8e
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	08009e73 	.word	0x08009e73
 80082b0:	08009e47 	.word	0x08009e47
 80082b4:	08009e46 	.word	0x08009e46
 80082b8:	3ff80000 	.word	0x3ff80000
 80082bc:	08009f88 	.word	0x08009f88
 80082c0:	08009ee6 	.word	0x08009ee6
 80082c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082c8:	6018      	str	r0, [r3, #0]
 80082ca:	9b07      	ldr	r3, [sp, #28]
 80082cc:	2b0e      	cmp	r3, #14
 80082ce:	f200 80a4 	bhi.w	800841a <_dtoa_r+0x442>
 80082d2:	2c00      	cmp	r4, #0
 80082d4:	f000 80a1 	beq.w	800841a <_dtoa_r+0x442>
 80082d8:	2f00      	cmp	r7, #0
 80082da:	dd33      	ble.n	8008344 <_dtoa_r+0x36c>
 80082dc:	4b86      	ldr	r3, [pc, #536]	@ (80084f8 <_dtoa_r+0x520>)
 80082de:	f007 020f 	and.w	r2, r7, #15
 80082e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082e6:	05f8      	lsls	r0, r7, #23
 80082e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082f4:	d516      	bpl.n	8008324 <_dtoa_r+0x34c>
 80082f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082fa:	4b80      	ldr	r3, [pc, #512]	@ (80084fc <_dtoa_r+0x524>)
 80082fc:	2603      	movs	r6, #3
 80082fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008302:	f7f8 fa13 	bl	800072c <__aeabi_ddiv>
 8008306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800830a:	f004 040f 	and.w	r4, r4, #15
 800830e:	4d7b      	ldr	r5, [pc, #492]	@ (80084fc <_dtoa_r+0x524>)
 8008310:	b954      	cbnz	r4, 8008328 <_dtoa_r+0x350>
 8008312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800831a:	f7f8 fa07 	bl	800072c <__aeabi_ddiv>
 800831e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008322:	e028      	b.n	8008376 <_dtoa_r+0x39e>
 8008324:	2602      	movs	r6, #2
 8008326:	e7f2      	b.n	800830e <_dtoa_r+0x336>
 8008328:	07e1      	lsls	r1, r4, #31
 800832a:	d508      	bpl.n	800833e <_dtoa_r+0x366>
 800832c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008334:	f7f8 f8d0 	bl	80004d8 <__aeabi_dmul>
 8008338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800833c:	3601      	adds	r6, #1
 800833e:	1064      	asrs	r4, r4, #1
 8008340:	3508      	adds	r5, #8
 8008342:	e7e5      	b.n	8008310 <_dtoa_r+0x338>
 8008344:	f000 80d2 	beq.w	80084ec <_dtoa_r+0x514>
 8008348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800834c:	427c      	negs	r4, r7
 800834e:	4b6a      	ldr	r3, [pc, #424]	@ (80084f8 <_dtoa_r+0x520>)
 8008350:	f004 020f 	and.w	r2, r4, #15
 8008354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f8 f8bc 	bl	80004d8 <__aeabi_dmul>
 8008360:	2602      	movs	r6, #2
 8008362:	2300      	movs	r3, #0
 8008364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008368:	4d64      	ldr	r5, [pc, #400]	@ (80084fc <_dtoa_r+0x524>)
 800836a:	1124      	asrs	r4, r4, #4
 800836c:	2c00      	cmp	r4, #0
 800836e:	f040 80b2 	bne.w	80084d6 <_dtoa_r+0x4fe>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1d3      	bne.n	800831e <_dtoa_r+0x346>
 8008376:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800837a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80b7 	beq.w	80084f0 <_dtoa_r+0x518>
 8008382:	2200      	movs	r2, #0
 8008384:	4620      	mov	r0, r4
 8008386:	4629      	mov	r1, r5
 8008388:	4b5d      	ldr	r3, [pc, #372]	@ (8008500 <_dtoa_r+0x528>)
 800838a:	f7f8 fb17 	bl	80009bc <__aeabi_dcmplt>
 800838e:	2800      	cmp	r0, #0
 8008390:	f000 80ae 	beq.w	80084f0 <_dtoa_r+0x518>
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80aa 	beq.w	80084f0 <_dtoa_r+0x518>
 800839c:	9b08      	ldr	r3, [sp, #32]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	dd37      	ble.n	8008412 <_dtoa_r+0x43a>
 80083a2:	1e7b      	subs	r3, r7, #1
 80083a4:	4620      	mov	r0, r4
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	2200      	movs	r2, #0
 80083aa:	4629      	mov	r1, r5
 80083ac:	4b55      	ldr	r3, [pc, #340]	@ (8008504 <_dtoa_r+0x52c>)
 80083ae:	f7f8 f893 	bl	80004d8 <__aeabi_dmul>
 80083b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b6:	9c08      	ldr	r4, [sp, #32]
 80083b8:	3601      	adds	r6, #1
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7f8 f822 	bl	8000404 <__aeabi_i2d>
 80083c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c4:	f7f8 f888 	bl	80004d8 <__aeabi_dmul>
 80083c8:	2200      	movs	r2, #0
 80083ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008508 <_dtoa_r+0x530>)
 80083cc:	f7f7 fece 	bl	800016c <__adddf3>
 80083d0:	4605      	mov	r5, r0
 80083d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80083d6:	2c00      	cmp	r4, #0
 80083d8:	f040 809a 	bne.w	8008510 <_dtoa_r+0x538>
 80083dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e0:	2200      	movs	r2, #0
 80083e2:	4b4a      	ldr	r3, [pc, #296]	@ (800850c <_dtoa_r+0x534>)
 80083e4:	f7f7 fec0 	bl	8000168 <__aeabi_dsub>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083f0:	462a      	mov	r2, r5
 80083f2:	4633      	mov	r3, r6
 80083f4:	f7f8 fb00 	bl	80009f8 <__aeabi_dcmpgt>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f040 828e 	bne.w	800891a <_dtoa_r+0x942>
 80083fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008402:	462a      	mov	r2, r5
 8008404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008408:	f7f8 fad8 	bl	80009bc <__aeabi_dcmplt>
 800840c:	2800      	cmp	r0, #0
 800840e:	f040 8127 	bne.w	8008660 <_dtoa_r+0x688>
 8008412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800841a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800841c:	2b00      	cmp	r3, #0
 800841e:	f2c0 8163 	blt.w	80086e8 <_dtoa_r+0x710>
 8008422:	2f0e      	cmp	r7, #14
 8008424:	f300 8160 	bgt.w	80086e8 <_dtoa_r+0x710>
 8008428:	4b33      	ldr	r3, [pc, #204]	@ (80084f8 <_dtoa_r+0x520>)
 800842a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800842e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008432:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008436:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008438:	2b00      	cmp	r3, #0
 800843a:	da03      	bge.n	8008444 <_dtoa_r+0x46c>
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f340 8100 	ble.w	8008644 <_dtoa_r+0x66c>
 8008444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008448:	4656      	mov	r6, sl
 800844a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f8 f96b 	bl	800072c <__aeabi_ddiv>
 8008456:	f7f8 faef 	bl	8000a38 <__aeabi_d2iz>
 800845a:	4680      	mov	r8, r0
 800845c:	f7f7 ffd2 	bl	8000404 <__aeabi_i2d>
 8008460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008464:	f7f8 f838 	bl	80004d8 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f7 fe7a 	bl	8000168 <__aeabi_dsub>
 8008474:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008478:	9d07      	ldr	r5, [sp, #28]
 800847a:	f806 4b01 	strb.w	r4, [r6], #1
 800847e:	eba6 040a 	sub.w	r4, r6, sl
 8008482:	42a5      	cmp	r5, r4
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	f040 8116 	bne.w	80086b8 <_dtoa_r+0x6e0>
 800848c:	f7f7 fe6e 	bl	800016c <__adddf3>
 8008490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008494:	4604      	mov	r4, r0
 8008496:	460d      	mov	r5, r1
 8008498:	f7f8 faae 	bl	80009f8 <__aeabi_dcmpgt>
 800849c:	2800      	cmp	r0, #0
 800849e:	f040 80f8 	bne.w	8008692 <_dtoa_r+0x6ba>
 80084a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a6:	4620      	mov	r0, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7f8 fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80084ae:	b118      	cbz	r0, 80084b8 <_dtoa_r+0x4e0>
 80084b0:	f018 0f01 	tst.w	r8, #1
 80084b4:	f040 80ed 	bne.w	8008692 <_dtoa_r+0x6ba>
 80084b8:	4649      	mov	r1, r9
 80084ba:	4658      	mov	r0, fp
 80084bc:	f000 fbdc 	bl	8008c78 <_Bfree>
 80084c0:	2300      	movs	r3, #0
 80084c2:	7033      	strb	r3, [r6, #0]
 80084c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80084c6:	3701      	adds	r7, #1
 80084c8:	601f      	str	r7, [r3, #0]
 80084ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8320 	beq.w	8008b12 <_dtoa_r+0xb3a>
 80084d2:	601e      	str	r6, [r3, #0]
 80084d4:	e31d      	b.n	8008b12 <_dtoa_r+0xb3a>
 80084d6:	07e2      	lsls	r2, r4, #31
 80084d8:	d505      	bpl.n	80084e6 <_dtoa_r+0x50e>
 80084da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084de:	f7f7 fffb 	bl	80004d8 <__aeabi_dmul>
 80084e2:	2301      	movs	r3, #1
 80084e4:	3601      	adds	r6, #1
 80084e6:	1064      	asrs	r4, r4, #1
 80084e8:	3508      	adds	r5, #8
 80084ea:	e73f      	b.n	800836c <_dtoa_r+0x394>
 80084ec:	2602      	movs	r6, #2
 80084ee:	e742      	b.n	8008376 <_dtoa_r+0x39e>
 80084f0:	9c07      	ldr	r4, [sp, #28]
 80084f2:	9704      	str	r7, [sp, #16]
 80084f4:	e761      	b.n	80083ba <_dtoa_r+0x3e2>
 80084f6:	bf00      	nop
 80084f8:	08009f88 	.word	0x08009f88
 80084fc:	08009f60 	.word	0x08009f60
 8008500:	3ff00000 	.word	0x3ff00000
 8008504:	40240000 	.word	0x40240000
 8008508:	401c0000 	.word	0x401c0000
 800850c:	40140000 	.word	0x40140000
 8008510:	4b70      	ldr	r3, [pc, #448]	@ (80086d4 <_dtoa_r+0x6fc>)
 8008512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800851c:	4454      	add	r4, sl
 800851e:	2900      	cmp	r1, #0
 8008520:	d045      	beq.n	80085ae <_dtoa_r+0x5d6>
 8008522:	2000      	movs	r0, #0
 8008524:	496c      	ldr	r1, [pc, #432]	@ (80086d8 <_dtoa_r+0x700>)
 8008526:	f7f8 f901 	bl	800072c <__aeabi_ddiv>
 800852a:	4633      	mov	r3, r6
 800852c:	462a      	mov	r2, r5
 800852e:	f7f7 fe1b 	bl	8000168 <__aeabi_dsub>
 8008532:	4656      	mov	r6, sl
 8008534:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800853c:	f7f8 fa7c 	bl	8000a38 <__aeabi_d2iz>
 8008540:	4605      	mov	r5, r0
 8008542:	f7f7 ff5f 	bl	8000404 <__aeabi_i2d>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800854e:	f7f7 fe0b 	bl	8000168 <__aeabi_dsub>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	3530      	adds	r5, #48	@ 0x30
 8008558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800855c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008560:	f806 5b01 	strb.w	r5, [r6], #1
 8008564:	f7f8 fa2a 	bl	80009bc <__aeabi_dcmplt>
 8008568:	2800      	cmp	r0, #0
 800856a:	d163      	bne.n	8008634 <_dtoa_r+0x65c>
 800856c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008570:	2000      	movs	r0, #0
 8008572:	495a      	ldr	r1, [pc, #360]	@ (80086dc <_dtoa_r+0x704>)
 8008574:	f7f7 fdf8 	bl	8000168 <__aeabi_dsub>
 8008578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800857c:	f7f8 fa1e 	bl	80009bc <__aeabi_dcmplt>
 8008580:	2800      	cmp	r0, #0
 8008582:	f040 8087 	bne.w	8008694 <_dtoa_r+0x6bc>
 8008586:	42a6      	cmp	r6, r4
 8008588:	f43f af43 	beq.w	8008412 <_dtoa_r+0x43a>
 800858c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008590:	2200      	movs	r2, #0
 8008592:	4b53      	ldr	r3, [pc, #332]	@ (80086e0 <_dtoa_r+0x708>)
 8008594:	f7f7 ffa0 	bl	80004d8 <__aeabi_dmul>
 8008598:	2200      	movs	r2, #0
 800859a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a2:	4b4f      	ldr	r3, [pc, #316]	@ (80086e0 <_dtoa_r+0x708>)
 80085a4:	f7f7 ff98 	bl	80004d8 <__aeabi_dmul>
 80085a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ac:	e7c4      	b.n	8008538 <_dtoa_r+0x560>
 80085ae:	4631      	mov	r1, r6
 80085b0:	4628      	mov	r0, r5
 80085b2:	f7f7 ff91 	bl	80004d8 <__aeabi_dmul>
 80085b6:	4656      	mov	r6, sl
 80085b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80085be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c2:	f7f8 fa39 	bl	8000a38 <__aeabi_d2iz>
 80085c6:	4605      	mov	r5, r0
 80085c8:	f7f7 ff1c 	bl	8000404 <__aeabi_i2d>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d4:	f7f7 fdc8 	bl	8000168 <__aeabi_dsub>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	3530      	adds	r5, #48	@ 0x30
 80085de:	f806 5b01 	strb.w	r5, [r6], #1
 80085e2:	42a6      	cmp	r6, r4
 80085e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	d124      	bne.n	8008638 <_dtoa_r+0x660>
 80085ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085f2:	4b39      	ldr	r3, [pc, #228]	@ (80086d8 <_dtoa_r+0x700>)
 80085f4:	f7f7 fdba 	bl	800016c <__adddf3>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008600:	f7f8 f9fa 	bl	80009f8 <__aeabi_dcmpgt>
 8008604:	2800      	cmp	r0, #0
 8008606:	d145      	bne.n	8008694 <_dtoa_r+0x6bc>
 8008608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800860c:	2000      	movs	r0, #0
 800860e:	4932      	ldr	r1, [pc, #200]	@ (80086d8 <_dtoa_r+0x700>)
 8008610:	f7f7 fdaa 	bl	8000168 <__aeabi_dsub>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861c:	f7f8 f9ce 	bl	80009bc <__aeabi_dcmplt>
 8008620:	2800      	cmp	r0, #0
 8008622:	f43f aef6 	beq.w	8008412 <_dtoa_r+0x43a>
 8008626:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008628:	1e73      	subs	r3, r6, #1
 800862a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800862c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008630:	2b30      	cmp	r3, #48	@ 0x30
 8008632:	d0f8      	beq.n	8008626 <_dtoa_r+0x64e>
 8008634:	9f04      	ldr	r7, [sp, #16]
 8008636:	e73f      	b.n	80084b8 <_dtoa_r+0x4e0>
 8008638:	4b29      	ldr	r3, [pc, #164]	@ (80086e0 <_dtoa_r+0x708>)
 800863a:	f7f7 ff4d 	bl	80004d8 <__aeabi_dmul>
 800863e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008642:	e7bc      	b.n	80085be <_dtoa_r+0x5e6>
 8008644:	d10c      	bne.n	8008660 <_dtoa_r+0x688>
 8008646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800864a:	2200      	movs	r2, #0
 800864c:	4b25      	ldr	r3, [pc, #148]	@ (80086e4 <_dtoa_r+0x70c>)
 800864e:	f7f7 ff43 	bl	80004d8 <__aeabi_dmul>
 8008652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008656:	f7f8 f9c5 	bl	80009e4 <__aeabi_dcmpge>
 800865a:	2800      	cmp	r0, #0
 800865c:	f000 815b 	beq.w	8008916 <_dtoa_r+0x93e>
 8008660:	2400      	movs	r4, #0
 8008662:	4625      	mov	r5, r4
 8008664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008666:	4656      	mov	r6, sl
 8008668:	43db      	mvns	r3, r3
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	2700      	movs	r7, #0
 800866e:	4621      	mov	r1, r4
 8008670:	4658      	mov	r0, fp
 8008672:	f000 fb01 	bl	8008c78 <_Bfree>
 8008676:	2d00      	cmp	r5, #0
 8008678:	d0dc      	beq.n	8008634 <_dtoa_r+0x65c>
 800867a:	b12f      	cbz	r7, 8008688 <_dtoa_r+0x6b0>
 800867c:	42af      	cmp	r7, r5
 800867e:	d003      	beq.n	8008688 <_dtoa_r+0x6b0>
 8008680:	4639      	mov	r1, r7
 8008682:	4658      	mov	r0, fp
 8008684:	f000 faf8 	bl	8008c78 <_Bfree>
 8008688:	4629      	mov	r1, r5
 800868a:	4658      	mov	r0, fp
 800868c:	f000 faf4 	bl	8008c78 <_Bfree>
 8008690:	e7d0      	b.n	8008634 <_dtoa_r+0x65c>
 8008692:	9704      	str	r7, [sp, #16]
 8008694:	4633      	mov	r3, r6
 8008696:	461e      	mov	r6, r3
 8008698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800869c:	2a39      	cmp	r2, #57	@ 0x39
 800869e:	d107      	bne.n	80086b0 <_dtoa_r+0x6d8>
 80086a0:	459a      	cmp	sl, r3
 80086a2:	d1f8      	bne.n	8008696 <_dtoa_r+0x6be>
 80086a4:	9a04      	ldr	r2, [sp, #16]
 80086a6:	3201      	adds	r2, #1
 80086a8:	9204      	str	r2, [sp, #16]
 80086aa:	2230      	movs	r2, #48	@ 0x30
 80086ac:	f88a 2000 	strb.w	r2, [sl]
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	3201      	adds	r2, #1
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e7bd      	b.n	8008634 <_dtoa_r+0x65c>
 80086b8:	2200      	movs	r2, #0
 80086ba:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <_dtoa_r+0x708>)
 80086bc:	f7f7 ff0c 	bl	80004d8 <__aeabi_dmul>
 80086c0:	2200      	movs	r2, #0
 80086c2:	2300      	movs	r3, #0
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	f7f8 f96e 	bl	80009a8 <__aeabi_dcmpeq>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f aebc 	beq.w	800844a <_dtoa_r+0x472>
 80086d2:	e6f1      	b.n	80084b8 <_dtoa_r+0x4e0>
 80086d4:	08009f88 	.word	0x08009f88
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	3ff00000 	.word	0x3ff00000
 80086e0:	40240000 	.word	0x40240000
 80086e4:	40140000 	.word	0x40140000
 80086e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	f000 80db 	beq.w	80088a6 <_dtoa_r+0x8ce>
 80086f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80086f2:	2a01      	cmp	r2, #1
 80086f4:	f300 80bf 	bgt.w	8008876 <_dtoa_r+0x89e>
 80086f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	f000 80b7 	beq.w	800886e <_dtoa_r+0x896>
 8008700:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008704:	4646      	mov	r6, r8
 8008706:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800870a:	2101      	movs	r1, #1
 800870c:	441a      	add	r2, r3
 800870e:	4658      	mov	r0, fp
 8008710:	4498      	add	r8, r3
 8008712:	9209      	str	r2, [sp, #36]	@ 0x24
 8008714:	f000 fb64 	bl	8008de0 <__i2b>
 8008718:	4605      	mov	r5, r0
 800871a:	b15e      	cbz	r6, 8008734 <_dtoa_r+0x75c>
 800871c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	dd08      	ble.n	8008734 <_dtoa_r+0x75c>
 8008722:	42b3      	cmp	r3, r6
 8008724:	bfa8      	it	ge
 8008726:	4633      	movge	r3, r6
 8008728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800872a:	eba8 0803 	sub.w	r8, r8, r3
 800872e:	1af6      	subs	r6, r6, r3
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	9309      	str	r3, [sp, #36]	@ 0x24
 8008734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008736:	b1f3      	cbz	r3, 8008776 <_dtoa_r+0x79e>
 8008738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 80b7 	beq.w	80088ae <_dtoa_r+0x8d6>
 8008740:	b18c      	cbz	r4, 8008766 <_dtoa_r+0x78e>
 8008742:	4629      	mov	r1, r5
 8008744:	4622      	mov	r2, r4
 8008746:	4658      	mov	r0, fp
 8008748:	f000 fc08 	bl	8008f5c <__pow5mult>
 800874c:	464a      	mov	r2, r9
 800874e:	4601      	mov	r1, r0
 8008750:	4605      	mov	r5, r0
 8008752:	4658      	mov	r0, fp
 8008754:	f000 fb5a 	bl	8008e0c <__multiply>
 8008758:	4649      	mov	r1, r9
 800875a:	9004      	str	r0, [sp, #16]
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fa8b 	bl	8008c78 <_Bfree>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	4699      	mov	r9, r3
 8008766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008768:	1b1a      	subs	r2, r3, r4
 800876a:	d004      	beq.n	8008776 <_dtoa_r+0x79e>
 800876c:	4649      	mov	r1, r9
 800876e:	4658      	mov	r0, fp
 8008770:	f000 fbf4 	bl	8008f5c <__pow5mult>
 8008774:	4681      	mov	r9, r0
 8008776:	2101      	movs	r1, #1
 8008778:	4658      	mov	r0, fp
 800877a:	f000 fb31 	bl	8008de0 <__i2b>
 800877e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008780:	4604      	mov	r4, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81c9 	beq.w	8008b1a <_dtoa_r+0xb42>
 8008788:	461a      	mov	r2, r3
 800878a:	4601      	mov	r1, r0
 800878c:	4658      	mov	r0, fp
 800878e:	f000 fbe5 	bl	8008f5c <__pow5mult>
 8008792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008794:	4604      	mov	r4, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	f300 808f 	bgt.w	80088ba <_dtoa_r+0x8e2>
 800879c:	9b02      	ldr	r3, [sp, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 8087 	bne.w	80088b2 <_dtoa_r+0x8da>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f040 8083 	bne.w	80088b6 <_dtoa_r+0x8de>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087b6:	0d1b      	lsrs	r3, r3, #20
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	b12b      	cbz	r3, 80087c8 <_dtoa_r+0x7f0>
 80087bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087be:	f108 0801 	add.w	r8, r8, #1
 80087c2:	3301      	adds	r3, #1
 80087c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c6:	2301      	movs	r3, #1
 80087c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80087ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 81aa 	beq.w	8008b26 <_dtoa_r+0xb4e>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087d8:	6918      	ldr	r0, [r3, #16]
 80087da:	f000 fab5 	bl	8008d48 <__hi0bits>
 80087de:	f1c0 0020 	rsb	r0, r0, #32
 80087e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e4:	4418      	add	r0, r3
 80087e6:	f010 001f 	ands.w	r0, r0, #31
 80087ea:	d071      	beq.n	80088d0 <_dtoa_r+0x8f8>
 80087ec:	f1c0 0320 	rsb	r3, r0, #32
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	dd65      	ble.n	80088c0 <_dtoa_r+0x8e8>
 80087f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f6:	f1c0 001c 	rsb	r0, r0, #28
 80087fa:	4403      	add	r3, r0
 80087fc:	4480      	add	r8, r0
 80087fe:	4406      	add	r6, r0
 8008800:	9309      	str	r3, [sp, #36]	@ 0x24
 8008802:	f1b8 0f00 	cmp.w	r8, #0
 8008806:	dd05      	ble.n	8008814 <_dtoa_r+0x83c>
 8008808:	4649      	mov	r1, r9
 800880a:	4642      	mov	r2, r8
 800880c:	4658      	mov	r0, fp
 800880e:	f000 fbff 	bl	8009010 <__lshift>
 8008812:	4681      	mov	r9, r0
 8008814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008816:	2b00      	cmp	r3, #0
 8008818:	dd05      	ble.n	8008826 <_dtoa_r+0x84e>
 800881a:	4621      	mov	r1, r4
 800881c:	461a      	mov	r2, r3
 800881e:	4658      	mov	r0, fp
 8008820:	f000 fbf6 	bl	8009010 <__lshift>
 8008824:	4604      	mov	r4, r0
 8008826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d053      	beq.n	80088d4 <_dtoa_r+0x8fc>
 800882c:	4621      	mov	r1, r4
 800882e:	4648      	mov	r0, r9
 8008830:	f000 fc5a 	bl	80090e8 <__mcmp>
 8008834:	2800      	cmp	r0, #0
 8008836:	da4d      	bge.n	80088d4 <_dtoa_r+0x8fc>
 8008838:	1e7b      	subs	r3, r7, #1
 800883a:	4649      	mov	r1, r9
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	220a      	movs	r2, #10
 8008840:	2300      	movs	r3, #0
 8008842:	4658      	mov	r0, fp
 8008844:	f000 fa3a 	bl	8008cbc <__multadd>
 8008848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800884a:	4681      	mov	r9, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 816c 	beq.w	8008b2a <_dtoa_r+0xb52>
 8008852:	2300      	movs	r3, #0
 8008854:	4629      	mov	r1, r5
 8008856:	220a      	movs	r2, #10
 8008858:	4658      	mov	r0, fp
 800885a:	f000 fa2f 	bl	8008cbc <__multadd>
 800885e:	9b08      	ldr	r3, [sp, #32]
 8008860:	4605      	mov	r5, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	dc61      	bgt.n	800892a <_dtoa_r+0x952>
 8008866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008868:	2b02      	cmp	r3, #2
 800886a:	dc3b      	bgt.n	80088e4 <_dtoa_r+0x90c>
 800886c:	e05d      	b.n	800892a <_dtoa_r+0x952>
 800886e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008870:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008874:	e746      	b.n	8008704 <_dtoa_r+0x72c>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	1e5c      	subs	r4, r3, #1
 800887a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800887c:	42a3      	cmp	r3, r4
 800887e:	bfbf      	itttt	lt
 8008880:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008882:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008884:	1ae3      	sublt	r3, r4, r3
 8008886:	18d2      	addlt	r2, r2, r3
 8008888:	bfa8      	it	ge
 800888a:	1b1c      	subge	r4, r3, r4
 800888c:	9b07      	ldr	r3, [sp, #28]
 800888e:	bfbe      	ittt	lt
 8008890:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008892:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008894:	2400      	movlt	r4, #0
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfb5      	itete	lt
 800889a:	eba8 0603 	sublt.w	r6, r8, r3
 800889e:	4646      	movge	r6, r8
 80088a0:	2300      	movlt	r3, #0
 80088a2:	9b07      	ldrge	r3, [sp, #28]
 80088a4:	e730      	b.n	8008708 <_dtoa_r+0x730>
 80088a6:	4646      	mov	r6, r8
 80088a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80088ac:	e735      	b.n	800871a <_dtoa_r+0x742>
 80088ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088b0:	e75c      	b.n	800876c <_dtoa_r+0x794>
 80088b2:	2300      	movs	r3, #0
 80088b4:	e788      	b.n	80087c8 <_dtoa_r+0x7f0>
 80088b6:	9b02      	ldr	r3, [sp, #8]
 80088b8:	e786      	b.n	80087c8 <_dtoa_r+0x7f0>
 80088ba:	2300      	movs	r3, #0
 80088bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80088be:	e788      	b.n	80087d2 <_dtoa_r+0x7fa>
 80088c0:	d09f      	beq.n	8008802 <_dtoa_r+0x82a>
 80088c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c4:	331c      	adds	r3, #28
 80088c6:	441a      	add	r2, r3
 80088c8:	4498      	add	r8, r3
 80088ca:	441e      	add	r6, r3
 80088cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80088ce:	e798      	b.n	8008802 <_dtoa_r+0x82a>
 80088d0:	4603      	mov	r3, r0
 80088d2:	e7f6      	b.n	80088c2 <_dtoa_r+0x8ea>
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	9704      	str	r7, [sp, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc20      	bgt.n	800891e <_dtoa_r+0x946>
 80088dc:	9308      	str	r3, [sp, #32]
 80088de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	dd1e      	ble.n	8008922 <_dtoa_r+0x94a>
 80088e4:	9b08      	ldr	r3, [sp, #32]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f47f aebc 	bne.w	8008664 <_dtoa_r+0x68c>
 80088ec:	4621      	mov	r1, r4
 80088ee:	2205      	movs	r2, #5
 80088f0:	4658      	mov	r0, fp
 80088f2:	f000 f9e3 	bl	8008cbc <__multadd>
 80088f6:	4601      	mov	r1, r0
 80088f8:	4604      	mov	r4, r0
 80088fa:	4648      	mov	r0, r9
 80088fc:	f000 fbf4 	bl	80090e8 <__mcmp>
 8008900:	2800      	cmp	r0, #0
 8008902:	f77f aeaf 	ble.w	8008664 <_dtoa_r+0x68c>
 8008906:	2331      	movs	r3, #49	@ 0x31
 8008908:	4656      	mov	r6, sl
 800890a:	f806 3b01 	strb.w	r3, [r6], #1
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	e6aa      	b.n	800866c <_dtoa_r+0x694>
 8008916:	9c07      	ldr	r4, [sp, #28]
 8008918:	9704      	str	r7, [sp, #16]
 800891a:	4625      	mov	r5, r4
 800891c:	e7f3      	b.n	8008906 <_dtoa_r+0x92e>
 800891e:	9b07      	ldr	r3, [sp, #28]
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8104 	beq.w	8008b32 <_dtoa_r+0xb5a>
 800892a:	2e00      	cmp	r6, #0
 800892c:	dd05      	ble.n	800893a <_dtoa_r+0x962>
 800892e:	4629      	mov	r1, r5
 8008930:	4632      	mov	r2, r6
 8008932:	4658      	mov	r0, fp
 8008934:	f000 fb6c 	bl	8009010 <__lshift>
 8008938:	4605      	mov	r5, r0
 800893a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800893c:	2b00      	cmp	r3, #0
 800893e:	d05a      	beq.n	80089f6 <_dtoa_r+0xa1e>
 8008940:	4658      	mov	r0, fp
 8008942:	6869      	ldr	r1, [r5, #4]
 8008944:	f000 f958 	bl	8008bf8 <_Balloc>
 8008948:	4606      	mov	r6, r0
 800894a:	b928      	cbnz	r0, 8008958 <_dtoa_r+0x980>
 800894c:	4602      	mov	r2, r0
 800894e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008952:	4b83      	ldr	r3, [pc, #524]	@ (8008b60 <_dtoa_r+0xb88>)
 8008954:	f7ff bb54 	b.w	8008000 <_dtoa_r+0x28>
 8008958:	692a      	ldr	r2, [r5, #16]
 800895a:	f105 010c 	add.w	r1, r5, #12
 800895e:	3202      	adds	r2, #2
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	300c      	adds	r0, #12
 8008964:	f000 fee2 	bl	800972c <memcpy>
 8008968:	2201      	movs	r2, #1
 800896a:	4631      	mov	r1, r6
 800896c:	4658      	mov	r0, fp
 800896e:	f000 fb4f 	bl	8009010 <__lshift>
 8008972:	462f      	mov	r7, r5
 8008974:	4605      	mov	r5, r0
 8008976:	f10a 0301 	add.w	r3, sl, #1
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	4453      	add	r3, sl
 8008980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	930a      	str	r3, [sp, #40]	@ 0x28
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	4621      	mov	r1, r4
 800898e:	3b01      	subs	r3, #1
 8008990:	4648      	mov	r0, r9
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	f7ff fa95 	bl	8007ec2 <quorem>
 8008998:	4639      	mov	r1, r7
 800899a:	9008      	str	r0, [sp, #32]
 800899c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089a0:	4648      	mov	r0, r9
 80089a2:	f000 fba1 	bl	80090e8 <__mcmp>
 80089a6:	462a      	mov	r2, r5
 80089a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80089aa:	4621      	mov	r1, r4
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 fbb7 	bl	8009120 <__mdiff>
 80089b2:	68c2      	ldr	r2, [r0, #12]
 80089b4:	4606      	mov	r6, r0
 80089b6:	bb02      	cbnz	r2, 80089fa <_dtoa_r+0xa22>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4648      	mov	r0, r9
 80089bc:	f000 fb94 	bl	80090e8 <__mcmp>
 80089c0:	4602      	mov	r2, r0
 80089c2:	4631      	mov	r1, r6
 80089c4:	4658      	mov	r0, fp
 80089c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80089c8:	f000 f956 	bl	8008c78 <_Bfree>
 80089cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089d0:	9e07      	ldr	r6, [sp, #28]
 80089d2:	ea43 0102 	orr.w	r1, r3, r2
 80089d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089d8:	4319      	orrs	r1, r3
 80089da:	d110      	bne.n	80089fe <_dtoa_r+0xa26>
 80089dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089e0:	d029      	beq.n	8008a36 <_dtoa_r+0xa5e>
 80089e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dd02      	ble.n	80089ee <_dtoa_r+0xa16>
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80089ee:	9b02      	ldr	r3, [sp, #8]
 80089f0:	f883 8000 	strb.w	r8, [r3]
 80089f4:	e63b      	b.n	800866e <_dtoa_r+0x696>
 80089f6:	4628      	mov	r0, r5
 80089f8:	e7bb      	b.n	8008972 <_dtoa_r+0x99a>
 80089fa:	2201      	movs	r2, #1
 80089fc:	e7e1      	b.n	80089c2 <_dtoa_r+0x9ea>
 80089fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db04      	blt.n	8008a0e <_dtoa_r+0xa36>
 8008a04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a06:	430b      	orrs	r3, r1
 8008a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	d120      	bne.n	8008a50 <_dtoa_r+0xa78>
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	dded      	ble.n	80089ee <_dtoa_r+0xa16>
 8008a12:	4649      	mov	r1, r9
 8008a14:	2201      	movs	r2, #1
 8008a16:	4658      	mov	r0, fp
 8008a18:	f000 fafa 	bl	8009010 <__lshift>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4681      	mov	r9, r0
 8008a20:	f000 fb62 	bl	80090e8 <__mcmp>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	dc03      	bgt.n	8008a30 <_dtoa_r+0xa58>
 8008a28:	d1e1      	bne.n	80089ee <_dtoa_r+0xa16>
 8008a2a:	f018 0f01 	tst.w	r8, #1
 8008a2e:	d0de      	beq.n	80089ee <_dtoa_r+0xa16>
 8008a30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a34:	d1d8      	bne.n	80089e8 <_dtoa_r+0xa10>
 8008a36:	2339      	movs	r3, #57	@ 0x39
 8008a38:	9a02      	ldr	r2, [sp, #8]
 8008a3a:	7013      	strb	r3, [r2, #0]
 8008a3c:	4633      	mov	r3, r6
 8008a3e:	461e      	mov	r6, r3
 8008a40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	2a39      	cmp	r2, #57	@ 0x39
 8008a48:	d052      	beq.n	8008af0 <_dtoa_r+0xb18>
 8008a4a:	3201      	adds	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	e60e      	b.n	800866e <_dtoa_r+0x696>
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	dd07      	ble.n	8008a64 <_dtoa_r+0xa8c>
 8008a54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a58:	d0ed      	beq.n	8008a36 <_dtoa_r+0xa5e>
 8008a5a:	9a02      	ldr	r2, [sp, #8]
 8008a5c:	f108 0301 	add.w	r3, r8, #1
 8008a60:	7013      	strb	r3, [r2, #0]
 8008a62:	e604      	b.n	800866e <_dtoa_r+0x696>
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	9a07      	ldr	r2, [sp, #28]
 8008a68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d028      	beq.n	8008ac4 <_dtoa_r+0xaec>
 8008a72:	4649      	mov	r1, r9
 8008a74:	2300      	movs	r3, #0
 8008a76:	220a      	movs	r2, #10
 8008a78:	4658      	mov	r0, fp
 8008a7a:	f000 f91f 	bl	8008cbc <__multadd>
 8008a7e:	42af      	cmp	r7, r5
 8008a80:	4681      	mov	r9, r0
 8008a82:	f04f 0300 	mov.w	r3, #0
 8008a86:	f04f 020a 	mov.w	r2, #10
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	d107      	bne.n	8008aa0 <_dtoa_r+0xac8>
 8008a90:	f000 f914 	bl	8008cbc <__multadd>
 8008a94:	4607      	mov	r7, r0
 8008a96:	4605      	mov	r5, r0
 8008a98:	9b07      	ldr	r3, [sp, #28]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	9307      	str	r3, [sp, #28]
 8008a9e:	e774      	b.n	800898a <_dtoa_r+0x9b2>
 8008aa0:	f000 f90c 	bl	8008cbc <__multadd>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	220a      	movs	r2, #10
 8008aac:	4658      	mov	r0, fp
 8008aae:	f000 f905 	bl	8008cbc <__multadd>
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	e7f0      	b.n	8008a98 <_dtoa_r+0xac0>
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	2700      	movs	r7, #0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfcc      	ite	gt
 8008abe:	461e      	movgt	r6, r3
 8008ac0:	2601      	movle	r6, #1
 8008ac2:	4456      	add	r6, sl
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4658      	mov	r0, fp
 8008aca:	f000 faa1 	bl	8009010 <__lshift>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4681      	mov	r9, r0
 8008ad2:	f000 fb09 	bl	80090e8 <__mcmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	dcb0      	bgt.n	8008a3c <_dtoa_r+0xa64>
 8008ada:	d102      	bne.n	8008ae2 <_dtoa_r+0xb0a>
 8008adc:	f018 0f01 	tst.w	r8, #1
 8008ae0:	d1ac      	bne.n	8008a3c <_dtoa_r+0xa64>
 8008ae2:	4633      	mov	r3, r6
 8008ae4:	461e      	mov	r6, r3
 8008ae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aea:	2a30      	cmp	r2, #48	@ 0x30
 8008aec:	d0fa      	beq.n	8008ae4 <_dtoa_r+0xb0c>
 8008aee:	e5be      	b.n	800866e <_dtoa_r+0x696>
 8008af0:	459a      	cmp	sl, r3
 8008af2:	d1a4      	bne.n	8008a3e <_dtoa_r+0xa66>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	3301      	adds	r3, #1
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	2331      	movs	r3, #49	@ 0x31
 8008afc:	f88a 3000 	strb.w	r3, [sl]
 8008b00:	e5b5      	b.n	800866e <_dtoa_r+0x696>
 8008b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b64 <_dtoa_r+0xb8c>
 8008b08:	b11b      	cbz	r3, 8008b12 <_dtoa_r+0xb3a>
 8008b0a:	f10a 0308 	add.w	r3, sl, #8
 8008b0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	4650      	mov	r0, sl
 8008b14:	b017      	add	sp, #92	@ 0x5c
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	f77f ae3d 	ble.w	800879c <_dtoa_r+0x7c4>
 8008b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b26:	2001      	movs	r0, #1
 8008b28:	e65b      	b.n	80087e2 <_dtoa_r+0x80a>
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f77f aed6 	ble.w	80088de <_dtoa_r+0x906>
 8008b32:	4656      	mov	r6, sl
 8008b34:	4621      	mov	r1, r4
 8008b36:	4648      	mov	r0, r9
 8008b38:	f7ff f9c3 	bl	8007ec2 <quorem>
 8008b3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b40:	9b08      	ldr	r3, [sp, #32]
 8008b42:	f806 8b01 	strb.w	r8, [r6], #1
 8008b46:	eba6 020a 	sub.w	r2, r6, sl
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	ddb3      	ble.n	8008ab6 <_dtoa_r+0xade>
 8008b4e:	4649      	mov	r1, r9
 8008b50:	2300      	movs	r3, #0
 8008b52:	220a      	movs	r2, #10
 8008b54:	4658      	mov	r0, fp
 8008b56:	f000 f8b1 	bl	8008cbc <__multadd>
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	e7ea      	b.n	8008b34 <_dtoa_r+0xb5c>
 8008b5e:	bf00      	nop
 8008b60:	08009ee6 	.word	0x08009ee6
 8008b64:	08009e6a 	.word	0x08009e6a

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d040      	beq.n	8008bf2 <_free_r+0x8a>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f7fe fb76 	bl	800726c <__malloc_lock>
 8008b80:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf4 <_free_r+0x8c>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x2c>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b90:	f7fe bb72 	b.w	8007278 <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x42>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1809      	addeq	r1, r1, r0
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x1e>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x4c>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x42>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1850      	adds	r0, r2, r1
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x6c>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	1850      	adds	r0, r2, r1
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x22>
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4408      	add	r0, r1
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	6053      	str	r3, [r2, #4]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x22>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x74>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x22>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	1821      	adds	r1, r4, r0
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf01      	itttt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	1809      	addeq	r1, r1, r0
 8008bea:	6021      	streq	r1, [r4, #0]
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	6054      	str	r4, [r2, #4]
 8008bf0:	e7cb      	b.n	8008b8a <_free_r+0x22>
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	200002e8 	.word	0x200002e8

08008bf8 <_Balloc>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	69c6      	ldr	r6, [r0, #28]
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	460d      	mov	r5, r1
 8008c00:	b976      	cbnz	r6, 8008c20 <_Balloc+0x28>
 8008c02:	2010      	movs	r0, #16
 8008c04:	f7fe fa80 	bl	8007108 <malloc>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	61e0      	str	r0, [r4, #28]
 8008c0c:	b920      	cbnz	r0, 8008c18 <_Balloc+0x20>
 8008c0e:	216b      	movs	r1, #107	@ 0x6b
 8008c10:	4b17      	ldr	r3, [pc, #92]	@ (8008c70 <_Balloc+0x78>)
 8008c12:	4818      	ldr	r0, [pc, #96]	@ (8008c74 <_Balloc+0x7c>)
 8008c14:	f000 fd98 	bl	8009748 <__assert_func>
 8008c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c1c:	6006      	str	r6, [r0, #0]
 8008c1e:	60c6      	str	r6, [r0, #12]
 8008c20:	69e6      	ldr	r6, [r4, #28]
 8008c22:	68f3      	ldr	r3, [r6, #12]
 8008c24:	b183      	cbz	r3, 8008c48 <_Balloc+0x50>
 8008c26:	69e3      	ldr	r3, [r4, #28]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c2e:	b9b8      	cbnz	r0, 8008c60 <_Balloc+0x68>
 8008c30:	2101      	movs	r1, #1
 8008c32:	fa01 f605 	lsl.w	r6, r1, r5
 8008c36:	1d72      	adds	r2, r6, #5
 8008c38:	4620      	mov	r0, r4
 8008c3a:	0092      	lsls	r2, r2, #2
 8008c3c:	f000 fda2 	bl	8009784 <_calloc_r>
 8008c40:	b160      	cbz	r0, 8008c5c <_Balloc+0x64>
 8008c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c46:	e00e      	b.n	8008c66 <_Balloc+0x6e>
 8008c48:	2221      	movs	r2, #33	@ 0x21
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 fd99 	bl	8009784 <_calloc_r>
 8008c52:	69e3      	ldr	r3, [r4, #28]
 8008c54:	60f0      	str	r0, [r6, #12]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e4      	bne.n	8008c26 <_Balloc+0x2e>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	6802      	ldr	r2, [r0, #0]
 8008c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c66:	2300      	movs	r3, #0
 8008c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c6c:	e7f7      	b.n	8008c5e <_Balloc+0x66>
 8008c6e:	bf00      	nop
 8008c70:	08009e77 	.word	0x08009e77
 8008c74:	08009ef7 	.word	0x08009ef7

08008c78 <_Bfree>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	69c6      	ldr	r6, [r0, #28]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	b976      	cbnz	r6, 8008ca0 <_Bfree+0x28>
 8008c82:	2010      	movs	r0, #16
 8008c84:	f7fe fa40 	bl	8007108 <malloc>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	61e8      	str	r0, [r5, #28]
 8008c8c:	b920      	cbnz	r0, 8008c98 <_Bfree+0x20>
 8008c8e:	218f      	movs	r1, #143	@ 0x8f
 8008c90:	4b08      	ldr	r3, [pc, #32]	@ (8008cb4 <_Bfree+0x3c>)
 8008c92:	4809      	ldr	r0, [pc, #36]	@ (8008cb8 <_Bfree+0x40>)
 8008c94:	f000 fd58 	bl	8009748 <__assert_func>
 8008c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c9c:	6006      	str	r6, [r0, #0]
 8008c9e:	60c6      	str	r6, [r0, #12]
 8008ca0:	b13c      	cbz	r4, 8008cb2 <_Bfree+0x3a>
 8008ca2:	69eb      	ldr	r3, [r5, #28]
 8008ca4:	6862      	ldr	r2, [r4, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cac:	6021      	str	r1, [r4, #0]
 8008cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	08009e77 	.word	0x08009e77
 8008cb8:	08009ef7 	.word	0x08009ef7

08008cbc <__multadd>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	461e      	mov	r6, r3
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	690d      	ldr	r5, [r1, #16]
 8008cca:	f101 0c14 	add.w	ip, r1, #20
 8008cce:	f8dc 3000 	ldr.w	r3, [ip]
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	b299      	uxth	r1, r3
 8008cd6:	fb02 6101 	mla	r1, r2, r1, r6
 8008cda:	0c1e      	lsrs	r6, r3, #16
 8008cdc:	0c0b      	lsrs	r3, r1, #16
 8008cde:	fb02 3306 	mla	r3, r2, r6, r3
 8008ce2:	b289      	uxth	r1, r1
 8008ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ce8:	4285      	cmp	r5, r0
 8008cea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cee:	f84c 1b04 	str.w	r1, [ip], #4
 8008cf2:	dcec      	bgt.n	8008cce <__multadd+0x12>
 8008cf4:	b30e      	cbz	r6, 8008d3a <__multadd+0x7e>
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc19      	bgt.n	8008d30 <__multadd+0x74>
 8008cfc:	6861      	ldr	r1, [r4, #4]
 8008cfe:	4638      	mov	r0, r7
 8008d00:	3101      	adds	r1, #1
 8008d02:	f7ff ff79 	bl	8008bf8 <_Balloc>
 8008d06:	4680      	mov	r8, r0
 8008d08:	b928      	cbnz	r0, 8008d16 <__multadd+0x5a>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	21ba      	movs	r1, #186	@ 0xba
 8008d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d40 <__multadd+0x84>)
 8008d10:	480c      	ldr	r0, [pc, #48]	@ (8008d44 <__multadd+0x88>)
 8008d12:	f000 fd19 	bl	8009748 <__assert_func>
 8008d16:	6922      	ldr	r2, [r4, #16]
 8008d18:	f104 010c 	add.w	r1, r4, #12
 8008d1c:	3202      	adds	r2, #2
 8008d1e:	0092      	lsls	r2, r2, #2
 8008d20:	300c      	adds	r0, #12
 8008d22:	f000 fd03 	bl	800972c <memcpy>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff ffa5 	bl	8008c78 <_Bfree>
 8008d2e:	4644      	mov	r4, r8
 8008d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d34:	3501      	adds	r5, #1
 8008d36:	615e      	str	r6, [r3, #20]
 8008d38:	6125      	str	r5, [r4, #16]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d40:	08009ee6 	.word	0x08009ee6
 8008d44:	08009ef7 	.word	0x08009ef7

08008d48 <__hi0bits>:
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d4e:	bf3a      	itte	cc
 8008d50:	0403      	lslcc	r3, r0, #16
 8008d52:	2010      	movcc	r0, #16
 8008d54:	2000      	movcs	r0, #0
 8008d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d5a:	bf3c      	itt	cc
 8008d5c:	021b      	lslcc	r3, r3, #8
 8008d5e:	3008      	addcc	r0, #8
 8008d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d64:	bf3c      	itt	cc
 8008d66:	011b      	lslcc	r3, r3, #4
 8008d68:	3004      	addcc	r0, #4
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6e:	bf3c      	itt	cc
 8008d70:	009b      	lslcc	r3, r3, #2
 8008d72:	3002      	addcc	r0, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db05      	blt.n	8008d84 <__hi0bits+0x3c>
 8008d78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d7c:	f100 0001 	add.w	r0, r0, #1
 8008d80:	bf08      	it	eq
 8008d82:	2020      	moveq	r0, #32
 8008d84:	4770      	bx	lr

08008d86 <__lo0bits>:
 8008d86:	6803      	ldr	r3, [r0, #0]
 8008d88:	4602      	mov	r2, r0
 8008d8a:	f013 0007 	ands.w	r0, r3, #7
 8008d8e:	d00b      	beq.n	8008da8 <__lo0bits+0x22>
 8008d90:	07d9      	lsls	r1, r3, #31
 8008d92:	d421      	bmi.n	8008dd8 <__lo0bits+0x52>
 8008d94:	0798      	lsls	r0, r3, #30
 8008d96:	bf49      	itett	mi
 8008d98:	085b      	lsrmi	r3, r3, #1
 8008d9a:	089b      	lsrpl	r3, r3, #2
 8008d9c:	2001      	movmi	r0, #1
 8008d9e:	6013      	strmi	r3, [r2, #0]
 8008da0:	bf5c      	itt	pl
 8008da2:	2002      	movpl	r0, #2
 8008da4:	6013      	strpl	r3, [r2, #0]
 8008da6:	4770      	bx	lr
 8008da8:	b299      	uxth	r1, r3
 8008daa:	b909      	cbnz	r1, 8008db0 <__lo0bits+0x2a>
 8008dac:	2010      	movs	r0, #16
 8008dae:	0c1b      	lsrs	r3, r3, #16
 8008db0:	b2d9      	uxtb	r1, r3
 8008db2:	b909      	cbnz	r1, 8008db8 <__lo0bits+0x32>
 8008db4:	3008      	adds	r0, #8
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	0719      	lsls	r1, r3, #28
 8008dba:	bf04      	itt	eq
 8008dbc:	091b      	lsreq	r3, r3, #4
 8008dbe:	3004      	addeq	r0, #4
 8008dc0:	0799      	lsls	r1, r3, #30
 8008dc2:	bf04      	itt	eq
 8008dc4:	089b      	lsreq	r3, r3, #2
 8008dc6:	3002      	addeq	r0, #2
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	d403      	bmi.n	8008dd4 <__lo0bits+0x4e>
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f100 0001 	add.w	r0, r0, #1
 8008dd2:	d003      	beq.n	8008ddc <__lo0bits+0x56>
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	4770      	bx	lr
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4770      	bx	lr
 8008ddc:	2020      	movs	r0, #32
 8008dde:	4770      	bx	lr

08008de0 <__i2b>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	460c      	mov	r4, r1
 8008de4:	2101      	movs	r1, #1
 8008de6:	f7ff ff07 	bl	8008bf8 <_Balloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	b928      	cbnz	r0, 8008dfa <__i2b+0x1a>
 8008dee:	f240 1145 	movw	r1, #325	@ 0x145
 8008df2:	4b04      	ldr	r3, [pc, #16]	@ (8008e04 <__i2b+0x24>)
 8008df4:	4804      	ldr	r0, [pc, #16]	@ (8008e08 <__i2b+0x28>)
 8008df6:	f000 fca7 	bl	8009748 <__assert_func>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	6144      	str	r4, [r0, #20]
 8008dfe:	6103      	str	r3, [r0, #16]
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	bf00      	nop
 8008e04:	08009ee6 	.word	0x08009ee6
 8008e08:	08009ef7 	.word	0x08009ef7

08008e0c <__multiply>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	4614      	mov	r4, r2
 8008e12:	690a      	ldr	r2, [r1, #16]
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	460f      	mov	r7, r1
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	bfa2      	ittt	ge
 8008e1c:	4623      	movge	r3, r4
 8008e1e:	460c      	movge	r4, r1
 8008e20:	461f      	movge	r7, r3
 8008e22:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e26:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	eb0a 0609 	add.w	r6, sl, r9
 8008e32:	42b3      	cmp	r3, r6
 8008e34:	b085      	sub	sp, #20
 8008e36:	bfb8      	it	lt
 8008e38:	3101      	addlt	r1, #1
 8008e3a:	f7ff fedd 	bl	8008bf8 <_Balloc>
 8008e3e:	b930      	cbnz	r0, 8008e4e <__multiply+0x42>
 8008e40:	4602      	mov	r2, r0
 8008e42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e46:	4b43      	ldr	r3, [pc, #268]	@ (8008f54 <__multiply+0x148>)
 8008e48:	4843      	ldr	r0, [pc, #268]	@ (8008f58 <__multiply+0x14c>)
 8008e4a:	f000 fc7d 	bl	8009748 <__assert_func>
 8008e4e:	f100 0514 	add.w	r5, r0, #20
 8008e52:	462b      	mov	r3, r5
 8008e54:	2200      	movs	r2, #0
 8008e56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e5a:	4543      	cmp	r3, r8
 8008e5c:	d321      	bcc.n	8008ea2 <__multiply+0x96>
 8008e5e:	f107 0114 	add.w	r1, r7, #20
 8008e62:	f104 0214 	add.w	r2, r4, #20
 8008e66:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e6a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	1b13      	subs	r3, r2, r4
 8008e72:	3b15      	subs	r3, #21
 8008e74:	f023 0303 	bic.w	r3, r3, #3
 8008e78:	3304      	adds	r3, #4
 8008e7a:	f104 0715 	add.w	r7, r4, #21
 8008e7e:	42ba      	cmp	r2, r7
 8008e80:	bf38      	it	cc
 8008e82:	2304      	movcc	r3, #4
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	9b02      	ldr	r3, [sp, #8]
 8008e88:	9103      	str	r1, [sp, #12]
 8008e8a:	428b      	cmp	r3, r1
 8008e8c:	d80c      	bhi.n	8008ea8 <__multiply+0x9c>
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	dd03      	ble.n	8008e9a <__multiply+0x8e>
 8008e92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d05a      	beq.n	8008f50 <__multiply+0x144>
 8008e9a:	6106      	str	r6, [r0, #16]
 8008e9c:	b005      	add	sp, #20
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	f843 2b04 	str.w	r2, [r3], #4
 8008ea6:	e7d8      	b.n	8008e5a <__multiply+0x4e>
 8008ea8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008eac:	f1ba 0f00 	cmp.w	sl, #0
 8008eb0:	d023      	beq.n	8008efa <__multiply+0xee>
 8008eb2:	46a9      	mov	r9, r5
 8008eb4:	f04f 0c00 	mov.w	ip, #0
 8008eb8:	f104 0e14 	add.w	lr, r4, #20
 8008ebc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ec0:	f8d9 3000 	ldr.w	r3, [r9]
 8008ec4:	fa1f fb87 	uxth.w	fp, r7
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ece:	4463      	add	r3, ip
 8008ed0:	f8d9 c000 	ldr.w	ip, [r9]
 8008ed4:	0c3f      	lsrs	r7, r7, #16
 8008ed6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008eda:	fb0a c707 	mla	r7, sl, r7, ip
 8008ede:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ee8:	4572      	cmp	r2, lr
 8008eea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008eee:	f849 3b04 	str.w	r3, [r9], #4
 8008ef2:	d8e3      	bhi.n	8008ebc <__multiply+0xb0>
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	f845 c003 	str.w	ip, [r5, r3]
 8008efa:	9b03      	ldr	r3, [sp, #12]
 8008efc:	3104      	adds	r1, #4
 8008efe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f02:	f1b9 0f00 	cmp.w	r9, #0
 8008f06:	d021      	beq.n	8008f4c <__multiply+0x140>
 8008f08:	46ae      	mov	lr, r5
 8008f0a:	f04f 0a00 	mov.w	sl, #0
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	f104 0c14 	add.w	ip, r4, #20
 8008f14:	f8bc b000 	ldrh.w	fp, [ip]
 8008f18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	fb09 770b 	mla	r7, r9, fp, r7
 8008f22:	4457      	add	r7, sl
 8008f24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f28:	f84e 3b04 	str.w	r3, [lr], #4
 8008f2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f34:	f8be 3000 	ldrh.w	r3, [lr]
 8008f38:	4562      	cmp	r2, ip
 8008f3a:	fb09 330a 	mla	r3, r9, sl, r3
 8008f3e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f46:	d8e5      	bhi.n	8008f14 <__multiply+0x108>
 8008f48:	9f01      	ldr	r7, [sp, #4]
 8008f4a:	51eb      	str	r3, [r5, r7]
 8008f4c:	3504      	adds	r5, #4
 8008f4e:	e79a      	b.n	8008e86 <__multiply+0x7a>
 8008f50:	3e01      	subs	r6, #1
 8008f52:	e79c      	b.n	8008e8e <__multiply+0x82>
 8008f54:	08009ee6 	.word	0x08009ee6
 8008f58:	08009ef7 	.word	0x08009ef7

08008f5c <__pow5mult>:
 8008f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f60:	4615      	mov	r5, r2
 8008f62:	f012 0203 	ands.w	r2, r2, #3
 8008f66:	4607      	mov	r7, r0
 8008f68:	460e      	mov	r6, r1
 8008f6a:	d007      	beq.n	8008f7c <__pow5mult+0x20>
 8008f6c:	4c25      	ldr	r4, [pc, #148]	@ (8009004 <__pow5mult+0xa8>)
 8008f6e:	3a01      	subs	r2, #1
 8008f70:	2300      	movs	r3, #0
 8008f72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f76:	f7ff fea1 	bl	8008cbc <__multadd>
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	10ad      	asrs	r5, r5, #2
 8008f7e:	d03d      	beq.n	8008ffc <__pow5mult+0xa0>
 8008f80:	69fc      	ldr	r4, [r7, #28]
 8008f82:	b97c      	cbnz	r4, 8008fa4 <__pow5mult+0x48>
 8008f84:	2010      	movs	r0, #16
 8008f86:	f7fe f8bf 	bl	8007108 <malloc>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	61f8      	str	r0, [r7, #28]
 8008f8e:	b928      	cbnz	r0, 8008f9c <__pow5mult+0x40>
 8008f90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f94:	4b1c      	ldr	r3, [pc, #112]	@ (8009008 <__pow5mult+0xac>)
 8008f96:	481d      	ldr	r0, [pc, #116]	@ (800900c <__pow5mult+0xb0>)
 8008f98:	f000 fbd6 	bl	8009748 <__assert_func>
 8008f9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fa0:	6004      	str	r4, [r0, #0]
 8008fa2:	60c4      	str	r4, [r0, #12]
 8008fa4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fac:	b94c      	cbnz	r4, 8008fc2 <__pow5mult+0x66>
 8008fae:	f240 2171 	movw	r1, #625	@ 0x271
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f7ff ff14 	bl	8008de0 <__i2b>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4604      	mov	r4, r0
 8008fbc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	f04f 0900 	mov.w	r9, #0
 8008fc6:	07eb      	lsls	r3, r5, #31
 8008fc8:	d50a      	bpl.n	8008fe0 <__pow5mult+0x84>
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f7ff ff1c 	bl	8008e0c <__multiply>
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4638      	mov	r0, r7
 8008fda:	f7ff fe4d 	bl	8008c78 <_Bfree>
 8008fde:	4646      	mov	r6, r8
 8008fe0:	106d      	asrs	r5, r5, #1
 8008fe2:	d00b      	beq.n	8008ffc <__pow5mult+0xa0>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	b938      	cbnz	r0, 8008ff8 <__pow5mult+0x9c>
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4621      	mov	r1, r4
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff ff0d 	bl	8008e0c <__multiply>
 8008ff2:	6020      	str	r0, [r4, #0]
 8008ff4:	f8c0 9000 	str.w	r9, [r0]
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	e7e4      	b.n	8008fc6 <__pow5mult+0x6a>
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009002:	bf00      	nop
 8009004:	08009f50 	.word	0x08009f50
 8009008:	08009e77 	.word	0x08009e77
 800900c:	08009ef7 	.word	0x08009ef7

08009010 <__lshift>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	460c      	mov	r4, r1
 8009016:	4607      	mov	r7, r0
 8009018:	4691      	mov	r9, r2
 800901a:	6923      	ldr	r3, [r4, #16]
 800901c:	6849      	ldr	r1, [r1, #4]
 800901e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009028:	f108 0601 	add.w	r6, r8, #1
 800902c:	42b3      	cmp	r3, r6
 800902e:	db0b      	blt.n	8009048 <__lshift+0x38>
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff fde1 	bl	8008bf8 <_Balloc>
 8009036:	4605      	mov	r5, r0
 8009038:	b948      	cbnz	r0, 800904e <__lshift+0x3e>
 800903a:	4602      	mov	r2, r0
 800903c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009040:	4b27      	ldr	r3, [pc, #156]	@ (80090e0 <__lshift+0xd0>)
 8009042:	4828      	ldr	r0, [pc, #160]	@ (80090e4 <__lshift+0xd4>)
 8009044:	f000 fb80 	bl	8009748 <__assert_func>
 8009048:	3101      	adds	r1, #1
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	e7ee      	b.n	800902c <__lshift+0x1c>
 800904e:	2300      	movs	r3, #0
 8009050:	f100 0114 	add.w	r1, r0, #20
 8009054:	f100 0210 	add.w	r2, r0, #16
 8009058:	4618      	mov	r0, r3
 800905a:	4553      	cmp	r3, sl
 800905c:	db33      	blt.n	80090c6 <__lshift+0xb6>
 800905e:	6920      	ldr	r0, [r4, #16]
 8009060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009064:	f104 0314 	add.w	r3, r4, #20
 8009068:	f019 091f 	ands.w	r9, r9, #31
 800906c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009074:	d02b      	beq.n	80090ce <__lshift+0xbe>
 8009076:	468a      	mov	sl, r1
 8009078:	2200      	movs	r2, #0
 800907a:	f1c9 0e20 	rsb	lr, r9, #32
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	fa00 f009 	lsl.w	r0, r0, r9
 8009084:	4310      	orrs	r0, r2
 8009086:	f84a 0b04 	str.w	r0, [sl], #4
 800908a:	f853 2b04 	ldr.w	r2, [r3], #4
 800908e:	459c      	cmp	ip, r3
 8009090:	fa22 f20e 	lsr.w	r2, r2, lr
 8009094:	d8f3      	bhi.n	800907e <__lshift+0x6e>
 8009096:	ebac 0304 	sub.w	r3, ip, r4
 800909a:	3b15      	subs	r3, #21
 800909c:	f023 0303 	bic.w	r3, r3, #3
 80090a0:	3304      	adds	r3, #4
 80090a2:	f104 0015 	add.w	r0, r4, #21
 80090a6:	4584      	cmp	ip, r0
 80090a8:	bf38      	it	cc
 80090aa:	2304      	movcc	r3, #4
 80090ac:	50ca      	str	r2, [r1, r3]
 80090ae:	b10a      	cbz	r2, 80090b4 <__lshift+0xa4>
 80090b0:	f108 0602 	add.w	r6, r8, #2
 80090b4:	3e01      	subs	r6, #1
 80090b6:	4638      	mov	r0, r7
 80090b8:	4621      	mov	r1, r4
 80090ba:	612e      	str	r6, [r5, #16]
 80090bc:	f7ff fddc 	bl	8008c78 <_Bfree>
 80090c0:	4628      	mov	r0, r5
 80090c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ca:	3301      	adds	r3, #1
 80090cc:	e7c5      	b.n	800905a <__lshift+0x4a>
 80090ce:	3904      	subs	r1, #4
 80090d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d4:	459c      	cmp	ip, r3
 80090d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80090da:	d8f9      	bhi.n	80090d0 <__lshift+0xc0>
 80090dc:	e7ea      	b.n	80090b4 <__lshift+0xa4>
 80090de:	bf00      	nop
 80090e0:	08009ee6 	.word	0x08009ee6
 80090e4:	08009ef7 	.word	0x08009ef7

080090e8 <__mcmp>:
 80090e8:	4603      	mov	r3, r0
 80090ea:	690a      	ldr	r2, [r1, #16]
 80090ec:	6900      	ldr	r0, [r0, #16]
 80090ee:	b530      	push	{r4, r5, lr}
 80090f0:	1a80      	subs	r0, r0, r2
 80090f2:	d10e      	bne.n	8009112 <__mcmp+0x2a>
 80090f4:	3314      	adds	r3, #20
 80090f6:	3114      	adds	r1, #20
 80090f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009108:	4295      	cmp	r5, r2
 800910a:	d003      	beq.n	8009114 <__mcmp+0x2c>
 800910c:	d205      	bcs.n	800911a <__mcmp+0x32>
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	bd30      	pop	{r4, r5, pc}
 8009114:	42a3      	cmp	r3, r4
 8009116:	d3f3      	bcc.n	8009100 <__mcmp+0x18>
 8009118:	e7fb      	b.n	8009112 <__mcmp+0x2a>
 800911a:	2001      	movs	r0, #1
 800911c:	e7f9      	b.n	8009112 <__mcmp+0x2a>
	...

08009120 <__mdiff>:
 8009120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	4689      	mov	r9, r1
 8009126:	4606      	mov	r6, r0
 8009128:	4611      	mov	r1, r2
 800912a:	4648      	mov	r0, r9
 800912c:	4614      	mov	r4, r2
 800912e:	f7ff ffdb 	bl	80090e8 <__mcmp>
 8009132:	1e05      	subs	r5, r0, #0
 8009134:	d112      	bne.n	800915c <__mdiff+0x3c>
 8009136:	4629      	mov	r1, r5
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff fd5d 	bl	8008bf8 <_Balloc>
 800913e:	4602      	mov	r2, r0
 8009140:	b928      	cbnz	r0, 800914e <__mdiff+0x2e>
 8009142:	f240 2137 	movw	r1, #567	@ 0x237
 8009146:	4b3e      	ldr	r3, [pc, #248]	@ (8009240 <__mdiff+0x120>)
 8009148:	483e      	ldr	r0, [pc, #248]	@ (8009244 <__mdiff+0x124>)
 800914a:	f000 fafd 	bl	8009748 <__assert_func>
 800914e:	2301      	movs	r3, #1
 8009150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009154:	4610      	mov	r0, r2
 8009156:	b003      	add	sp, #12
 8009158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915c:	bfbc      	itt	lt
 800915e:	464b      	movlt	r3, r9
 8009160:	46a1      	movlt	r9, r4
 8009162:	4630      	mov	r0, r6
 8009164:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009168:	bfba      	itte	lt
 800916a:	461c      	movlt	r4, r3
 800916c:	2501      	movlt	r5, #1
 800916e:	2500      	movge	r5, #0
 8009170:	f7ff fd42 	bl	8008bf8 <_Balloc>
 8009174:	4602      	mov	r2, r0
 8009176:	b918      	cbnz	r0, 8009180 <__mdiff+0x60>
 8009178:	f240 2145 	movw	r1, #581	@ 0x245
 800917c:	4b30      	ldr	r3, [pc, #192]	@ (8009240 <__mdiff+0x120>)
 800917e:	e7e3      	b.n	8009148 <__mdiff+0x28>
 8009180:	f100 0b14 	add.w	fp, r0, #20
 8009184:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009188:	f109 0310 	add.w	r3, r9, #16
 800918c:	60c5      	str	r5, [r0, #12]
 800918e:	f04f 0c00 	mov.w	ip, #0
 8009192:	f109 0514 	add.w	r5, r9, #20
 8009196:	46d9      	mov	r9, fp
 8009198:	6926      	ldr	r6, [r4, #16]
 800919a:	f104 0e14 	add.w	lr, r4, #20
 800919e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	9b01      	ldr	r3, [sp, #4]
 80091aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091b2:	b281      	uxth	r1, r0
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	fa1f f38a 	uxth.w	r3, sl
 80091ba:	1a5b      	subs	r3, r3, r1
 80091bc:	0c00      	lsrs	r0, r0, #16
 80091be:	4463      	add	r3, ip
 80091c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091ce:	4576      	cmp	r6, lr
 80091d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091d4:	f849 3b04 	str.w	r3, [r9], #4
 80091d8:	d8e6      	bhi.n	80091a8 <__mdiff+0x88>
 80091da:	1b33      	subs	r3, r6, r4
 80091dc:	3b15      	subs	r3, #21
 80091de:	f023 0303 	bic.w	r3, r3, #3
 80091e2:	3415      	adds	r4, #21
 80091e4:	3304      	adds	r3, #4
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	bf38      	it	cc
 80091ea:	2304      	movcc	r3, #4
 80091ec:	441d      	add	r5, r3
 80091ee:	445b      	add	r3, fp
 80091f0:	461e      	mov	r6, r3
 80091f2:	462c      	mov	r4, r5
 80091f4:	4544      	cmp	r4, r8
 80091f6:	d30e      	bcc.n	8009216 <__mdiff+0xf6>
 80091f8:	f108 0103 	add.w	r1, r8, #3
 80091fc:	1b49      	subs	r1, r1, r5
 80091fe:	f021 0103 	bic.w	r1, r1, #3
 8009202:	3d03      	subs	r5, #3
 8009204:	45a8      	cmp	r8, r5
 8009206:	bf38      	it	cc
 8009208:	2100      	movcc	r1, #0
 800920a:	440b      	add	r3, r1
 800920c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009210:	b199      	cbz	r1, 800923a <__mdiff+0x11a>
 8009212:	6117      	str	r7, [r2, #16]
 8009214:	e79e      	b.n	8009154 <__mdiff+0x34>
 8009216:	46e6      	mov	lr, ip
 8009218:	f854 1b04 	ldr.w	r1, [r4], #4
 800921c:	fa1f fc81 	uxth.w	ip, r1
 8009220:	44f4      	add	ip, lr
 8009222:	0c08      	lsrs	r0, r1, #16
 8009224:	4471      	add	r1, lr
 8009226:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800922a:	b289      	uxth	r1, r1
 800922c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009230:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009234:	f846 1b04 	str.w	r1, [r6], #4
 8009238:	e7dc      	b.n	80091f4 <__mdiff+0xd4>
 800923a:	3f01      	subs	r7, #1
 800923c:	e7e6      	b.n	800920c <__mdiff+0xec>
 800923e:	bf00      	nop
 8009240:	08009ee6 	.word	0x08009ee6
 8009244:	08009ef7 	.word	0x08009ef7

08009248 <__d2b>:
 8009248:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800924c:	2101      	movs	r1, #1
 800924e:	4690      	mov	r8, r2
 8009250:	4699      	mov	r9, r3
 8009252:	9e08      	ldr	r6, [sp, #32]
 8009254:	f7ff fcd0 	bl	8008bf8 <_Balloc>
 8009258:	4604      	mov	r4, r0
 800925a:	b930      	cbnz	r0, 800926a <__d2b+0x22>
 800925c:	4602      	mov	r2, r0
 800925e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009262:	4b23      	ldr	r3, [pc, #140]	@ (80092f0 <__d2b+0xa8>)
 8009264:	4823      	ldr	r0, [pc, #140]	@ (80092f4 <__d2b+0xac>)
 8009266:	f000 fa6f 	bl	8009748 <__assert_func>
 800926a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800926e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009272:	b10d      	cbz	r5, 8009278 <__d2b+0x30>
 8009274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	f1b8 0300 	subs.w	r3, r8, #0
 800927e:	d024      	beq.n	80092ca <__d2b+0x82>
 8009280:	4668      	mov	r0, sp
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	f7ff fd7f 	bl	8008d86 <__lo0bits>
 8009288:	e9dd 1200 	ldrd	r1, r2, [sp]
 800928c:	b1d8      	cbz	r0, 80092c6 <__d2b+0x7e>
 800928e:	f1c0 0320 	rsb	r3, r0, #32
 8009292:	fa02 f303 	lsl.w	r3, r2, r3
 8009296:	430b      	orrs	r3, r1
 8009298:	40c2      	lsrs	r2, r0
 800929a:	6163      	str	r3, [r4, #20]
 800929c:	9201      	str	r2, [sp, #4]
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bf0c      	ite	eq
 80092a4:	2201      	moveq	r2, #1
 80092a6:	2202      	movne	r2, #2
 80092a8:	61a3      	str	r3, [r4, #24]
 80092aa:	6122      	str	r2, [r4, #16]
 80092ac:	b1ad      	cbz	r5, 80092da <__d2b+0x92>
 80092ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092b2:	4405      	add	r5, r0
 80092b4:	6035      	str	r5, [r6, #0]
 80092b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092bc:	6018      	str	r0, [r3, #0]
 80092be:	4620      	mov	r0, r4
 80092c0:	b002      	add	sp, #8
 80092c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80092c6:	6161      	str	r1, [r4, #20]
 80092c8:	e7e9      	b.n	800929e <__d2b+0x56>
 80092ca:	a801      	add	r0, sp, #4
 80092cc:	f7ff fd5b 	bl	8008d86 <__lo0bits>
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	6163      	str	r3, [r4, #20]
 80092d6:	3020      	adds	r0, #32
 80092d8:	e7e7      	b.n	80092aa <__d2b+0x62>
 80092da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092e2:	6030      	str	r0, [r6, #0]
 80092e4:	6918      	ldr	r0, [r3, #16]
 80092e6:	f7ff fd2f 	bl	8008d48 <__hi0bits>
 80092ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ee:	e7e4      	b.n	80092ba <__d2b+0x72>
 80092f0:	08009ee6 	.word	0x08009ee6
 80092f4:	08009ef7 	.word	0x08009ef7

080092f8 <__ssputs_r>:
 80092f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	461f      	mov	r7, r3
 80092fe:	688e      	ldr	r6, [r1, #8]
 8009300:	4682      	mov	sl, r0
 8009302:	42be      	cmp	r6, r7
 8009304:	460c      	mov	r4, r1
 8009306:	4690      	mov	r8, r2
 8009308:	680b      	ldr	r3, [r1, #0]
 800930a:	d82d      	bhi.n	8009368 <__ssputs_r+0x70>
 800930c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009310:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009314:	d026      	beq.n	8009364 <__ssputs_r+0x6c>
 8009316:	6965      	ldr	r5, [r4, #20]
 8009318:	6909      	ldr	r1, [r1, #16]
 800931a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800931e:	eba3 0901 	sub.w	r9, r3, r1
 8009322:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009326:	1c7b      	adds	r3, r7, #1
 8009328:	444b      	add	r3, r9
 800932a:	106d      	asrs	r5, r5, #1
 800932c:	429d      	cmp	r5, r3
 800932e:	bf38      	it	cc
 8009330:	461d      	movcc	r5, r3
 8009332:	0553      	lsls	r3, r2, #21
 8009334:	d527      	bpl.n	8009386 <__ssputs_r+0x8e>
 8009336:	4629      	mov	r1, r5
 8009338:	f7fd ff18 	bl	800716c <_malloc_r>
 800933c:	4606      	mov	r6, r0
 800933e:	b360      	cbz	r0, 800939a <__ssputs_r+0xa2>
 8009340:	464a      	mov	r2, r9
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	f000 f9f2 	bl	800972c <memcpy>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800934e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	6126      	str	r6, [r4, #16]
 8009356:	444e      	add	r6, r9
 8009358:	6026      	str	r6, [r4, #0]
 800935a:	463e      	mov	r6, r7
 800935c:	6165      	str	r5, [r4, #20]
 800935e:	eba5 0509 	sub.w	r5, r5, r9
 8009362:	60a5      	str	r5, [r4, #8]
 8009364:	42be      	cmp	r6, r7
 8009366:	d900      	bls.n	800936a <__ssputs_r+0x72>
 8009368:	463e      	mov	r6, r7
 800936a:	4632      	mov	r2, r6
 800936c:	4641      	mov	r1, r8
 800936e:	6820      	ldr	r0, [r4, #0]
 8009370:	f000 f9c2 	bl	80096f8 <memmove>
 8009374:	2000      	movs	r0, #0
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	1b9b      	subs	r3, r3, r6
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	4433      	add	r3, r6
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009386:	462a      	mov	r2, r5
 8009388:	f000 fa22 	bl	80097d0 <_realloc_r>
 800938c:	4606      	mov	r6, r0
 800938e:	2800      	cmp	r0, #0
 8009390:	d1e0      	bne.n	8009354 <__ssputs_r+0x5c>
 8009392:	4650      	mov	r0, sl
 8009394:	6921      	ldr	r1, [r4, #16]
 8009396:	f7ff fbe7 	bl	8008b68 <_free_r>
 800939a:	230c      	movs	r3, #12
 800939c:	f8ca 3000 	str.w	r3, [sl]
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f04f 30ff 	mov.w	r0, #4294967295
 80093a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	e7e9      	b.n	8009382 <__ssputs_r+0x8a>
	...

080093b0 <_svfiprintf_r>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	4698      	mov	r8, r3
 80093b6:	898b      	ldrh	r3, [r1, #12]
 80093b8:	4607      	mov	r7, r0
 80093ba:	061b      	lsls	r3, r3, #24
 80093bc:	460d      	mov	r5, r1
 80093be:	4614      	mov	r4, r2
 80093c0:	b09d      	sub	sp, #116	@ 0x74
 80093c2:	d510      	bpl.n	80093e6 <_svfiprintf_r+0x36>
 80093c4:	690b      	ldr	r3, [r1, #16]
 80093c6:	b973      	cbnz	r3, 80093e6 <_svfiprintf_r+0x36>
 80093c8:	2140      	movs	r1, #64	@ 0x40
 80093ca:	f7fd fecf 	bl	800716c <_malloc_r>
 80093ce:	6028      	str	r0, [r5, #0]
 80093d0:	6128      	str	r0, [r5, #16]
 80093d2:	b930      	cbnz	r0, 80093e2 <_svfiprintf_r+0x32>
 80093d4:	230c      	movs	r3, #12
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	b01d      	add	sp, #116	@ 0x74
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	2340      	movs	r3, #64	@ 0x40
 80093e4:	616b      	str	r3, [r5, #20]
 80093e6:	2300      	movs	r3, #0
 80093e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ea:	2320      	movs	r3, #32
 80093ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093f0:	2330      	movs	r3, #48	@ 0x30
 80093f2:	f04f 0901 	mov.w	r9, #1
 80093f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80093fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009594 <_svfiprintf_r+0x1e4>
 80093fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009402:	4623      	mov	r3, r4
 8009404:	469a      	mov	sl, r3
 8009406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800940a:	b10a      	cbz	r2, 8009410 <_svfiprintf_r+0x60>
 800940c:	2a25      	cmp	r2, #37	@ 0x25
 800940e:	d1f9      	bne.n	8009404 <_svfiprintf_r+0x54>
 8009410:	ebba 0b04 	subs.w	fp, sl, r4
 8009414:	d00b      	beq.n	800942e <_svfiprintf_r+0x7e>
 8009416:	465b      	mov	r3, fp
 8009418:	4622      	mov	r2, r4
 800941a:	4629      	mov	r1, r5
 800941c:	4638      	mov	r0, r7
 800941e:	f7ff ff6b 	bl	80092f8 <__ssputs_r>
 8009422:	3001      	adds	r0, #1
 8009424:	f000 80a7 	beq.w	8009576 <_svfiprintf_r+0x1c6>
 8009428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800942a:	445a      	add	r2, fp
 800942c:	9209      	str	r2, [sp, #36]	@ 0x24
 800942e:	f89a 3000 	ldrb.w	r3, [sl]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 809f 	beq.w	8009576 <_svfiprintf_r+0x1c6>
 8009438:	2300      	movs	r3, #0
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009442:	f10a 0a01 	add.w	sl, sl, #1
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	9307      	str	r3, [sp, #28]
 800944a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800944e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009450:	4654      	mov	r4, sl
 8009452:	2205      	movs	r2, #5
 8009454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009458:	484e      	ldr	r0, [pc, #312]	@ (8009594 <_svfiprintf_r+0x1e4>)
 800945a:	f7fe fd24 	bl	8007ea6 <memchr>
 800945e:	9a04      	ldr	r2, [sp, #16]
 8009460:	b9d8      	cbnz	r0, 800949a <_svfiprintf_r+0xea>
 8009462:	06d0      	lsls	r0, r2, #27
 8009464:	bf44      	itt	mi
 8009466:	2320      	movmi	r3, #32
 8009468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800946c:	0711      	lsls	r1, r2, #28
 800946e:	bf44      	itt	mi
 8009470:	232b      	movmi	r3, #43	@ 0x2b
 8009472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009476:	f89a 3000 	ldrb.w	r3, [sl]
 800947a:	2b2a      	cmp	r3, #42	@ 0x2a
 800947c:	d015      	beq.n	80094aa <_svfiprintf_r+0xfa>
 800947e:	4654      	mov	r4, sl
 8009480:	2000      	movs	r0, #0
 8009482:	f04f 0c0a 	mov.w	ip, #10
 8009486:	9a07      	ldr	r2, [sp, #28]
 8009488:	4621      	mov	r1, r4
 800948a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800948e:	3b30      	subs	r3, #48	@ 0x30
 8009490:	2b09      	cmp	r3, #9
 8009492:	d94b      	bls.n	800952c <_svfiprintf_r+0x17c>
 8009494:	b1b0      	cbz	r0, 80094c4 <_svfiprintf_r+0x114>
 8009496:	9207      	str	r2, [sp, #28]
 8009498:	e014      	b.n	80094c4 <_svfiprintf_r+0x114>
 800949a:	eba0 0308 	sub.w	r3, r0, r8
 800949e:	fa09 f303 	lsl.w	r3, r9, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	46a2      	mov	sl, r4
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	e7d2      	b.n	8009450 <_svfiprintf_r+0xa0>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	1d19      	adds	r1, r3, #4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	9103      	str	r1, [sp, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bfbb      	ittet	lt
 80094b6:	425b      	neglt	r3, r3
 80094b8:	f042 0202 	orrlt.w	r2, r2, #2
 80094bc:	9307      	strge	r3, [sp, #28]
 80094be:	9307      	strlt	r3, [sp, #28]
 80094c0:	bfb8      	it	lt
 80094c2:	9204      	strlt	r2, [sp, #16]
 80094c4:	7823      	ldrb	r3, [r4, #0]
 80094c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80094c8:	d10a      	bne.n	80094e0 <_svfiprintf_r+0x130>
 80094ca:	7863      	ldrb	r3, [r4, #1]
 80094cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ce:	d132      	bne.n	8009536 <_svfiprintf_r+0x186>
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	3402      	adds	r4, #2
 80094d4:	1d1a      	adds	r2, r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	9203      	str	r2, [sp, #12]
 80094da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094de:	9305      	str	r3, [sp, #20]
 80094e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009598 <_svfiprintf_r+0x1e8>
 80094e4:	2203      	movs	r2, #3
 80094e6:	4650      	mov	r0, sl
 80094e8:	7821      	ldrb	r1, [r4, #0]
 80094ea:	f7fe fcdc 	bl	8007ea6 <memchr>
 80094ee:	b138      	cbz	r0, 8009500 <_svfiprintf_r+0x150>
 80094f0:	2240      	movs	r2, #64	@ 0x40
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	eba0 000a 	sub.w	r0, r0, sl
 80094f8:	4082      	lsls	r2, r0
 80094fa:	4313      	orrs	r3, r2
 80094fc:	3401      	adds	r4, #1
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	2206      	movs	r2, #6
 8009506:	4825      	ldr	r0, [pc, #148]	@ (800959c <_svfiprintf_r+0x1ec>)
 8009508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800950c:	f7fe fccb 	bl	8007ea6 <memchr>
 8009510:	2800      	cmp	r0, #0
 8009512:	d036      	beq.n	8009582 <_svfiprintf_r+0x1d2>
 8009514:	4b22      	ldr	r3, [pc, #136]	@ (80095a0 <_svfiprintf_r+0x1f0>)
 8009516:	bb1b      	cbnz	r3, 8009560 <_svfiprintf_r+0x1b0>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	3307      	adds	r3, #7
 800951c:	f023 0307 	bic.w	r3, r3, #7
 8009520:	3308      	adds	r3, #8
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009526:	4433      	add	r3, r6
 8009528:	9309      	str	r3, [sp, #36]	@ 0x24
 800952a:	e76a      	b.n	8009402 <_svfiprintf_r+0x52>
 800952c:	460c      	mov	r4, r1
 800952e:	2001      	movs	r0, #1
 8009530:	fb0c 3202 	mla	r2, ip, r2, r3
 8009534:	e7a8      	b.n	8009488 <_svfiprintf_r+0xd8>
 8009536:	2300      	movs	r3, #0
 8009538:	f04f 0c0a 	mov.w	ip, #10
 800953c:	4619      	mov	r1, r3
 800953e:	3401      	adds	r4, #1
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	4620      	mov	r0, r4
 8009544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009548:	3a30      	subs	r2, #48	@ 0x30
 800954a:	2a09      	cmp	r2, #9
 800954c:	d903      	bls.n	8009556 <_svfiprintf_r+0x1a6>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c6      	beq.n	80094e0 <_svfiprintf_r+0x130>
 8009552:	9105      	str	r1, [sp, #20]
 8009554:	e7c4      	b.n	80094e0 <_svfiprintf_r+0x130>
 8009556:	4604      	mov	r4, r0
 8009558:	2301      	movs	r3, #1
 800955a:	fb0c 2101 	mla	r1, ip, r1, r2
 800955e:	e7f0      	b.n	8009542 <_svfiprintf_r+0x192>
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	462a      	mov	r2, r5
 8009566:	4638      	mov	r0, r7
 8009568:	4b0e      	ldr	r3, [pc, #56]	@ (80095a4 <_svfiprintf_r+0x1f4>)
 800956a:	a904      	add	r1, sp, #16
 800956c:	f7fd ff28 	bl	80073c0 <_printf_float>
 8009570:	1c42      	adds	r2, r0, #1
 8009572:	4606      	mov	r6, r0
 8009574:	d1d6      	bne.n	8009524 <_svfiprintf_r+0x174>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	065b      	lsls	r3, r3, #25
 800957a:	f53f af2d 	bmi.w	80093d8 <_svfiprintf_r+0x28>
 800957e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009580:	e72c      	b.n	80093dc <_svfiprintf_r+0x2c>
 8009582:	ab03      	add	r3, sp, #12
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	462a      	mov	r2, r5
 8009588:	4638      	mov	r0, r7
 800958a:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <_svfiprintf_r+0x1f4>)
 800958c:	a904      	add	r1, sp, #16
 800958e:	f7fe f9b5 	bl	80078fc <_printf_i>
 8009592:	e7ed      	b.n	8009570 <_svfiprintf_r+0x1c0>
 8009594:	0800a050 	.word	0x0800a050
 8009598:	0800a056 	.word	0x0800a056
 800959c:	0800a05a 	.word	0x0800a05a
 80095a0:	080073c1 	.word	0x080073c1
 80095a4:	080092f9 	.word	0x080092f9

080095a8 <__sflush_r>:
 80095a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	0716      	lsls	r6, r2, #28
 80095b0:	4605      	mov	r5, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	d454      	bmi.n	8009660 <__sflush_r+0xb8>
 80095b6:	684b      	ldr	r3, [r1, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dc02      	bgt.n	80095c2 <__sflush_r+0x1a>
 80095bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	dd48      	ble.n	8009654 <__sflush_r+0xac>
 80095c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d045      	beq.n	8009654 <__sflush_r+0xac>
 80095c8:	2300      	movs	r3, #0
 80095ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095ce:	682f      	ldr	r7, [r5, #0]
 80095d0:	6a21      	ldr	r1, [r4, #32]
 80095d2:	602b      	str	r3, [r5, #0]
 80095d4:	d030      	beq.n	8009638 <__sflush_r+0x90>
 80095d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	0759      	lsls	r1, r3, #29
 80095dc:	d505      	bpl.n	80095ea <__sflush_r+0x42>
 80095de:	6863      	ldr	r3, [r4, #4]
 80095e0:	1ad2      	subs	r2, r2, r3
 80095e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095e4:	b10b      	cbz	r3, 80095ea <__sflush_r+0x42>
 80095e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095e8:	1ad2      	subs	r2, r2, r3
 80095ea:	2300      	movs	r3, #0
 80095ec:	4628      	mov	r0, r5
 80095ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095f0:	6a21      	ldr	r1, [r4, #32]
 80095f2:	47b0      	blx	r6
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	d106      	bne.n	8009608 <__sflush_r+0x60>
 80095fa:	6829      	ldr	r1, [r5, #0]
 80095fc:	291d      	cmp	r1, #29
 80095fe:	d82b      	bhi.n	8009658 <__sflush_r+0xb0>
 8009600:	4a28      	ldr	r2, [pc, #160]	@ (80096a4 <__sflush_r+0xfc>)
 8009602:	410a      	asrs	r2, r1
 8009604:	07d6      	lsls	r6, r2, #31
 8009606:	d427      	bmi.n	8009658 <__sflush_r+0xb0>
 8009608:	2200      	movs	r2, #0
 800960a:	6062      	str	r2, [r4, #4]
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	04d9      	lsls	r1, r3, #19
 8009610:	6022      	str	r2, [r4, #0]
 8009612:	d504      	bpl.n	800961e <__sflush_r+0x76>
 8009614:	1c42      	adds	r2, r0, #1
 8009616:	d101      	bne.n	800961c <__sflush_r+0x74>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b903      	cbnz	r3, 800961e <__sflush_r+0x76>
 800961c:	6560      	str	r0, [r4, #84]	@ 0x54
 800961e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009620:	602f      	str	r7, [r5, #0]
 8009622:	b1b9      	cbz	r1, 8009654 <__sflush_r+0xac>
 8009624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009628:	4299      	cmp	r1, r3
 800962a:	d002      	beq.n	8009632 <__sflush_r+0x8a>
 800962c:	4628      	mov	r0, r5
 800962e:	f7ff fa9b 	bl	8008b68 <_free_r>
 8009632:	2300      	movs	r3, #0
 8009634:	6363      	str	r3, [r4, #52]	@ 0x34
 8009636:	e00d      	b.n	8009654 <__sflush_r+0xac>
 8009638:	2301      	movs	r3, #1
 800963a:	4628      	mov	r0, r5
 800963c:	47b0      	blx	r6
 800963e:	4602      	mov	r2, r0
 8009640:	1c50      	adds	r0, r2, #1
 8009642:	d1c9      	bne.n	80095d8 <__sflush_r+0x30>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0c6      	beq.n	80095d8 <__sflush_r+0x30>
 800964a:	2b1d      	cmp	r3, #29
 800964c:	d001      	beq.n	8009652 <__sflush_r+0xaa>
 800964e:	2b16      	cmp	r3, #22
 8009650:	d11d      	bne.n	800968e <__sflush_r+0xe6>
 8009652:	602f      	str	r7, [r5, #0]
 8009654:	2000      	movs	r0, #0
 8009656:	e021      	b.n	800969c <__sflush_r+0xf4>
 8009658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800965c:	b21b      	sxth	r3, r3
 800965e:	e01a      	b.n	8009696 <__sflush_r+0xee>
 8009660:	690f      	ldr	r7, [r1, #16]
 8009662:	2f00      	cmp	r7, #0
 8009664:	d0f6      	beq.n	8009654 <__sflush_r+0xac>
 8009666:	0793      	lsls	r3, r2, #30
 8009668:	bf18      	it	ne
 800966a:	2300      	movne	r3, #0
 800966c:	680e      	ldr	r6, [r1, #0]
 800966e:	bf08      	it	eq
 8009670:	694b      	ldreq	r3, [r1, #20]
 8009672:	1bf6      	subs	r6, r6, r7
 8009674:	600f      	str	r7, [r1, #0]
 8009676:	608b      	str	r3, [r1, #8]
 8009678:	2e00      	cmp	r6, #0
 800967a:	ddeb      	ble.n	8009654 <__sflush_r+0xac>
 800967c:	4633      	mov	r3, r6
 800967e:	463a      	mov	r2, r7
 8009680:	4628      	mov	r0, r5
 8009682:	6a21      	ldr	r1, [r4, #32]
 8009684:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009688:	47e0      	blx	ip
 800968a:	2800      	cmp	r0, #0
 800968c:	dc07      	bgt.n	800969e <__sflush_r+0xf6>
 800968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800969e:	4407      	add	r7, r0
 80096a0:	1a36      	subs	r6, r6, r0
 80096a2:	e7e9      	b.n	8009678 <__sflush_r+0xd0>
 80096a4:	dfbffffe 	.word	0xdfbffffe

080096a8 <_fflush_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	690b      	ldr	r3, [r1, #16]
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b913      	cbnz	r3, 80096b8 <_fflush_r+0x10>
 80096b2:	2500      	movs	r5, #0
 80096b4:	4628      	mov	r0, r5
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	b118      	cbz	r0, 80096c2 <_fflush_r+0x1a>
 80096ba:	6a03      	ldr	r3, [r0, #32]
 80096bc:	b90b      	cbnz	r3, 80096c2 <_fflush_r+0x1a>
 80096be:	f7fe fac9 	bl	8007c54 <__sinit>
 80096c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f3      	beq.n	80096b2 <_fflush_r+0xa>
 80096ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096cc:	07d0      	lsls	r0, r2, #31
 80096ce:	d404      	bmi.n	80096da <_fflush_r+0x32>
 80096d0:	0599      	lsls	r1, r3, #22
 80096d2:	d402      	bmi.n	80096da <_fflush_r+0x32>
 80096d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d6:	f7fe fbe4 	bl	8007ea2 <__retarget_lock_acquire_recursive>
 80096da:	4628      	mov	r0, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7ff ff63 	bl	80095a8 <__sflush_r>
 80096e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096e4:	4605      	mov	r5, r0
 80096e6:	07da      	lsls	r2, r3, #31
 80096e8:	d4e4      	bmi.n	80096b4 <_fflush_r+0xc>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	d4e1      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096f2:	f7fe fbd7 	bl	8007ea4 <__retarget_lock_release_recursive>
 80096f6:	e7dd      	b.n	80096b4 <_fflush_r+0xc>

080096f8 <memmove>:
 80096f8:	4288      	cmp	r0, r1
 80096fa:	b510      	push	{r4, lr}
 80096fc:	eb01 0402 	add.w	r4, r1, r2
 8009700:	d902      	bls.n	8009708 <memmove+0x10>
 8009702:	4284      	cmp	r4, r0
 8009704:	4623      	mov	r3, r4
 8009706:	d807      	bhi.n	8009718 <memmove+0x20>
 8009708:	1e43      	subs	r3, r0, #1
 800970a:	42a1      	cmp	r1, r4
 800970c:	d008      	beq.n	8009720 <memmove+0x28>
 800970e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009716:	e7f8      	b.n	800970a <memmove+0x12>
 8009718:	4601      	mov	r1, r0
 800971a:	4402      	add	r2, r0
 800971c:	428a      	cmp	r2, r1
 800971e:	d100      	bne.n	8009722 <memmove+0x2a>
 8009720:	bd10      	pop	{r4, pc}
 8009722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800972a:	e7f7      	b.n	800971c <memmove+0x24>

0800972c <memcpy>:
 800972c:	440a      	add	r2, r1
 800972e:	4291      	cmp	r1, r2
 8009730:	f100 33ff 	add.w	r3, r0, #4294967295
 8009734:	d100      	bne.n	8009738 <memcpy+0xc>
 8009736:	4770      	bx	lr
 8009738:	b510      	push	{r4, lr}
 800973a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973e:	4291      	cmp	r1, r2
 8009740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009744:	d1f9      	bne.n	800973a <memcpy+0xe>
 8009746:	bd10      	pop	{r4, pc}

08009748 <__assert_func>:
 8009748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800974a:	4614      	mov	r4, r2
 800974c:	461a      	mov	r2, r3
 800974e:	4b09      	ldr	r3, [pc, #36]	@ (8009774 <__assert_func+0x2c>)
 8009750:	4605      	mov	r5, r0
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68d8      	ldr	r0, [r3, #12]
 8009756:	b954      	cbnz	r4, 800976e <__assert_func+0x26>
 8009758:	4b07      	ldr	r3, [pc, #28]	@ (8009778 <__assert_func+0x30>)
 800975a:	461c      	mov	r4, r3
 800975c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009760:	9100      	str	r1, [sp, #0]
 8009762:	462b      	mov	r3, r5
 8009764:	4905      	ldr	r1, [pc, #20]	@ (800977c <__assert_func+0x34>)
 8009766:	f000 f86f 	bl	8009848 <fiprintf>
 800976a:	f000 f87f 	bl	800986c <abort>
 800976e:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <__assert_func+0x38>)
 8009770:	e7f4      	b.n	800975c <__assert_func+0x14>
 8009772:	bf00      	nop
 8009774:	20000018 	.word	0x20000018
 8009778:	0800a0a6 	.word	0x0800a0a6
 800977c:	0800a078 	.word	0x0800a078
 8009780:	0800a06b 	.word	0x0800a06b

08009784 <_calloc_r>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	fba1 5402 	umull	r5, r4, r1, r2
 800978a:	b93c      	cbnz	r4, 800979c <_calloc_r+0x18>
 800978c:	4629      	mov	r1, r5
 800978e:	f7fd fced 	bl	800716c <_malloc_r>
 8009792:	4606      	mov	r6, r0
 8009794:	b928      	cbnz	r0, 80097a2 <_calloc_r+0x1e>
 8009796:	2600      	movs	r6, #0
 8009798:	4630      	mov	r0, r6
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	220c      	movs	r2, #12
 800979e:	6002      	str	r2, [r0, #0]
 80097a0:	e7f9      	b.n	8009796 <_calloc_r+0x12>
 80097a2:	462a      	mov	r2, r5
 80097a4:	4621      	mov	r1, r4
 80097a6:	f7fe faee 	bl	8007d86 <memset>
 80097aa:	e7f5      	b.n	8009798 <_calloc_r+0x14>

080097ac <__ascii_mbtowc>:
 80097ac:	b082      	sub	sp, #8
 80097ae:	b901      	cbnz	r1, 80097b2 <__ascii_mbtowc+0x6>
 80097b0:	a901      	add	r1, sp, #4
 80097b2:	b142      	cbz	r2, 80097c6 <__ascii_mbtowc+0x1a>
 80097b4:	b14b      	cbz	r3, 80097ca <__ascii_mbtowc+0x1e>
 80097b6:	7813      	ldrb	r3, [r2, #0]
 80097b8:	600b      	str	r3, [r1, #0]
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	1e10      	subs	r0, r2, #0
 80097be:	bf18      	it	ne
 80097c0:	2001      	movne	r0, #1
 80097c2:	b002      	add	sp, #8
 80097c4:	4770      	bx	lr
 80097c6:	4610      	mov	r0, r2
 80097c8:	e7fb      	b.n	80097c2 <__ascii_mbtowc+0x16>
 80097ca:	f06f 0001 	mvn.w	r0, #1
 80097ce:	e7f8      	b.n	80097c2 <__ascii_mbtowc+0x16>

080097d0 <_realloc_r>:
 80097d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	4680      	mov	r8, r0
 80097d6:	4615      	mov	r5, r2
 80097d8:	460c      	mov	r4, r1
 80097da:	b921      	cbnz	r1, 80097e6 <_realloc_r+0x16>
 80097dc:	4611      	mov	r1, r2
 80097de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	f7fd bcc3 	b.w	800716c <_malloc_r>
 80097e6:	b92a      	cbnz	r2, 80097f4 <_realloc_r+0x24>
 80097e8:	f7ff f9be 	bl	8008b68 <_free_r>
 80097ec:	2400      	movs	r4, #0
 80097ee:	4620      	mov	r0, r4
 80097f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f4:	f000 f841 	bl	800987a <_malloc_usable_size_r>
 80097f8:	4285      	cmp	r5, r0
 80097fa:	4606      	mov	r6, r0
 80097fc:	d802      	bhi.n	8009804 <_realloc_r+0x34>
 80097fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009802:	d8f4      	bhi.n	80097ee <_realloc_r+0x1e>
 8009804:	4629      	mov	r1, r5
 8009806:	4640      	mov	r0, r8
 8009808:	f7fd fcb0 	bl	800716c <_malloc_r>
 800980c:	4607      	mov	r7, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d0ec      	beq.n	80097ec <_realloc_r+0x1c>
 8009812:	42b5      	cmp	r5, r6
 8009814:	462a      	mov	r2, r5
 8009816:	4621      	mov	r1, r4
 8009818:	bf28      	it	cs
 800981a:	4632      	movcs	r2, r6
 800981c:	f7ff ff86 	bl	800972c <memcpy>
 8009820:	4621      	mov	r1, r4
 8009822:	4640      	mov	r0, r8
 8009824:	f7ff f9a0 	bl	8008b68 <_free_r>
 8009828:	463c      	mov	r4, r7
 800982a:	e7e0      	b.n	80097ee <_realloc_r+0x1e>

0800982c <__ascii_wctomb>:
 800982c:	4603      	mov	r3, r0
 800982e:	4608      	mov	r0, r1
 8009830:	b141      	cbz	r1, 8009844 <__ascii_wctomb+0x18>
 8009832:	2aff      	cmp	r2, #255	@ 0xff
 8009834:	d904      	bls.n	8009840 <__ascii_wctomb+0x14>
 8009836:	228a      	movs	r2, #138	@ 0x8a
 8009838:	f04f 30ff 	mov.w	r0, #4294967295
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	4770      	bx	lr
 8009840:	2001      	movs	r0, #1
 8009842:	700a      	strb	r2, [r1, #0]
 8009844:	4770      	bx	lr
	...

08009848 <fiprintf>:
 8009848:	b40e      	push	{r1, r2, r3}
 800984a:	b503      	push	{r0, r1, lr}
 800984c:	4601      	mov	r1, r0
 800984e:	ab03      	add	r3, sp, #12
 8009850:	4805      	ldr	r0, [pc, #20]	@ (8009868 <fiprintf+0x20>)
 8009852:	f853 2b04 	ldr.w	r2, [r3], #4
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	f000 f83d 	bl	80098d8 <_vfiprintf_r>
 800985e:	b002      	add	sp, #8
 8009860:	f85d eb04 	ldr.w	lr, [sp], #4
 8009864:	b003      	add	sp, #12
 8009866:	4770      	bx	lr
 8009868:	20000018 	.word	0x20000018

0800986c <abort>:
 800986c:	2006      	movs	r0, #6
 800986e:	b508      	push	{r3, lr}
 8009870:	f000 fa06 	bl	8009c80 <raise>
 8009874:	2001      	movs	r0, #1
 8009876:	f7f8 f81c 	bl	80018b2 <_exit>

0800987a <_malloc_usable_size_r>:
 800987a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987e:	1f18      	subs	r0, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfbc      	itt	lt
 8009884:	580b      	ldrlt	r3, [r1, r0]
 8009886:	18c0      	addlt	r0, r0, r3
 8009888:	4770      	bx	lr

0800988a <__sfputc_r>:
 800988a:	6893      	ldr	r3, [r2, #8]
 800988c:	b410      	push	{r4}
 800988e:	3b01      	subs	r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	6093      	str	r3, [r2, #8]
 8009894:	da07      	bge.n	80098a6 <__sfputc_r+0x1c>
 8009896:	6994      	ldr	r4, [r2, #24]
 8009898:	42a3      	cmp	r3, r4
 800989a:	db01      	blt.n	80098a0 <__sfputc_r+0x16>
 800989c:	290a      	cmp	r1, #10
 800989e:	d102      	bne.n	80098a6 <__sfputc_r+0x1c>
 80098a0:	bc10      	pop	{r4}
 80098a2:	f000 b931 	b.w	8009b08 <__swbuf_r>
 80098a6:	6813      	ldr	r3, [r2, #0]
 80098a8:	1c58      	adds	r0, r3, #1
 80098aa:	6010      	str	r0, [r2, #0]
 80098ac:	7019      	strb	r1, [r3, #0]
 80098ae:	4608      	mov	r0, r1
 80098b0:	bc10      	pop	{r4}
 80098b2:	4770      	bx	lr

080098b4 <__sfputs_r>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	4606      	mov	r6, r0
 80098b8:	460f      	mov	r7, r1
 80098ba:	4614      	mov	r4, r2
 80098bc:	18d5      	adds	r5, r2, r3
 80098be:	42ac      	cmp	r4, r5
 80098c0:	d101      	bne.n	80098c6 <__sfputs_r+0x12>
 80098c2:	2000      	movs	r0, #0
 80098c4:	e007      	b.n	80098d6 <__sfputs_r+0x22>
 80098c6:	463a      	mov	r2, r7
 80098c8:	4630      	mov	r0, r6
 80098ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ce:	f7ff ffdc 	bl	800988a <__sfputc_r>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	d1f3      	bne.n	80098be <__sfputs_r+0xa>
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098d8 <_vfiprintf_r>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	460d      	mov	r5, r1
 80098de:	4614      	mov	r4, r2
 80098e0:	4698      	mov	r8, r3
 80098e2:	4606      	mov	r6, r0
 80098e4:	b09d      	sub	sp, #116	@ 0x74
 80098e6:	b118      	cbz	r0, 80098f0 <_vfiprintf_r+0x18>
 80098e8:	6a03      	ldr	r3, [r0, #32]
 80098ea:	b90b      	cbnz	r3, 80098f0 <_vfiprintf_r+0x18>
 80098ec:	f7fe f9b2 	bl	8007c54 <__sinit>
 80098f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098f2:	07d9      	lsls	r1, r3, #31
 80098f4:	d405      	bmi.n	8009902 <_vfiprintf_r+0x2a>
 80098f6:	89ab      	ldrh	r3, [r5, #12]
 80098f8:	059a      	lsls	r2, r3, #22
 80098fa:	d402      	bmi.n	8009902 <_vfiprintf_r+0x2a>
 80098fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098fe:	f7fe fad0 	bl	8007ea2 <__retarget_lock_acquire_recursive>
 8009902:	89ab      	ldrh	r3, [r5, #12]
 8009904:	071b      	lsls	r3, r3, #28
 8009906:	d501      	bpl.n	800990c <_vfiprintf_r+0x34>
 8009908:	692b      	ldr	r3, [r5, #16]
 800990a:	b99b      	cbnz	r3, 8009934 <_vfiprintf_r+0x5c>
 800990c:	4629      	mov	r1, r5
 800990e:	4630      	mov	r0, r6
 8009910:	f000 f938 	bl	8009b84 <__swsetup_r>
 8009914:	b170      	cbz	r0, 8009934 <_vfiprintf_r+0x5c>
 8009916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009918:	07dc      	lsls	r4, r3, #31
 800991a:	d504      	bpl.n	8009926 <_vfiprintf_r+0x4e>
 800991c:	f04f 30ff 	mov.w	r0, #4294967295
 8009920:	b01d      	add	sp, #116	@ 0x74
 8009922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	0598      	lsls	r0, r3, #22
 800992a:	d4f7      	bmi.n	800991c <_vfiprintf_r+0x44>
 800992c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800992e:	f7fe fab9 	bl	8007ea4 <__retarget_lock_release_recursive>
 8009932:	e7f3      	b.n	800991c <_vfiprintf_r+0x44>
 8009934:	2300      	movs	r3, #0
 8009936:	9309      	str	r3, [sp, #36]	@ 0x24
 8009938:	2320      	movs	r3, #32
 800993a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800993e:	2330      	movs	r3, #48	@ 0x30
 8009940:	f04f 0901 	mov.w	r9, #1
 8009944:	f8cd 800c 	str.w	r8, [sp, #12]
 8009948:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009af4 <_vfiprintf_r+0x21c>
 800994c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009950:	4623      	mov	r3, r4
 8009952:	469a      	mov	sl, r3
 8009954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009958:	b10a      	cbz	r2, 800995e <_vfiprintf_r+0x86>
 800995a:	2a25      	cmp	r2, #37	@ 0x25
 800995c:	d1f9      	bne.n	8009952 <_vfiprintf_r+0x7a>
 800995e:	ebba 0b04 	subs.w	fp, sl, r4
 8009962:	d00b      	beq.n	800997c <_vfiprintf_r+0xa4>
 8009964:	465b      	mov	r3, fp
 8009966:	4622      	mov	r2, r4
 8009968:	4629      	mov	r1, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ffa2 	bl	80098b4 <__sfputs_r>
 8009970:	3001      	adds	r0, #1
 8009972:	f000 80a7 	beq.w	8009ac4 <_vfiprintf_r+0x1ec>
 8009976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009978:	445a      	add	r2, fp
 800997a:	9209      	str	r2, [sp, #36]	@ 0x24
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 809f 	beq.w	8009ac4 <_vfiprintf_r+0x1ec>
 8009986:	2300      	movs	r3, #0
 8009988:	f04f 32ff 	mov.w	r2, #4294967295
 800998c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009990:	f10a 0a01 	add.w	sl, sl, #1
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	9307      	str	r3, [sp, #28]
 8009998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800999c:	931a      	str	r3, [sp, #104]	@ 0x68
 800999e:	4654      	mov	r4, sl
 80099a0:	2205      	movs	r2, #5
 80099a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a6:	4853      	ldr	r0, [pc, #332]	@ (8009af4 <_vfiprintf_r+0x21c>)
 80099a8:	f7fe fa7d 	bl	8007ea6 <memchr>
 80099ac:	9a04      	ldr	r2, [sp, #16]
 80099ae:	b9d8      	cbnz	r0, 80099e8 <_vfiprintf_r+0x110>
 80099b0:	06d1      	lsls	r1, r2, #27
 80099b2:	bf44      	itt	mi
 80099b4:	2320      	movmi	r3, #32
 80099b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099ba:	0713      	lsls	r3, r2, #28
 80099bc:	bf44      	itt	mi
 80099be:	232b      	movmi	r3, #43	@ 0x2b
 80099c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099c4:	f89a 3000 	ldrb.w	r3, [sl]
 80099c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ca:	d015      	beq.n	80099f8 <_vfiprintf_r+0x120>
 80099cc:	4654      	mov	r4, sl
 80099ce:	2000      	movs	r0, #0
 80099d0:	f04f 0c0a 	mov.w	ip, #10
 80099d4:	9a07      	ldr	r2, [sp, #28]
 80099d6:	4621      	mov	r1, r4
 80099d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099dc:	3b30      	subs	r3, #48	@ 0x30
 80099de:	2b09      	cmp	r3, #9
 80099e0:	d94b      	bls.n	8009a7a <_vfiprintf_r+0x1a2>
 80099e2:	b1b0      	cbz	r0, 8009a12 <_vfiprintf_r+0x13a>
 80099e4:	9207      	str	r2, [sp, #28]
 80099e6:	e014      	b.n	8009a12 <_vfiprintf_r+0x13a>
 80099e8:	eba0 0308 	sub.w	r3, r0, r8
 80099ec:	fa09 f303 	lsl.w	r3, r9, r3
 80099f0:	4313      	orrs	r3, r2
 80099f2:	46a2      	mov	sl, r4
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	e7d2      	b.n	800999e <_vfiprintf_r+0xc6>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	1d19      	adds	r1, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	9103      	str	r1, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfbb      	ittet	lt
 8009a04:	425b      	neglt	r3, r3
 8009a06:	f042 0202 	orrlt.w	r2, r2, #2
 8009a0a:	9307      	strge	r3, [sp, #28]
 8009a0c:	9307      	strlt	r3, [sp, #28]
 8009a0e:	bfb8      	it	lt
 8009a10:	9204      	strlt	r2, [sp, #16]
 8009a12:	7823      	ldrb	r3, [r4, #0]
 8009a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a16:	d10a      	bne.n	8009a2e <_vfiprintf_r+0x156>
 8009a18:	7863      	ldrb	r3, [r4, #1]
 8009a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1c:	d132      	bne.n	8009a84 <_vfiprintf_r+0x1ac>
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	3402      	adds	r4, #2
 8009a22:	1d1a      	adds	r2, r3, #4
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	9203      	str	r2, [sp, #12]
 8009a28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a2c:	9305      	str	r3, [sp, #20]
 8009a2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009af8 <_vfiprintf_r+0x220>
 8009a32:	2203      	movs	r2, #3
 8009a34:	4650      	mov	r0, sl
 8009a36:	7821      	ldrb	r1, [r4, #0]
 8009a38:	f7fe fa35 	bl	8007ea6 <memchr>
 8009a3c:	b138      	cbz	r0, 8009a4e <_vfiprintf_r+0x176>
 8009a3e:	2240      	movs	r2, #64	@ 0x40
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	eba0 000a 	sub.w	r0, r0, sl
 8009a46:	4082      	lsls	r2, r0
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	3401      	adds	r4, #1
 8009a4c:	9304      	str	r3, [sp, #16]
 8009a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a52:	2206      	movs	r2, #6
 8009a54:	4829      	ldr	r0, [pc, #164]	@ (8009afc <_vfiprintf_r+0x224>)
 8009a56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a5a:	f7fe fa24 	bl	8007ea6 <memchr>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d03f      	beq.n	8009ae2 <_vfiprintf_r+0x20a>
 8009a62:	4b27      	ldr	r3, [pc, #156]	@ (8009b00 <_vfiprintf_r+0x228>)
 8009a64:	bb1b      	cbnz	r3, 8009aae <_vfiprintf_r+0x1d6>
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	3307      	adds	r3, #7
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	3308      	adds	r3, #8
 8009a70:	9303      	str	r3, [sp, #12]
 8009a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a74:	443b      	add	r3, r7
 8009a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a78:	e76a      	b.n	8009950 <_vfiprintf_r+0x78>
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a82:	e7a8      	b.n	80099d6 <_vfiprintf_r+0xfe>
 8009a84:	2300      	movs	r3, #0
 8009a86:	f04f 0c0a 	mov.w	ip, #10
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	3401      	adds	r4, #1
 8009a8e:	9305      	str	r3, [sp, #20]
 8009a90:	4620      	mov	r0, r4
 8009a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a96:	3a30      	subs	r2, #48	@ 0x30
 8009a98:	2a09      	cmp	r2, #9
 8009a9a:	d903      	bls.n	8009aa4 <_vfiprintf_r+0x1cc>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0c6      	beq.n	8009a2e <_vfiprintf_r+0x156>
 8009aa0:	9105      	str	r1, [sp, #20]
 8009aa2:	e7c4      	b.n	8009a2e <_vfiprintf_r+0x156>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aac:	e7f0      	b.n	8009a90 <_vfiprintf_r+0x1b8>
 8009aae:	ab03      	add	r3, sp, #12
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	4b13      	ldr	r3, [pc, #76]	@ (8009b04 <_vfiprintf_r+0x22c>)
 8009ab8:	a904      	add	r1, sp, #16
 8009aba:	f7fd fc81 	bl	80073c0 <_printf_float>
 8009abe:	4607      	mov	r7, r0
 8009ac0:	1c78      	adds	r0, r7, #1
 8009ac2:	d1d6      	bne.n	8009a72 <_vfiprintf_r+0x19a>
 8009ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ac6:	07d9      	lsls	r1, r3, #31
 8009ac8:	d405      	bmi.n	8009ad6 <_vfiprintf_r+0x1fe>
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	059a      	lsls	r2, r3, #22
 8009ace:	d402      	bmi.n	8009ad6 <_vfiprintf_r+0x1fe>
 8009ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ad2:	f7fe f9e7 	bl	8007ea4 <__retarget_lock_release_recursive>
 8009ad6:	89ab      	ldrh	r3, [r5, #12]
 8009ad8:	065b      	lsls	r3, r3, #25
 8009ada:	f53f af1f 	bmi.w	800991c <_vfiprintf_r+0x44>
 8009ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ae0:	e71e      	b.n	8009920 <_vfiprintf_r+0x48>
 8009ae2:	ab03      	add	r3, sp, #12
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	462a      	mov	r2, r5
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4b06      	ldr	r3, [pc, #24]	@ (8009b04 <_vfiprintf_r+0x22c>)
 8009aec:	a904      	add	r1, sp, #16
 8009aee:	f7fd ff05 	bl	80078fc <_printf_i>
 8009af2:	e7e4      	b.n	8009abe <_vfiprintf_r+0x1e6>
 8009af4:	0800a050 	.word	0x0800a050
 8009af8:	0800a056 	.word	0x0800a056
 8009afc:	0800a05a 	.word	0x0800a05a
 8009b00:	080073c1 	.word	0x080073c1
 8009b04:	080098b5 	.word	0x080098b5

08009b08 <__swbuf_r>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	460e      	mov	r6, r1
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	4605      	mov	r5, r0
 8009b10:	b118      	cbz	r0, 8009b1a <__swbuf_r+0x12>
 8009b12:	6a03      	ldr	r3, [r0, #32]
 8009b14:	b90b      	cbnz	r3, 8009b1a <__swbuf_r+0x12>
 8009b16:	f7fe f89d 	bl	8007c54 <__sinit>
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	60a3      	str	r3, [r4, #8]
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	071a      	lsls	r2, r3, #28
 8009b22:	d501      	bpl.n	8009b28 <__swbuf_r+0x20>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	b943      	cbnz	r3, 8009b3a <__swbuf_r+0x32>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f000 f82a 	bl	8009b84 <__swsetup_r>
 8009b30:	b118      	cbz	r0, 8009b3a <__swbuf_r+0x32>
 8009b32:	f04f 37ff 	mov.w	r7, #4294967295
 8009b36:	4638      	mov	r0, r7
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	6922      	ldr	r2, [r4, #16]
 8009b3e:	b2f6      	uxtb	r6, r6
 8009b40:	1a98      	subs	r0, r3, r2
 8009b42:	6963      	ldr	r3, [r4, #20]
 8009b44:	4637      	mov	r7, r6
 8009b46:	4283      	cmp	r3, r0
 8009b48:	dc05      	bgt.n	8009b56 <__swbuf_r+0x4e>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f7ff fdab 	bl	80096a8 <_fflush_r>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d1ed      	bne.n	8009b32 <__swbuf_r+0x2a>
 8009b56:	68a3      	ldr	r3, [r4, #8]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	60a3      	str	r3, [r4, #8]
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	6022      	str	r2, [r4, #0]
 8009b62:	701e      	strb	r6, [r3, #0]
 8009b64:	6962      	ldr	r2, [r4, #20]
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d004      	beq.n	8009b76 <__swbuf_r+0x6e>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	07db      	lsls	r3, r3, #31
 8009b70:	d5e1      	bpl.n	8009b36 <__swbuf_r+0x2e>
 8009b72:	2e0a      	cmp	r6, #10
 8009b74:	d1df      	bne.n	8009b36 <__swbuf_r+0x2e>
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f7ff fd95 	bl	80096a8 <_fflush_r>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d0d9      	beq.n	8009b36 <__swbuf_r+0x2e>
 8009b82:	e7d6      	b.n	8009b32 <__swbuf_r+0x2a>

08009b84 <__swsetup_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4b29      	ldr	r3, [pc, #164]	@ (8009c2c <__swsetup_r+0xa8>)
 8009b88:	4605      	mov	r5, r0
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	b118      	cbz	r0, 8009b98 <__swsetup_r+0x14>
 8009b90:	6a03      	ldr	r3, [r0, #32]
 8009b92:	b90b      	cbnz	r3, 8009b98 <__swsetup_r+0x14>
 8009b94:	f7fe f85e 	bl	8007c54 <__sinit>
 8009b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9c:	0719      	lsls	r1, r3, #28
 8009b9e:	d422      	bmi.n	8009be6 <__swsetup_r+0x62>
 8009ba0:	06da      	lsls	r2, r3, #27
 8009ba2:	d407      	bmi.n	8009bb4 <__swsetup_r+0x30>
 8009ba4:	2209      	movs	r2, #9
 8009ba6:	602a      	str	r2, [r5, #0]
 8009ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	e033      	b.n	8009c1c <__swsetup_r+0x98>
 8009bb4:	0758      	lsls	r0, r3, #29
 8009bb6:	d512      	bpl.n	8009bde <__swsetup_r+0x5a>
 8009bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bba:	b141      	cbz	r1, 8009bce <__swsetup_r+0x4a>
 8009bbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d002      	beq.n	8009bca <__swsetup_r+0x46>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f7fe ffcf 	bl	8008b68 <_free_r>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f043 0308 	orr.w	r3, r3, #8
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	b94b      	cbnz	r3, 8009bfe <__swsetup_r+0x7a>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf4:	d003      	beq.n	8009bfe <__swsetup_r+0x7a>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f000 f882 	bl	8009d02 <__smakebuf_r>
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	f013 0201 	ands.w	r2, r3, #1
 8009c06:	d00a      	beq.n	8009c1e <__swsetup_r+0x9a>
 8009c08:	2200      	movs	r2, #0
 8009c0a:	60a2      	str	r2, [r4, #8]
 8009c0c:	6962      	ldr	r2, [r4, #20]
 8009c0e:	4252      	negs	r2, r2
 8009c10:	61a2      	str	r2, [r4, #24]
 8009c12:	6922      	ldr	r2, [r4, #16]
 8009c14:	b942      	cbnz	r2, 8009c28 <__swsetup_r+0xa4>
 8009c16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c1a:	d1c5      	bne.n	8009ba8 <__swsetup_r+0x24>
 8009c1c:	bd38      	pop	{r3, r4, r5, pc}
 8009c1e:	0799      	lsls	r1, r3, #30
 8009c20:	bf58      	it	pl
 8009c22:	6962      	ldrpl	r2, [r4, #20]
 8009c24:	60a2      	str	r2, [r4, #8]
 8009c26:	e7f4      	b.n	8009c12 <__swsetup_r+0x8e>
 8009c28:	2000      	movs	r0, #0
 8009c2a:	e7f7      	b.n	8009c1c <__swsetup_r+0x98>
 8009c2c:	20000018 	.word	0x20000018

08009c30 <_raise_r>:
 8009c30:	291f      	cmp	r1, #31
 8009c32:	b538      	push	{r3, r4, r5, lr}
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	d904      	bls.n	8009c44 <_raise_r+0x14>
 8009c3a:	2316      	movs	r3, #22
 8009c3c:	6003      	str	r3, [r0, #0]
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c46:	b112      	cbz	r2, 8009c4e <_raise_r+0x1e>
 8009c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c4c:	b94b      	cbnz	r3, 8009c62 <_raise_r+0x32>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f830 	bl	8009cb4 <_getpid_r>
 8009c54:	4622      	mov	r2, r4
 8009c56:	4601      	mov	r1, r0
 8009c58:	4628      	mov	r0, r5
 8009c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c5e:	f000 b817 	b.w	8009c90 <_kill_r>
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d00a      	beq.n	8009c7c <_raise_r+0x4c>
 8009c66:	1c59      	adds	r1, r3, #1
 8009c68:	d103      	bne.n	8009c72 <_raise_r+0x42>
 8009c6a:	2316      	movs	r3, #22
 8009c6c:	6003      	str	r3, [r0, #0]
 8009c6e:	2001      	movs	r0, #1
 8009c70:	e7e7      	b.n	8009c42 <_raise_r+0x12>
 8009c72:	2100      	movs	r1, #0
 8009c74:	4620      	mov	r0, r4
 8009c76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c7a:	4798      	blx	r3
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7e0      	b.n	8009c42 <_raise_r+0x12>

08009c80 <raise>:
 8009c80:	4b02      	ldr	r3, [pc, #8]	@ (8009c8c <raise+0xc>)
 8009c82:	4601      	mov	r1, r0
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	f7ff bfd3 	b.w	8009c30 <_raise_r>
 8009c8a:	bf00      	nop
 8009c8c:	20000018 	.word	0x20000018

08009c90 <_kill_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	2300      	movs	r3, #0
 8009c94:	4d06      	ldr	r5, [pc, #24]	@ (8009cb0 <_kill_r+0x20>)
 8009c96:	4604      	mov	r4, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	f7f7 fdf8 	bl	8001892 <_kill>
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	d102      	bne.n	8009cac <_kill_r+0x1c>
 8009ca6:	682b      	ldr	r3, [r5, #0]
 8009ca8:	b103      	cbz	r3, 8009cac <_kill_r+0x1c>
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000428 	.word	0x20000428

08009cb4 <_getpid_r>:
 8009cb4:	f7f7 bde6 	b.w	8001884 <_getpid>

08009cb8 <__swhatbuf_r>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	460c      	mov	r4, r1
 8009cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	461e      	mov	r6, r3
 8009cc6:	b096      	sub	sp, #88	@ 0x58
 8009cc8:	da0c      	bge.n	8009ce4 <__swhatbuf_r+0x2c>
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cd2:	bf14      	ite	ne
 8009cd4:	2340      	movne	r3, #64	@ 0x40
 8009cd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cda:	2000      	movs	r0, #0
 8009cdc:	6031      	str	r1, [r6, #0]
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	b016      	add	sp, #88	@ 0x58
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	466a      	mov	r2, sp
 8009ce6:	f000 f849 	bl	8009d7c <_fstat_r>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	dbed      	blt.n	8009cca <__swhatbuf_r+0x12>
 8009cee:	9901      	ldr	r1, [sp, #4]
 8009cf0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cf4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cf8:	4259      	negs	r1, r3
 8009cfa:	4159      	adcs	r1, r3
 8009cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d00:	e7eb      	b.n	8009cda <__swhatbuf_r+0x22>

08009d02 <__smakebuf_r>:
 8009d02:	898b      	ldrh	r3, [r1, #12]
 8009d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d06:	079d      	lsls	r5, r3, #30
 8009d08:	4606      	mov	r6, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	d507      	bpl.n	8009d1e <__smakebuf_r+0x1c>
 8009d0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	2301      	movs	r3, #1
 8009d18:	6163      	str	r3, [r4, #20]
 8009d1a:	b003      	add	sp, #12
 8009d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d1e:	466a      	mov	r2, sp
 8009d20:	ab01      	add	r3, sp, #4
 8009d22:	f7ff ffc9 	bl	8009cb8 <__swhatbuf_r>
 8009d26:	9f00      	ldr	r7, [sp, #0]
 8009d28:	4605      	mov	r5, r0
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7fd fa1d 	bl	800716c <_malloc_r>
 8009d32:	b948      	cbnz	r0, 8009d48 <__smakebuf_r+0x46>
 8009d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d38:	059a      	lsls	r2, r3, #22
 8009d3a:	d4ee      	bmi.n	8009d1a <__smakebuf_r+0x18>
 8009d3c:	f023 0303 	bic.w	r3, r3, #3
 8009d40:	f043 0302 	orr.w	r3, r3, #2
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	e7e2      	b.n	8009d0e <__smakebuf_r+0xc>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	9b01      	ldr	r3, [sp, #4]
 8009d56:	6020      	str	r0, [r4, #0]
 8009d58:	b15b      	cbz	r3, 8009d72 <__smakebuf_r+0x70>
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d60:	f000 f81e 	bl	8009da0 <_isatty_r>
 8009d64:	b128      	cbz	r0, 8009d72 <__smakebuf_r+0x70>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f023 0303 	bic.w	r3, r3, #3
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	431d      	orrs	r5, r3
 8009d76:	81a5      	strh	r5, [r4, #12]
 8009d78:	e7cf      	b.n	8009d1a <__smakebuf_r+0x18>
	...

08009d7c <_fstat_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4d06      	ldr	r5, [pc, #24]	@ (8009d9c <_fstat_r+0x20>)
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	602b      	str	r3, [r5, #0]
 8009d8a:	f7f7 fde1 	bl	8001950 <_fstat>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d102      	bne.n	8009d98 <_fstat_r+0x1c>
 8009d92:	682b      	ldr	r3, [r5, #0]
 8009d94:	b103      	cbz	r3, 8009d98 <_fstat_r+0x1c>
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000428 	.word	0x20000428

08009da0 <_isatty_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	2300      	movs	r3, #0
 8009da4:	4d05      	ldr	r5, [pc, #20]	@ (8009dbc <_isatty_r+0x1c>)
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f7 fddf 	bl	800196e <_isatty>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_isatty_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_isatty_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	20000428 	.word	0x20000428

08009dc0 <_init>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr

08009dcc <_fini>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr
